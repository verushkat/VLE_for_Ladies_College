{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://ornamentum/data-table/services/data-table-config.service.ts","ng://ornamentum/data-table/services/data-table-event.service.ts","ng://ornamentum/data-table/services/data-table-data-state.service.ts","ng://ornamentum/data-table/components/data-table-column/data-table-column.component.ts","ng://ornamentum/data-table/models/data-fetch-mode.enum.ts","ng://ornamentum/data-table/components/data-table-column-filter-header/data-table-column-filter-header.component.ts","ng://ornamentum/data-table/services/data-table-scroll-position.service.ts","ng://ornamentum/data-table/components/data-table-column-filter-template/data-table-column-filter-template.component.ts","ng://ornamentum/utility/services/object-utility.class.ts","ng://ornamentum/utility/directives/init.directive.ts","ng://ornamentum/utility/directives/focus.directive.ts","ng://ornamentum/utility/pipes/pixel-converter.pipe.ts","ng://ornamentum/utility/services/utility-config.service.ts","ng://ornamentum/utility/services/drag-and-drop.service.ts","ng://ornamentum/utility/services/global-ref.service.ts","ng://ornamentum/utility/services/resize.service.ts","ng://ornamentum/utility/services/popover-component-loader.class.ts","ng://ornamentum/utility/services/popover-component-loader-factory.service.ts","ng://ornamentum/utility/services/validator.service.ts","ng://ornamentum/utility/utility.module.ts","ng://ornamentum/data-table/components/data-table-column-title-header/data-table-column-title-header.component.ts","ng://ornamentum/data-table/components/data-table-column-selector/data-table-column-selector.component.ts","ng://ornamentum/data-table/components/data-table-header/data-table-header.component.ts","ng://ornamentum/data-table/components/data-table-col-group/data-table-col-group.component.ts","ng://ornamentum/data-table/components/data-table-pagination/data-table-pagination.component.ts","ng://ornamentum/data-table/services/data-table-persistence.service.ts","ng://ornamentum/data-table/services/data-table-resource.service.ts","ng://ornamentum/data-table/components/data-table/data-table.component.ts","ng://ornamentum/data-table/components/data-table-body/data-table-body.component.ts","ng://ornamentum/data-table/components/data-table-no-data-body/data-table-no-data-body.component.ts","ng://ornamentum/data-table/components/data-table-head/data-table-head.component.ts","ng://ornamentum/data-table/components/data-table-loading-spinner/data-table-loading-spinner.component.ts","ng://ornamentum/data-table/directives/scroll-position.directive.ts","ng://ornamentum/data-table/directives/scroll-element.directive.ts","ng://ornamentum/data-table/directives/element-width.directive.ts","ng://ornamentum/dropdown/services/dropdown-config.service.ts","ng://ornamentum/dropdown/services/dropdown-data-state.service.ts","ng://ornamentum/dropdown/services/dropdown-event-state.service.ts","ng://ornamentum/dropdown/components/dropdown-view/dropdown-view.component.ts","ng://ornamentum/dropdown/services/dropdown-resource.service.ts","ng://ornamentum/dropdown/components/dropdown/dropdown.component.ts","ng://ornamentum/dropdown/components/dropdown-filter/dropdown-filter.component.ts","ng://ornamentum/dropdown/components/dropdown-options/dropdown-options.component.ts","ng://ornamentum/dropdown/dropdown.module.ts","ng://ornamentum/data-table/data-table.module.ts","ng://ornamentum/resource-utility/services/request-param-mapper.service.ts","ng://ornamentum/resource-utility/services/resource-utility-config.service.ts","ng://ornamentum/resource-utility/resource-utility.module.ts","ng://ornamentum/data-table-resource/services/data-table-resource-config.service.ts","ng://ornamentum/data-table-resource/services/data-table-http-data-fetch.service.ts","ng://ornamentum/data-table-resource/services/data-table-http-resource-factory.service.ts","ng://ornamentum/data-table-resource/services/data-table-websocket-data-fetch.service.ts","ng://ornamentum/data-table-resource/services/data-table-websocket-resource-factory.service.ts","ng://ornamentum/data-table-resource/data-table-resource.module.ts","ng://ornamentum/dropdown-resource/services/dropdown-resource-config.service.ts","ng://ornamentum/dropdown-resource/services/dropdown-http-data-fetch.service.ts","ng://ornamentum/dropdown-resource/services/dropdown-http-resource-factory.service.ts","ng://ornamentum/dropdown-resource/services/dropdown-websocket-data-fetch.service.ts","ng://ornamentum/dropdown-resource/services/dropdown-websocket-resource-factory.service.ts","ng://ornamentum/dropdown-resource/dropdown-resource.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__values","o","m","Symbol","iterator","next","value","done","__read","r","e","ar","push","error","__spread","concat","DATA_TABLE_CONFIG","InjectionToken","DataTableConfigService","dataTableConfig","persistTableState","storageMode","multiColumnSortable","showHeader","title","width","undefined","minContentHeight","minContentWidth","contentHeight","pageable","loadOnScroll","loadViewDistanceRatio","showIndexColumn","indexColumnTitle","rowSelectable","selectMode","showRowSelectCheckbox","showRowSelectAllCheckbox","showSubstituteRows","expandableRows","selectOnRowClick","expandOnRowClick","autoFetch","showLoadingSpinner","selectTrackBy","filterDebounceTime","filterDebounce","showRefreshButton","showColumnSelector","columnSelectorWidth","expanderColumnWidth","indexColumnWidth","selectionColumnWidth","showRowExpandLoadingSpinner","offset","limit","maxLimit","stateKeyPrefix","baseTranslations","noDataMessage","header","body","pagination","rangeKey","rangeSeparator","nextTooltip","previousTooltip","lastTooltip","firstTooltip","columnSelector","dropdownFilter","filterPlaceholder","selectedOptionWrapPlaceholder","selectPlaceholder","sortable","sortOrder","filterable","columnResizable","columnVisible","showDropdownFilter","showFilterClearButton","dropdownFilterMenuPosition","dropdownFilterSelectMode","dropdownFilterSearchable","dropdownFilterSearchDebounceTime","dropdownFilterSearchDebounce","dropdownFilterWrapDisplaySelectLimit","dropdownFilterGroupByField","dropdownFilterShowSelectedOptionRemoveButton","dropdownFilterShowClearSelectionButton","dropdownFilterMenuWidth","dropdownFilterMenuHeight","dropdownFilterMultiSelectOptionMaxWidth","dropdownFilterCloseMenuOnSelect","dropdownFilterDynamicDimensionCalculation","dropdownFilterDynamicWidthRatio","dropdownFilterDynamicHeightRatio","defineProperty","_b","tslib_1.__values","entries","_c","_d","key","val","Injectable","Inject","args","DataTableEventStateService","allRowSelectChangeStream","EventEmitter","dataFetchStream","headerClickStream","rowBindStream","rowClickStream","rowDoubleClickStream","rowSelectChangeStream","cellBindStream","cellClickStream","initStream","dataBoundStream","columnBind","fetchFilterOptionsStream","ReplaySubject","staticDataSourceStream","DataTableDataStateService","allRowSelected","selectedRows","dataRows","dataLoading","substituteRows","heardReload","currentSortPriority","onDynamicRowSpanExtract","getUniqueId","append","index","id","DataTableColumnComponent","dataTableConfigService","eventStateService","dataStateService","currentSortOrder","baseSortOrder","showInColumnSelector","resizable","visible","resetSortOrder","getCellColor","row","onCellColorRender","getNewSortOrder","newSortOrder","getSortIconClass","sort-asc","sort-dsc","sort-reset","ngOnDestroy","filterValueExtractorSubscription","unsubscribe","ngOnInit","cssClass","field","test","replace","emit","sortPriority","Error","Component","selector","template","ContentChild","static","Input","HARD_RELOAD","SOFT_RELOAD","SOFT_LOAD","DataTableColumnFilterHeaderComponent","config","columnFilterStream","Subject","customFilterStream","initCustomFilterEvent","initDebounceDefaultFilterEvent","customFilterSubscription","columnFilterSubscription","_this","subscribe","filterEventArgs","column","filter","onFilter","pipe","debounceTime","DataFetchMode","exportAs","DataTableScrollPositionService","scrollPositionStream","DataTableColumnFilterTemplateComponent","scrollPositionService","filterDataStream","scrollPositionStreamSubscription","pos","isHorizontal","filterDropdown","close","onFilterValueExtract","fetchFilterOptionsStreamSubscription","switchMap","options","setTimeout","complete","onFilterDropdownInit","clearFilter","Output","splitPathExpression","get","obj","path","String","split","Boolean","reduce","res","InitDirective","ngInit","Directive","FocusDirective","el","nativeElement","focus","ElementRef","PixelConverterPipe","transform","Pipe","name","UtilityConfigService","DragAndDropService","drag","event","_a","move","up","startX","pageX","startY","pageY","x","y","moved","mouseMoveHandler","mouseMoveEvent","dx","dy","preventDefault","mouseUpHandler","mouseUpEvent","document","removeEventListener","addEventListener","GlobalRefService","setScrollbarWidth","scrollbarWidthValue","isBrowser","outer","createElement","style","visibility","msOverflowStyle","appendChild","widthNoScroll","offsetWidth","overflow","inner","widthWithScroll","parentNode","removeChild","window","ResizeService","globalRefService","resize","fromEvent","PopoverComponentLoader","componentFactoryResolver","appRef","renderer","resizeService","isVisible","registerClickOutside","exclude","_i","trackOutsideClick","some","contains","hide","clickListener","listen","touchStartListener","setPosition","parentElement","bodyClientRect","relativeParentElement","getBoundingClientRect","elementClientRect","left","top","position","includes","offsetHeight","componentElement","componentReference","location","floatTop","floatLeft","display","childElement","right","bottom","resizeEventSubscription","take","show","component","injector","closeOnOutsideClick","resolveComponentFactory","create","context","instance","attachView","hostView","domElem","rootNodes","changeDetectorRef","markForCheck","detectChanges","toggle","dispose","detachView","destroy","PopoverComponentLoaderFactoryService","createLoader","ComponentFactoryResolver","ApplicationRef","ValidatorService","idPatternValidatorExpression","RegExp","providedIn","DIRECTIVES","PIPES","PROVIDERS","UtilityModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","declarations","exports","DataTableColumnTitleHeaderComponent","dragAndDropService","resizeInProgress","onHeaderClick","sortData","prevSortOrder","columns","item","forEach","sortColumn","setColumnWidth","actualWidth","onColumnResize","columnElement","moveEvent","newWidth","resizeMinLimit","totalWidth","col","tableWidth","allRowSelectedChanged","selectedState","indexOf","splice","selected","showSortPriorityLabel","DataTableColumnSelectorComponent","DataTableHeaderComponent","componentLoaderFactory","componentLoader","toggleColumnSelector","element","onReload","Injector","Renderer2","DataTableColGroupComponent","DataTablePaginationComponent","isMobile","setMobileModeState","paginationContainer","clientWidth","firstPageClick","previousPageClick","Math","min","nextPageClick","lastPageClick","maxPage","ceil","itemCount","floor","isInvalidLimit","Number","onPageSizeChange","onPageSizeRevert","isInvalidPageIndex","page","onPageIndexChange","onPageIndexRevert","preventInvalidKeyPress","ViewChild","DataTablePersistenceService","storage","localStorage","sessionStorage","setState","version","data","ver","setItem","JSON","stringify","getState","parse","getItem","DataTableResourceService","setDataSource","dataSource","itemDataStream","closed","dataSourceSubscription","items","query","params","collection","fields","orders","result","slice","filterFields_1","every","filterColumn","filterExpression","filterValue","fieldValue","Array","isArray","toLowerCase","sortColumns","orderedSortColumns","sort","a","b","orderParams","accumulator","console","log","order","of","count","extractFilterOptions","filteredItems","acc","filterFieldMapper","filterField","self","findIndex","DataTableComponent","dataTableStateService","dataTableResourceService","zone","headerClick","allRowSelectChange","rowBind","rowClick","rowDoubleClick","rowSelectChange","cellBind","cellClick","init","dataBound","onDataBind","source","initDataSource","selectedRow","translations","scrollbarWidth","onAfterDataBind","queryResult","setDataRows","getSelectedState","mappedItems","map","dataLoaded","expanded","disabled","color","tooltip","dataRow","substituteRowCount","from","initDataFetchEvent","noop","dataFetchStreamSubscription","fetchMode","mapDataBind","catchError","clearRowSelectState","clearColumnState","loadData","sortField","uniqueField","initDataTableState","dataTableState_1","find","ngAfterContentInit","dataTableElement","scrollPositionSubscription","isVertical","scrollTop","scrollHeight","clientHeight","run","fetchData","writeValue","registerOnChange","onSelectChange","rowSelectChangeSubscription","selectedIds","registerOnTouched","fn","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","NgZone","ContentChildren","DataTableBodyComponent","dataRowTrackBy","isOddRow","isEvenRow","isOddSubstituteRow","isEvenSubstituteRow","onRowExpand","$event","onRowInit","onCellInit","cellClicked","getRowSpanCollection","showRowSelectCheckboxColumn","onRowSelectClick","onRowSelectChange","previousAllRowSelectedState","previousSelection","rowClicked","target","classList","rowDoubleClicked","showNoDataOverlay","getFieldValue","isRowExpanderLoading","DataTableNoDataBodyComponent","resetFilters","noRecordsTemplate","DataTableHeadComponent","DataTableLoadingSpinnerComponent","ScrollPositionDirective","ngAfterViewInit","runOutsideAngular","scrollEventSubscription","scrollLeft","scrollWidth","pairwise","pair","previous","current","ngScrollPosition","ScrollElementDirective","ngScrollElement","ElementWidthDirective","ngElementWidth","DROPDOWN_CONFIG","DropdownConfigService","dropdownConfig","displayTrackBy","disabledTrackBy","menuPosition","groupByField","wrapDisplaySelectLimit","showSelectedOptionRemoveButton","showClearSelectionButton","menuWidth","menuHeight","loadDataOnInit","closeMenuOnSelect","showOptionSelectCheckbox","showOptionIndex","showOptionTrackBy","multiSelectOptionMaxWidth","setFirstOptionSelected","triggerSelectChangeOnInit","triggerSelectChangeOnModelUpdate","triggerSelectChangeOnFirstOptionSelect","dynamicDimensionCalculation","dynamicWidthRatio","dynamicHeightRatio","getDisplayText","option","DropdownDataStateService","selectedOptions","currentOptionCount","dropdownOptions","dropdownOptionGroups","filterText","DropdownEventStateService","selectChangeStream","DropdownViewComponent","scrollEvent","checkScrollPosition","scrollElementHeight","totalOptionCount","DropdownResourceService","optionDataStream","value_1","DropdownComponent","dropdownResourceService","componentLoaderRef","selectChange","dropdownOptionTemplate","dropdownOptionGroupHeaderTemplate","loadingSpinnerTemplate","optionTemplate","optionGroupHeaderTemplate","selectedOption","hardReload","toggleDropdown","onSelectChangeSubscription","triggerSelectChange","clearSelectedOptions","setDisabledState","isDisabled","mapDropdownOption","text","setDropdownOptions","groupFieldValue","currentGroup","group","groupName","fetchQueryResults","requestParams","onSelectOptionRemove","DropdownFilterComponent","dataFilterStream","filterKeyUp","initFilterDebounceEvent","dataFilterSubscription","DropdownOptionsComponent","optionTrackBy","onOptionClick","toggleOptionSelectedState","onOptionCheckboxClick","selectedIndex","selectedId","COMPONENTS","DropdownModule","useValue","FormsModule","entryComponents","DataTableModule","RequestParamMapperService","mapQueryParams","requestOptions","HttpParams","queryParams","set","mapRequestOptions","url","ResourceUtilityConfigService","ResourceUtilityModule","DataTableResourceConfigService","DataTableHttpDataFetchService","http","requestParamMapperService","mapper","join","resource","DataTableHttpResourceFactoryService","getResourceProvider","HttpClient","DataTableWebsocketDataFetchService","socket","webSocket","subject","socketSubscription","type","DataTableWebsocketResourceFactoryService","DataTableResourceModule","DropdownResourceConfigService","DropdownHttpDataFetchService","DropdownHttpResourceFactoryService","DropdownWebsocketDataFetchService","DropdownWebsocketResourceFactoryService","DropdownResourceModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Inject, Injectable, InjectionToken } from '@angular/core';\n\nimport { DataTableTranslations } from '../models/data-table-translations.model';\nimport { DataTableConfig } from '../models/data-table-config.model';\n\nimport { DataTableStorageMode } from '../models/data-table-storage-mode.model';\nimport { DataTableSortOrder } from '../models/data-table-sort-order.model';\nimport { DataTableSelectMode } from '../models/data-table-select-mode.model';\nimport { DropdownSelectMode } from '../../dropdown/dropdown.module';\nimport { ViewPosition } from '../../utility/models/view-position.model';\n\nexport const DATA_TABLE_CONFIG = new InjectionToken<DataTableConfig>('dataTableConfig');\n\n/**\n * Data table config service\n * Manage all the global configurations of grid which can be overridden while importing the module.\n */\n@Injectable()\nexport class DataTableConfigService implements DataTableConfig {\n  // Table base config\n  public persistTableState = false;\n  public storageMode: DataTableStorageMode = 'session';\n  public multiColumnSortable = false;\n  public showHeader = false;\n  public title = '';\n  public width = undefined;\n  public minContentHeight: string | number = 200;\n  public minContentWidth = undefined;\n  public contentHeight = undefined;\n  public pageable = false;\n  public loadOnScroll = false;\n  public loadViewDistanceRatio = 1;\n  public showIndexColumn = false;\n  public indexColumnTitle = '#';\n  public rowSelectable = false;\n  public selectMode: DataTableSelectMode = 'single';\n  public showRowSelectCheckbox = true;\n  public showRowSelectAllCheckbox = false;\n  public showSubstituteRows = false;\n  public expandableRows = false;\n  public selectOnRowClick = false;\n  public expandOnRowClick = false;\n  public autoFetch = true;\n  public showLoadingSpinner = true;\n  public selectTrackBy = 'id';\n  public filterDebounceTime = 500;\n  public filterDebounce = true;\n  public showRefreshButton = false;\n  public showColumnSelector = false;\n  public columnSelectorWidth = 240;\n  public expanderColumnWidth: string | number = 30;\n  public indexColumnWidth: string | number = 30;\n  public selectionColumnWidth: string | number = 30;\n  public showRowExpandLoadingSpinner = false;\n  public offset = 0;\n  public limit = 10;\n  public maxLimit = 100;\n  public stateKeyPrefix = 'grid_state_';\n  public baseTranslations: DataTableTranslations = {\n    noDataMessage: {\n      header: 'Whoops!',\n      body: 'No data to display. Added data will appear here.',\n    },\n    pagination: {\n      limit: 'Limit:',\n      rangeKey: 'Results:',\n      rangeSeparator: 'of',\n      nextTooltip: 'Next',\n      previousTooltip: 'Previous',\n      lastTooltip: 'Last',\n      firstTooltip: 'First'\n    },\n    columnSelector: {\n      header: 'Show/Hide Column'\n    },\n    dropdownFilter: {\n      noDataMessage: 'No Results Available',\n      filterPlaceholder: 'Search',\n      selectedOptionWrapPlaceholder: 'Options',\n      selectPlaceholder: 'Select'\n    }\n  };\n\n  // Table column config\n  public sortable = false;\n  public sortOrder: DataTableSortOrder = '';\n  public filterable = false;\n  public filterPlaceholder = 'Search';\n  public columnResizable = false;\n  public columnVisible = true;\n  public showDropdownFilter = false;\n  public showFilterClearButton = true;\n\n  // Column dropdown filter options\n  public dropdownFilterMenuPosition: ViewPosition = 'bottom-left';\n  public dropdownFilterSelectMode: DropdownSelectMode = 'multi';\n  public dropdownFilterSearchable = true;\n  public dropdownFilterSearchDebounceTime = 500;\n  public dropdownFilterSearchDebounce = true;\n  public dropdownFilterWrapDisplaySelectLimit = 1;\n  public dropdownFilterGroupByField = undefined;\n  public dropdownFilterShowSelectedOptionRemoveButton = false;\n  public dropdownFilterShowClearSelectionButton = true;\n  public dropdownFilterMenuWidth = 320;\n  public dropdownFilterMenuHeight = 250;\n  public dropdownFilterMultiSelectOptionMaxWidth = 135;\n  public dropdownFilterCloseMenuOnSelect = true;\n  public dropdownFilterDynamicDimensionCalculation = true;\n  public dropdownFilterDynamicWidthRatio = 1.25;\n  public dropdownFilterDynamicHeightRatio = 1.25;\n\n  constructor(@Inject(DATA_TABLE_CONFIG) private dataTableConfig: DataTableConfig) {\n    if (dataTableConfig) {\n      Object.assign(this, dataTableConfig);\n    }\n  }\n\n  public set translations(value: DataTableTranslations) {\n    if (!value) {\n      return;\n    }\n\n    // all keys are object type.\n    for (const [key, val] of Object.entries(value)) {\n      this.baseTranslations[key] = { ...this.baseTranslations[key], ...val };\n    }\n  }\n\n  /**\n   * Returns translations.\n   */\n  public get translations(): DataTableTranslations {\n    return this.baseTranslations;\n  }\n\n  /**\n   * Get row select checkbox column.\n   */\n  public get showRowSelectCheckboxColumn(): boolean {\n    return this.rowSelectable && this.showRowSelectCheckbox;\n  }\n}\n\n","import { EventEmitter, Injectable } from '@angular/core';\n\nimport { ReplaySubject } from 'rxjs';\n\nimport { DataTableHeaderClickEventArgs } from '../models/data-table-header-click-event-args.model';\nimport { DataTableRow } from '../models/data-table-row.model';\nimport { DataTableRowClickEventArgs } from '../models/data-table-row-click-event-args.model';\nimport { DataTableDoubleClickEventArgs } from '../models/data-table-double-click-event-args.model';\nimport { DataTableCellBindEventArgs } from '../models/data-table-cell-bind-event-args.model';\nimport { DataTableCellClickEventArgs } from '../models/data-table-cell-click-event-args.model';\n\nimport { DataFetchMode } from '../models/data-fetch-mode.enum';\n\nimport { DataTableComponent } from '../components/data-table/data-table.component';\nimport { DataTableColumnComponent } from '../components/data-table-column/data-table-column.component';\n\n/**\n * Data table event state service; Manage all internal data tale event streams.\n */\n@Injectable()\nexport class DataTableEventStateService {\n  public allRowSelectChangeStream = new EventEmitter<boolean>();\n  public dataFetchStream = new EventEmitter<DataFetchMode>();\n  public headerClickStream = new EventEmitter<DataTableHeaderClickEventArgs>();\n  public rowBindStream = new EventEmitter<DataTableRow<any>>();\n  public rowClickStream = new EventEmitter<DataTableRowClickEventArgs<any>>();\n  public rowDoubleClickStream = new EventEmitter<DataTableDoubleClickEventArgs<any>>();\n  public rowSelectChangeStream = new EventEmitter<any | any[]>();\n  public cellBindStream = new EventEmitter<DataTableCellBindEventArgs<any>>();\n  public cellClickStream = new EventEmitter<DataTableCellClickEventArgs<any>>();\n  public initStream = new EventEmitter<DataTableComponent>();\n  public dataBoundStream = new EventEmitter<void>();\n  public columnBind = new EventEmitter<DataTableColumnComponent>();\n  public fetchFilterOptionsStream = new ReplaySubject(1);\n  public staticDataSourceStream = new ReplaySubject<any[]>(1);\n}\n","import { Injectable } from '@angular/core';\n\nimport { DataTableRow } from '../models/data-table-row.model';\nimport { DataTableDynamicRowSpanExtractorCallback } from '../models/data-table-group-field-extractor-callback.model';\nimport { DataTableFilterValueExtractCallback } from '../models/data-table-filter-value-extract-callback.model';\nimport { DataTableDataBindCallback } from '../models/data-table-data-bind-callback.model';\n\n/**\n * Data table state manager service; Manage current data table state snapshot.\n */\n@Injectable()\nexport class DataTableDataStateService {\n  public id: string;\n  public allRowSelected = false;\n  public selectedRow: any;\n  public selectedRows: any[] = [];\n  public dataRows: DataTableRow<any>[] = [];\n  public itemCount: number;\n  public tableWidth: number;\n  public dataLoading = true;\n  public substituteRows: any[] = [];\n  public heardReload = false;\n  public currentSortPriority = 0;\n\n  public relativeParentElement: HTMLElement;\n  public onFilterValueExtract: DataTableFilterValueExtractCallback;\n  public onDataBind: DataTableDataBindCallback<any>;\n  public onDynamicRowSpanExtract: DataTableDynamicRowSpanExtractorCallback<any> = () => 1;\n\n  /**\n   * Get show no data overlay status.\n   * @return True if no data overlay should be shown.\n   */\n  public get showNoDataOverlay(): boolean {\n    return !this.dataRows.length && !this.dataLoading;\n  }\n\n  /**\n   * Get data table row unique id.\n   * @param append Target identifier.\n   * @param index Target index.\n   */\n  public getUniqueId(append: string, index: number): string {\n    return `${this.id}-dt-${append}-${index}`;\n  }\n}\n","import { Component, ContentChild, Input, OnDestroy, OnInit, TemplateRef } from '@angular/core';\n\nimport { Subscription } from 'rxjs';\n\nimport { DataTableCellColorRenderCallback } from '../../models/data-table-cell-color-render-callback.model';\nimport { DataTableRow } from '../../models/data-table-row.model';\nimport { DataTableFilterFieldMapperCallback } from '../../models/data-table-filter-field-mapper-callback.model';\nimport { DataTableFilterExpressionCallback } from '../../models/data-table-filter-expression-callback.model';\n\nimport { DropdownSelectMode } from '../../../dropdown/dropdown.module';\nimport { DataTableSortOrder } from '../../models/data-table-sort-order.model';\n\nimport { DataTableConfigService } from '../../services/data-table-config.service';\nimport { DataTableEventStateService } from '../../services/data-table-event.service';\nimport { ViewPosition } from '../../../utility/models/view-position.model';\nimport { DataTableDataStateService } from '../../services/data-table-data-state.service';\n\n/**\n * Data table column component. Data table columns associated data is captured via this component.\n */\n@Component({\n  selector: 'ng-data-table-column',\n  template: ''\n})\nexport class DataTableColumnComponent implements OnInit, OnDestroy {\n  private filterValueExtractorSubscription: Subscription;\n\n  private currentSortOrder: DataTableSortOrder = '';\n  private baseSortOrder: DataTableSortOrder = '';\n\n  public actualWidth: number;\n\n  // Content Child Properties\n\n  @ContentChild('ngDataTableCell', { static: true })\n  public cellTemplate: TemplateRef<any>;\n\n  @ContentChild('ngDataTableHeader', { static: true })\n  public headerTemplate: TemplateRef<any>;\n\n  @ContentChild('ngDataTableFilter', { static: true })\n  public filterTemplate: TemplateRef<any>;\n\n  @ContentChild('ngFilterDropdownLoadingSpinner', { static: true })\n  public dropdownFilterLoadingSpinnerTemplate: TemplateRef<any>;\n\n  @ContentChild('ngFilterDropdownOption', { static: true })\n  public dropdownFilterOptionTemplate: TemplateRef<any>;\n\n  @ContentChild('ngFilterDropdownOptionGroupHeader', { static: true })\n  public dropdownFilterOptionGroupHeaderTemplate: TemplateRef<any>;\n\n  // Callback event handlers\n\n  /**\n   * Filter expression event handler callback. Used to apply custom data filter expression logic.\n   */\n  @Input()\n  public filterExpression: DataTableFilterExpressionCallback;\n\n  /**\n   * Custom filter field map event handler callback. Used to extract filter field when showDropdownFilter option is true.\n   */\n  @Input()\n  public filterFieldMapper: DataTableFilterFieldMapperCallback;\n\n  /**\n   * Cell color render event handler callback.\n   */\n  @Input()\n  public onCellColorRender: DataTableCellColorRenderCallback<any>;\n\n  // Inputs\n\n  /**\n   * Column display title.\n   */\n  @Input()\n  public title: string;\n\n  /**\n   * Columns sortable if true. Show sort indicator on column title.\n   */\n  @Input()\n  public sortable: boolean;\n\n  /**\n   * Multi column sort priority. Lowest number will get the height precedence. Usage of same precedence number in\n   * multiple columns may lead to unexpected behaviors. This priority number will be displayed in the column header\n   * when multi column sorting is enabled hence, consider indexing accordingly.\n   */\n  @Input()\n  public sortPriority: number;\n\n  /**\n   * Set initial column sort order.\n   */\n  @Input()\n  public set sortOrder(value: DataTableSortOrder) {\n    this.currentSortOrder = value;\n    this.baseSortOrder = value;\n  }\n\n  /**\n   * Get initial column sort order.\n   */\n  public get sortOrder(): DataTableSortOrder {\n    return this.currentSortOrder;\n  }\n\n  /**\n   * Column filterable if true. Show filter options on filter header row when enabled.\n   */\n  @Input()\n  public filterable: boolean;\n\n  /**\n   * Column resizeable if true. Show column resize indicator on column right corner.\n   */\n  @Input()\n  public resizable: boolean;\n\n  /**\n   * Data item mapping field name.\n   */\n  @Input()\n  public field: string;\n\n  /**\n   * Filter field identifier. Fallback to field if not provided.\n   */\n  @Input()\n  public filterField: string;\n\n  /**\n   * Sort field identifier. Fallback to field if not provided.\n   */\n  @Input()\n  public sortField: string;\n\n  /**\n   * Column title CSS class names. Use space delimiter to separate class names.\n   */\n  @Input()\n  public cssClass: string;\n\n  /**\n   * Static column width in pixels or percentage.\n   */\n  @Input()\n  public width: number | string;\n\n  /**\n   * Render column if true. Else include in column selector but not rendered.\n   */\n  @Input()\n  public visible: boolean;\n\n  /**\n   * Show filed in column selector popup if true.\n   */\n  @Input()\n  public showInColumnSelector = true; // TODO: move to base conf\n\n  /**\n   * Filter placeholder value. Placeholder text to show on filter text box. Applicable only for none dropdown filter mode.\n   */\n  @Input()\n  public filterPlaceholder: string;\n\n  /**\n   * Applied filter value on initialize.\n   */\n  @Input()\n  public filter: any;\n\n  /**\n   * Show filter clear button if true. Applicable only for none dropdown filter mode.\n   */\n  @Input()\n  public showFilterClearButton: any;\n\n  /**\n   * Resize minimum limit. Column cannot be resized to fit less than the number of pixels specified here.\n   */\n  @Input()\n  public resizeMinLimit: number;\n\n  // Dropdown filter properties\n\n  /**\n   * Show dropdown filter if true. Filter data using dropdown filter.\n   */\n  @Input()\n  public showDropdownFilter: boolean;\n\n  /**\n   * Dropdown filter menu position. Placement of filter popup menu.\n   */\n  @Input()\n  public dropdownFilterMenuPosition: ViewPosition;\n\n  /**\n   * Dropdown select mode. Filter option select mode.\n   */\n  @Input()\n  public dropdownFilterSelectMode: DropdownSelectMode;\n\n  /**\n   * Dropdown filter searchable if true. Display search box within filter option menu.\n   */\n  @Input()\n  public dropdownFilterSearchable: boolean;\n\n  /**\n   * Dropdown filter search debounce time in milliseconds. Applicable only when dropdownFilterSearchDebounce is true.\n   */\n  @Input()\n  public dropdownFilterSearchDebounceTime: number;\n\n  /**\n   * Enable dropdown filter data search debounce with provided dropdownFilterSearchDebounceTime if true.\n   */\n  @Input()\n  public dropdownFilterSearchDebounce: boolean;\n\n  /**\n   * Dropdown filter show option select checkbox.\n   */\n  @Input()\n  public dropDownFilterShowOptionSelectCheckbox: boolean;\n\n  /**\n   * Dropdown filter selected items display limit.\n   */\n  @Input()\n  public dropdownFilterWrapDisplaySelectLimit: number;\n\n  /**\n   * Dropdown filter group by field name in item schema.\n   */\n  @Input()\n  public dropdownFilterGroupByField: string;\n\n  /**\n   * Dropdown filter show selected option remove button if true.\n   */\n  @Input()\n  public dropdownFilterShowSelectedOptionRemoveButton: boolean;\n\n  /**\n   * Dropdown filter show all select options clear button if true.\n   */\n  @Input()\n  public dropdownFilterShowClearSelectionButton: boolean;\n\n  /**\n   * Dropdown filter menu width in pixels.\n   */\n  @Input()\n  public dropdownFilterMenuWidth: number;\n\n  /**\n   * Dropdown filter menu height in pixels.\n   */\n  @Input()\n  public dropdownFilterMenuHeight: number;\n\n  /**\n   * Dropdown filter multi select option max width.\n   */\n  @Input()\n  public dropdownFilterMultiSelectOptionMaxWidth: number;\n\n  /**\n   * Dropdown filter close menu on select if true.\n   */\n  @Input()\n  public dropdownFilterCloseMenuOnSelect: boolean;\n\n  /**\n   * Dynamically calculate Dropdown filter menu dimensions relative to column width; dropdownFilterMenuWidth and\n   * dropdownFilterMenuHeight configuration are ignored when true.\n   */\n  @Input()\n  public dropdownFilterDynamicDimensionCalculation: boolean;\n\n  /**\n   * Dynamic dropdown view width ratio. Used for dynamic dimension calculation.\n   */\n  @Input()\n  public dropdownFilterDynamicWidthRatio: number;\n\n  /**\n   * Dynamic dropdown view height ratio. Used for dynamic dimension calculation.\n   */\n  @Input()\n  public dropdownFilterDynamicHeightRatio: number;\n\n  constructor(\n    private dataTableConfigService: DataTableConfigService,\n    private eventStateService: DataTableEventStateService,\n    private dataStateService: DataTableDataStateService) {\n    // Table column config\n    this.sortable = dataTableConfigService.sortable;\n    this.currentSortOrder = dataTableConfigService.sortOrder;\n    this.filterable = dataTableConfigService.filterable;\n    this.filterPlaceholder = dataTableConfigService.filterPlaceholder;\n    this.resizable = dataTableConfigService.columnResizable;\n    this.visible = dataTableConfigService.columnVisible;\n    this.showDropdownFilter = dataTableConfigService.showDropdownFilter;\n    this.showFilterClearButton = dataTableConfigService.showFilterClearButton;\n\n    // Dropdown filter config\n    this.dropdownFilterMenuPosition = dataTableConfigService.dropdownFilterMenuPosition;\n    this.dropdownFilterSelectMode = dataTableConfigService.dropdownFilterSelectMode;\n    this.dropdownFilterSearchable = dataTableConfigService.dropdownFilterSearchable;\n    this.dropdownFilterSearchDebounceTime = dataTableConfigService.dropdownFilterSearchDebounceTime;\n    this.dropdownFilterSearchDebounce = dataTableConfigService.dropdownFilterSearchDebounce;\n    this.dropdownFilterWrapDisplaySelectLimit = dataTableConfigService.dropdownFilterWrapDisplaySelectLimit;\n    this.dropdownFilterGroupByField = dataTableConfigService.dropdownFilterGroupByField;\n    this.dropdownFilterShowSelectedOptionRemoveButton = dataTableConfigService.dropdownFilterShowSelectedOptionRemoveButton;\n    this.dropdownFilterShowClearSelectionButton = dataTableConfigService.dropdownFilterShowClearSelectionButton;\n    this.dropdownFilterMenuWidth = dataTableConfigService.dropdownFilterMenuWidth;\n    this.dropdownFilterMenuHeight = dataTableConfigService.dropdownFilterMenuHeight;\n    this.dropdownFilterMultiSelectOptionMaxWidth = dataTableConfigService.dropdownFilterMultiSelectOptionMaxWidth;\n    this.dropdownFilterCloseMenuOnSelect = dataTableConfigService.dropdownFilterCloseMenuOnSelect;\n    this.dropdownFilterDynamicDimensionCalculation = dataTableConfigService.dropdownFilterDynamicDimensionCalculation;\n    this.dropdownFilterDynamicWidthRatio = dataTableConfigService.dropdownFilterDynamicWidthRatio;\n    this.dropdownFilterDynamicHeightRatio = dataTableConfigService.dropdownFilterDynamicHeightRatio;\n  }\n\n  /**\n   * Reset data sort order.\n   */\n  public resetSortOrder(): void {\n    this.currentSortOrder = this.baseSortOrder;\n  }\n\n  /**\n   * Get dynamic cell color.\n   * @param row Data row object.\n   * @return Cell color string.\n   */\n  public getCellColor(row: DataTableRow<any>) {\n    if (this.onCellColorRender !== undefined) {\n      return this.onCellColorRender(row, this);\n    }\n  }\n\n  /**\n   * Get new sort order upon sort click.\n   * @return New sort order enum value.\n   */\n  public getNewSortOrder(): DataTableSortOrder {\n    let newSortOrder: DataTableSortOrder;\n    switch (this.sortOrder) {\n      case 'asc':\n        newSortOrder = 'desc';\n        break;\n      case 'desc':\n        newSortOrder = '';\n        break;\n      case '':\n        newSortOrder = 'asc';\n        break;\n    }\n\n    return newSortOrder;\n  }\n\n  /**\n   * Get current sort state icon css class enabled state.\n   * @return Sort order icon css class collection object.\n   */\n  public getSortIconClass(): any {\n    return {\n      'sort-asc': this.sortOrder === 'asc',\n      'sort-dsc': this.sortOrder === 'desc',\n      'sort-reset': !this.sortOrder\n    };\n  }\n\n  /**\n   * Component destroy lifecycle event handler.\n   */\n  public ngOnDestroy(): void {\n    if (this.filterValueExtractorSubscription) {\n      this.filterValueExtractorSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Component initialize lifecycle event handler.\n   */\n  public ngOnInit(): void {\n    if (!this.cssClass && this.field) {\n      if (/^[a-zA-Z0-9_]+$/.test(this.field)) {\n        this.cssClass = 'column-' + this.field;\n      } else {\n        this.cssClass = 'column-' + this.field.replace(/[^a-zA-Z0-9_]/g, '');\n      }\n    }\n\n    this.eventStateService.columnBind.emit(this);\n\n    if (this.dataTableConfigService.multiColumnSortable && this.sortable) {\n      if (this.sortOrder === '') {\n        if (this.sortPriority !== undefined) {\n          throw Error('[sortPriority] should be ignored when multi column sorting is enabled with natural sort order.');\n        }\n      } else {\n        if (this.sortPriority === undefined) {\n          throw Error('[sortPriority] is required when multi column sorting is enabled with an explicit sort order.');\n        }\n      }\n\n      if (this.sortPriority < 1) {\n        throw Error('[sortPriority] must be greater than 1.');\n      }\n\n      if (this.dataStateService.currentSortPriority < this.sortPriority) {\n        this.dataStateService.currentSortPriority = this.sortPriority;\n      }\n    }\n  }\n}\n","/**\n * Data table export mode model.\n */\nexport enum DataFetchMode {\n  /**\n   * Re-fetch data from source and load data after resetting table state.\n   */\n  HARD_RELOAD,\n\n  /**\n   * Re-fetch data from source and load data without resetting table state.\n   */\n  SOFT_RELOAD,\n\n  /**\n   * Load data without changing table state state.\n   */\n  SOFT_LOAD\n}\n","import { Component, EventEmitter, Input, OnDestroy, OnInit } from '@angular/core';\n\nimport { Subscription, Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport { DataTableFilterEventArgs } from '../../models/data-table-filter-event-args.model';\n\nimport { DataFetchMode } from '../../models/data-fetch-mode.enum';\n\nimport { DataTableColumnComponent } from '../data-table-column/data-table-column.component';\n\nimport { DataTableConfigService } from '../../services/data-table-config.service';\nimport { DataTableEventStateService } from '../../services/data-table-event.service';\n\n/**\n * Data table column filter header component. Apply columns associated data filtering.\n */\n@Component({\n  exportAs: 'ngDataTableColumnFilterHeader',\n  // tslint:disable-next-line\n  selector: '[ngDataTableColumnFilterHeader]',\n  templateUrl: './data-table-column-filter-header.component.html'\n})\nexport class DataTableColumnFilterHeaderComponent implements OnInit, OnDestroy {\n  private columnFilterStream = new Subject();\n\n  private customFilterSubscription: Subscription;\n  private columnFilterSubscription: Subscription;\n\n  public customFilterStream = new EventEmitter<DataTableFilterEventArgs>();\n\n  @Input()\n  public columns: DataTableColumnComponent[];\n\n  constructor(public config: DataTableConfigService, private eventStateService: DataTableEventStateService) {}\n\n  /**\n   * Component initialize lifecycle event handler.\n   */\n  public ngOnInit(): void {\n    this.initCustomFilterEvent();\n    this.initDebounceDefaultFilterEvent();\n  }\n\n  /**\n   * Component destroy lifecycle event handler.\n   */\n  public ngOnDestroy(): void {\n    if (this.customFilterSubscription) {\n      this.customFilterSubscription.unsubscribe();\n    }\n\n    if (this.columnFilterSubscription) {\n      this.columnFilterSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Initialize custom filter event.\n   */\n  private initCustomFilterEvent(): void {\n    this.customFilterSubscription = this.customFilterStream.subscribe((filterEventArgs: DataTableFilterEventArgs) => {\n      filterEventArgs.column.filter = filterEventArgs.filter;\n      this.onFilter();\n    });\n  }\n\n  /**\n   * Initialize debounce default filtering logic.\n   */\n  private initDebounceDefaultFilterEvent(): void {\n    this.columnFilterSubscription = this.columnFilterStream.pipe(debounceTime(this.config.filterDebounceTime)).subscribe(() => {\n      this.eventStateService.dataFetchStream.next(DataFetchMode.SOFT_LOAD);\n    });\n  }\n\n  /**\n   * Filter event handler.\n   */\n  public onFilter(): void {\n    if (this.config.filterDebounce) {\n      this.columnFilterStream.next();\n    } else {\n      this.eventStateService.dataFetchStream.next(DataFetchMode.SOFT_LOAD);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Subject } from 'rxjs';\n\nimport { DataTableScrollPoint } from '../models/data-table-scroll-point.model';\n\n/**\n * Scroll position stream service; Manage common scroll position observable.\n */\n@Injectable()\nexport class DataTableScrollPositionService {\n  public scrollPositionStream = new Subject<DataTableScrollPoint>();\n}\n","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\n\nimport { Observable, Subject, Subscription } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport { DataTableFilterEventArgs } from '../../models/data-table-filter-event-args.model';\nimport { DataTableFilterOption } from '../../models/data-table-filter-option.model';\n\nimport { DataTableColumnComponent } from '../data-table-column/data-table-column.component';\nimport { DropdownComponent } from '../../../dropdown/components/dropdown/dropdown.component';\n\nimport { DataTableConfigService } from '../../services/data-table-config.service';\nimport { DataTableEventStateService } from '../../services/data-table-event.service';\nimport { DataTableDataStateService } from '../../services/data-table-data-state.service';\nimport { DataTableScrollPositionService } from '../../services/data-table-scroll-position.service';\nimport { DataTableScrollPoint } from '../../../data-table/models/data-table-scroll-point.model';\n\n/**\n * Column filter template component. Render column filter template via this component.\n */\n@Component({\n  selector: 'ng-data-table-column-filter-template',\n  templateUrl: './data-table-column-filter-template.component.html'\n})\nexport class DataTableColumnFilterTemplateComponent implements OnInit, OnDestroy {\n  @Input()\n  public column: DataTableColumnComponent;\n\n  @Input()\n  public customFilterStream: Observable<DataTableFilterEventArgs>;\n\n  @Input()\n  public index: number;\n\n  @Output()\n  public filter = new EventEmitter();\n\n  public filterDataStream = new Subject<DataTableFilterOption[]>();\n\n  private fetchFilterOptionsStreamSubscription: Subscription;\n  private scrollPositionStreamSubscription: Subscription;\n\n  private filterDropdown: DropdownComponent;\n\n  constructor(\n    public config: DataTableConfigService,\n    public dataStateService: DataTableDataStateService,\n    private eventStateService: DataTableEventStateService,\n    private scrollPositionService: DataTableScrollPositionService\n  ) {}\n\n  /**\n   * Component initialize lifecycle event.\n   */\n  public ngOnInit(): void {\n    if (this.column.showDropdownFilter) {\n      this.scrollPositionStreamSubscription = this.scrollPositionService.scrollPositionStream\n        .subscribe((pos: DataTableScrollPoint) => {\n          if (pos.isHorizontal) {\n            this.filterDropdown.close();\n          }\n        });\n\n      if (this.dataStateService.onFilterValueExtract) {\n        this.fetchFilterOptionsStreamSubscription = this.eventStateService.fetchFilterOptionsStream\n          .pipe(\n            switchMap(() => {\n              return this.dataStateService.onFilterValueExtract(this.column);\n            })\n          )\n          .subscribe((options: DataTableFilterOption[]) => {\n            setTimeout(() => this.filterDataStream.next(options), 0); // TODO: remove the timeout\n          });\n      }\n    }\n  }\n\n  /**\n   * Component destroy lifecycle event.\n   */\n  public ngOnDestroy(): void {\n    if (this.fetchFilterOptionsStreamSubscription) {\n      this.fetchFilterOptionsStreamSubscription.unsubscribe();\n    }\n\n    if (this.scrollPositionStreamSubscription) {\n      this.scrollPositionStreamSubscription.unsubscribe();\n    }\n\n    this.filterDataStream.complete();\n  }\n\n  public onFilterDropdownInit(filterDropdown: DropdownComponent): void {\n    this.filterDropdown = filterDropdown;\n  }\n\n  /**\n   * Clear current column filter value.\n   */\n  public clearFilter(): void {\n    this.column.filter = '';\n    this.filter.emit();\n  }\n}\n","const splitPathExpression = /[,[\\].]+?/;\n\nexport function get(obj: any, path: string): any {\n  if (obj === null || obj === undefined) {\n    return obj;\n  }\n\n  return String.prototype.split.call(path, splitPathExpression)\n    .filter(Boolean)\n    .reduce((res, key) => {\n      if (res !== null && typeof res === 'object') {\n        return res[key];\n      }\n\n      return undefined;\n    }, obj);\n}\n\nexport function orderBy(collection: any[], fields: string[], orders: Array<'asc'|'desc'>): any {\n  console.log(fields);\n  return collection.concat().sort((a: any, b: any) => {\n    for (let i = 0; i < fields.length; i++) {\n      const field = fields[i];\n      const order = orders[i];\n      if (a[field] > b[field]) {\n        return order === 'asc' ? 1 : -1;\n      }\n\n      if (a[field] < b[field]) {\n        return order === 'asc' ? -1 : 1;\n      }\n    }\n\n    return 0;\n  });\n}\n","import { Directive, EventEmitter, OnInit, Output } from '@angular/core';\n\n/**\n * Element initialize directive; Notify on target element initialize.\n */\n@Directive({\n  selector: '[ngInit]'\n})\nexport class InitDirective implements OnInit {\n  @Output()\n  public ngInit = new EventEmitter();\n\n  /**\n   * On directive initialize.\n   */\n  public ngOnInit(): void {\n    this.ngInit.emit();\n  }\n}\n","import { Directive, ElementRef, OnInit } from '@angular/core';\n\n/**\n * Element focus directive; Set focus to target element on initialize.\n */\n@Directive({\n  selector: '[ngFocus]'\n})\nexport class FocusDirective implements OnInit {\n  constructor(private el: ElementRef) {}\n\n  /**\n   * On directive initialize.\n   */\n  public ngOnInit(): void {\n    this.el.nativeElement.focus();\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Pixel converter pipe.\n * Append 'px' if value is number type, else return the same.\n */\n@Pipe({\n  name: 'ngPx'\n})\nexport class PixelConverterPipe implements PipeTransform {\n  /**\n   * Pipe transform implementation.\n   * @param value Source value.\n   * @returns Converted pixel value.\n   */\n  public transform(value: string | number): string {\n    if (value === undefined) {\n      return;\n    }\n    if (typeof value === 'string') {\n      return value;\n    }\n    if (typeof value === 'number') {\n      return `${value}px`;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * Utility config service holds all the global configurations of utility which can be overridden while\n * importing the module.\n */\n@Injectable()\nexport class UtilityConfigService {}\n","import { Injectable } from '@angular/core';\n\nexport type MoveHandler = (event: MouseEvent, dx: number, dy: number, x: number, y: number) => void;\nexport type UpHandler = (event: MouseEvent, x: number, y: number, moved: boolean) => void;\n\n/**\n * Element drag and drop service.\n */\n@Injectable()\nexport class DragAndDropService {\n  /**\n   * Register drag and drop event.\n   * @param event Mouse event reference.\n   * @param move Mouse move event handler.\n   * @param up Mouse up Event handler.\n   */\n  public drag(event: MouseEvent, { move, up }: { move: MoveHandler; up?: UpHandler }): void {\n    const startX = event.pageX;\n    const startY = event.pageY;\n    let x = startX;\n    let y = startY;\n    let moved = false;\n\n    const mouseMoveHandler = (mouseMoveEvent: MouseEvent): void => {\n      const dx = mouseMoveEvent.pageX - x;\n      const dy = mouseMoveEvent.pageY - y;\n      x = mouseMoveEvent.pageX;\n      y = mouseMoveEvent.pageY;\n      if (dx || dy) {\n        moved = true;\n      }\n\n      move(mouseMoveEvent, dx, dy, x, y);\n\n      mouseMoveEvent.preventDefault(); // to avoid text selection\n    };\n\n    const mouseUpHandler = (mouseUpEvent: MouseEvent): void => {\n      x = mouseUpEvent.pageX;\n      y = mouseUpEvent.pageY;\n\n      document.removeEventListener('mousemove', mouseMoveHandler);\n      document.removeEventListener('mouseup', mouseUpHandler);\n\n      if (up) {\n        up(mouseUpEvent, x, y, moved);\n      }\n    };\n\n    document.addEventListener('mousemove', mouseMoveHandler);\n    document.addEventListener('mouseup', mouseUpHandler);\n  }\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * Global reference service; List all global javascript references here.\n */\n@Injectable()\nexport class GlobalRefService {\n  private scrollbarWidthValue: number;\n\n  constructor() {\n    this.setScrollbarWidth();\n  }\n\n  /**\n   * Set scrollbar width of current browser environment; Ony set on browser environment to support SSR.\n   */\n  public setScrollbarWidth(): void {\n    if (this.scrollbarWidthValue !== undefined) {\n      return;\n    }\n\n    if (this.isBrowser) {\n      const outer = document.createElement('div');\n      outer.style.visibility = 'hidden';\n      outer.style.width = '100px';\n      outer.style.msOverflowStyle = 'scrollbar'; // needed for WinJS apps\n\n      document.body.appendChild(outer);\n\n      const widthNoScroll = outer.offsetWidth;\n      // force scrollbars\n      outer.style.overflow = 'scroll';\n\n      // add inner div\n      const inner = document.createElement('div');\n      inner.style.width = '100%';\n      outer.appendChild(inner);\n\n      const widthWithScroll = inner.offsetWidth;\n\n      // remove divs\n      outer.parentNode.removeChild(outer);\n\n      this.scrollbarWidthValue = widthNoScroll - widthWithScroll;\n    }\n  }\n\n  /**\n   * Get scrollbar width.\n   * @returns Scroll bar width.\n   */\n  public get scrollbarWidth(): number {\n    return this.scrollbarWidthValue;\n  }\n  /**\n   * Get window reference.\n   * @return Window reference.\n   */\n  public get window(): Window {\n    return window;\n  }\n\n  /**\n   * Is browser environment.\n   * @return True if current environment is browser.\n   */\n  public get isBrowser(): boolean {\n    return typeof window !== 'undefined';\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { fromEvent, Subject, Observable } from 'rxjs';\n\nimport { GlobalRefService } from './global-ref.service';\n\n/**\n * Resize handler service; Window resize global event handler.\n */\n@Injectable()\nexport class ResizeService {\n  public resize: Observable<Event>;\n\n  constructor(private globalRefService: GlobalRefService) {\n    if (this.globalRefService.isBrowser) {\n      this.resize = fromEvent(this.globalRefService.window, 'resize');\n    } else {\n      this.resize = new Subject();\n    }\n  }\n}\n","import { Injector, ComponentFactoryResolver, EmbeddedViewRef, ApplicationRef, ComponentRef, Type, Renderer2 } from '@angular/core';\n\nimport { take } from 'rxjs/operators';\n\nimport { Subscription } from 'rxjs';\n\nimport { ComponentLoader } from './component-loader.interface';\n\nimport { GlobalRefService } from './global-ref.service';\nimport { ResizeService } from './resize.service';\n\nimport { ComponentLoaderOptions } from '../models/component-loader-options.model';\n\n/**\n * Popover dynamic component loader; Responsible of dynamically rendering angular components to show popover layout.\n */\nexport class PopoverComponentLoader<T> implements ComponentLoader<T> {\n  private componentReference: ComponentRef<T>;\n  private isVisible: boolean;\n  private clickListener: () => void;\n  private touchStartListener: () => void;\n  private resizeEventSubscription: Subscription;\n\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private appRef: ApplicationRef,\n    private globalRefService: GlobalRefService,\n    private renderer: Renderer2,\n    private resizeService: ResizeService\n  ) {\n    this.isVisible = false;\n  }\n\n  /**\n   * Register close on click outside event; Hide event is triggered only if click target is not included in\n   * exclusion elements collection.\n   * @param exclude - Exclude DOM element reference collection.\n   */\n  private registerClickOutside(...exclude: HTMLElement[]): void {\n    const trackOutsideClick = (event: Event) => {\n      if (!exclude.some(el => {\n        return el.contains(event.target as HTMLElement);\n      })) {\n        this.hide();\n      }\n    };\n\n    this.clickListener = this.renderer.listen('document', 'click', trackOutsideClick);\n    this.touchStartListener = this.renderer.listen('document', 'touchstart', trackOutsideClick);\n  }\n\n  /**\n   * Set dynamic popover position relative to parent.\n   * @param parentElement Parent element reference.\n   * @param options Component loader options.\n   */\n  private setPosition(parentElement: HTMLElement, options: ComponentLoaderOptions): void {\n    const holderElement =  options.relativeParentElement || parentElement;\n    const bodyClientRect = holderElement.getBoundingClientRect();\n    const elementClientRect = parentElement.getBoundingClientRect();\n\n    let left = 0;\n    let top = 0;\n\n    if (options.position.includes('right')) {\n      left = parentElement.offsetWidth;\n    }\n\n    if (options.position.includes('bottom')) {\n      top = parentElement.offsetHeight;\n    }\n\n    const componentElement = this.componentReference.location.nativeElement as HTMLElement;\n    componentElement.style.top = `${elementClientRect.top - bodyClientRect.top + top + options.floatTop}px`;\n    componentElement.style.left = `${elementClientRect.left - bodyClientRect.left + left + options.floatLeft}px`;\n    componentElement.style.position = 'absolute';\n    componentElement.style.display = 'block';\n\n    const childElement = componentElement.firstElementChild as HTMLElement;\n    if (childElement) {\n      if (options.position.includes('right')) {\n        childElement.style.right = '0px';\n      }\n\n      if (options.position.includes('top')) {\n        childElement.style.bottom = '0px';\n      }\n\n      childElement.style.position = 'absolute';\n    }\n\n    this.resizeEventSubscription = this.resizeService.resize.pipe(take(1)).subscribe(() => {\n      this.hide();\n    });\n  }\n\n  /**\n   * Render component if not available, else display hidden component.\n   * @param component Component class type.\n   * @param parentElement Parent element to append the target component.\n   * @param injector Component injector reference.\n   * @param options Component loader options object.\n   * @return Rendered component reference.\n   */\n  public show(component: Type<T>, parentElement: HTMLElement, injector: Injector, options: ComponentLoaderOptions): T {\n    options = Object.assign(\n      {\n        closeOnOutsideClick: true,\n        floatLeft: 0,\n        floatTop: 0,\n        position: 'bottom-left'\n      },\n      options\n    );\n\n    if (this.componentReference) {\n      this.setPosition(parentElement, options);\n      this.isVisible = true;\n      return;\n    }\n\n    // 1. Create a component reference from the component\n    this.componentReference = this.componentFactoryResolver.resolveComponentFactory(component).create(injector);\n\n    if (options.context) {\n      Object.assign(this.componentReference.instance, options.context);\n    }\n\n    // 2. Attach component to the appRef so that it's inside the ng component tree\n    this.appRef.attachView(this.componentReference.hostView);\n\n    // 3. Get DOM element from component\n    const domElem = (this.componentReference.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n\n    this.setPosition(parentElement, options);\n\n    // 4. Append DOM element to the body\n    (options.relativeParentElement || parentElement).appendChild(domElem);\n\n    // Trigger change detection\n    this.componentReference.changeDetectorRef.markForCheck();\n    this.componentReference.changeDetectorRef.detectChanges();\n\n    this.isVisible = true;\n\n    if (options.closeOnOutsideClick) {\n      this.registerClickOutside(parentElement, this.componentReference.location.nativeElement);\n    }\n\n    return this.componentReference.instance;\n  }\n\n  /**\n   * Hide component if visible.\n   * @return Rendered component reference.\n   */\n  public hide(): T {\n    if (this.componentReference) {\n      this.componentReference.location.nativeElement.style.display = 'none';\n      this.isVisible = false;\n      return this.componentReference.instance;\n    }\n  }\n\n  /**\n   * Toggle component display state or render if not available.\n   * @param component Component class type.\n   * @param parentElement Parent element to append the target component.\n   * @param injector Component injector reference.\n   * @param options Component loader options object.\n   * @return Rendered component reference.\n   */\n  public toggle(component: Type<T>, parentElement: HTMLElement, injector: Injector, options?: ComponentLoaderOptions): T {\n    return this.isVisible ? this.hide() : this.show(component, parentElement, injector, options);\n  }\n\n  /**\n   * Dispose rendered component reference and bindings.\n   */\n  public dispose(): void {\n    if (this.resizeEventSubscription) {\n      this.resizeEventSubscription.unsubscribe();\n    }\n\n    if (this.componentReference) {\n      this.appRef.detachView(this.componentReference.hostView);\n      this.componentReference.destroy();\n    }\n\n    if (this.clickListener) {\n      this.clickListener();\n      this.clickListener = null;\n    }\n\n    if (this.touchStartListener) {\n      this.touchStartListener();\n      this.touchStartListener = null;\n    }\n\n    this.componentReference = null;\n  }\n}\n","import { ApplicationRef, ComponentFactoryResolver, Injectable, Renderer2 } from '@angular/core';\n\nimport { ComponentLoader } from './component-loader.interface';\n\nimport { GlobalRefService } from './global-ref.service';\nimport { ResizeService } from './resize.service';\n\nimport { PopoverComponentLoader } from './popover-component-loader.class';\n\n/**\n * Popover component loader factory service.\n */\n@Injectable()\nexport class PopoverComponentLoaderFactoryService {\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private appRef: ApplicationRef,\n    private globalRefService: GlobalRefService,\n    private resizeService: ResizeService\n  ) {}\n\n  /**\n   * Create new component loader.\n   * @param renderer Angular renderer reference.\n   * @return Popover component loader reference.\n   */\n  public createLoader<T>(renderer: Renderer2): ComponentLoader<T> {\n    return new PopoverComponentLoader<T>(this.componentFactoryResolver, this.appRef, this.globalRefService, renderer, this.resizeService);\n  }\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * Common validation regular expressions.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidatorService {\n\n  /**\n   * Unique id value validation patten expression.\n   */\n  public static readonly idPatternValidatorExpression = new RegExp('^[A-Za-z]+[\\\\w\\\\-]*$');\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { InitDirective } from './directives/init.directive';\nimport { FocusDirective } from './directives/focus.directive';\n\nimport { PixelConverterPipe } from './pipes/pixel-converter.pipe';\n\nimport { UtilityConfigService } from './services/utility-config.service';\nimport { DragAndDropService } from './services/drag-and-drop.service';\nimport { GlobalRefService } from './services/global-ref.service';\nimport { PopoverComponentLoaderFactoryService } from './services/popover-component-loader-factory.service';\nimport { ResizeService } from './services/resize.service';\nimport { ValidatorService } from './services/validator.service';\n\nconst DIRECTIVES = [InitDirective, FocusDirective];\n\nconst PIPES = [PixelConverterPipe];\n\nconst PROVIDERS = [DragAndDropService, GlobalRefService, PopoverComponentLoaderFactoryService, ResizeService, ValidatorService];\n\n/**\n * Module representing utility providers, directives and pipes.\n */\n@NgModule({\n  imports: [CommonModule],\n  declarations: [...DIRECTIVES, ...PIPES],\n  providers: [...PROVIDERS],\n  exports: [...DIRECTIVES, ...PIPES]\n})\nexport class UtilityModule {\n  /**\n   * Set module root configuration overrides.\n   * @return Module with custom providers.\n   */\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: UtilityModule,\n      providers: [UtilityConfigService]\n    };\n  }\n}\n\nexport { ComponentLoader } from './services/component-loader.interface';\n\nexport { DragAndDropService } from './services/drag-and-drop.service';\nexport { GlobalRefService } from './services/global-ref.service';\nexport { UtilityConfigService } from './services/utility-config.service';\nexport { PopoverComponentLoaderFactoryService } from './services/popover-component-loader-factory.service';\n\nexport { PopoverComponentLoader } from './services/popover-component-loader.class';\n","import { Component, Input } from '@angular/core';\n\nimport { get } from '../../../utility/services/object-utility.class';\n\nimport { DataFetchMode } from '../../models/data-fetch-mode.enum';\n\nimport { DataTableColumnComponent } from '../data-table-column/data-table-column.component';\n\nimport { DragAndDropService } from '../../../utility/utility.module';\nimport { DataTableConfigService } from '../../services/data-table-config.service';\nimport { DataTableEventStateService } from '../../services/data-table-event.service';\nimport { DataTableDataStateService } from '../../services/data-table-data-state.service';\n\n/**\n * Column title header component. Render data table column headers.\n */\n@Component({\n  exportAs: 'ngDataTableColumnTitleHeader',\n  // tslint:disable-next-line\n  selector: '[ngDataTableColumnTitleHeader]',\n  templateUrl: './data-table-column-title-header.component.html'\n})\nexport class DataTableColumnTitleHeaderComponent {\n  private resizeInProgress = false;\n\n  @Input()\n  public columns: DataTableColumnComponent[];\n\n  constructor(\n    private dragAndDropService: DragAndDropService,\n    private eventStateService: DataTableEventStateService,\n    public dataStateService: DataTableDataStateService,\n    public config: DataTableConfigService\n  ) {}\n\n  /**\n   * Header click event handler.\n   * @param column Data table column component reference.\n   * @param event Mouse event arguments object.\n   */\n  public onHeaderClick(column: DataTableColumnComponent, event: MouseEvent): void {\n    if (!this.resizeInProgress) {\n      this.sortData(column);\n      this.eventStateService.headerClickStream.emit({ column, event });\n    } else {\n      this.resizeInProgress = false; // this is because I can't prevent click from mousup of the drag end\n    }\n  }\n\n  /**\n   * Sort data event handler.\n   * @param column Data table column component reference.\n   */\n  private sortData(column: DataTableColumnComponent): void {\n    if (column.sortable) {\n      const prevSortOrder = column.sortOrder;\n      if (column.sortOrder) {\n        column.sortOrder = column.getNewSortOrder();\n      } else {\n        if (!this.config.multiColumnSortable) {\n          const sortColumns = this.columns.filter(item => item.sortable);\n          sortColumns.forEach((sortColumn: DataTableColumnComponent) => {\n            if (sortColumn !== column) {\n              sortColumn.sortOrder = '';\n            }\n          });\n        }\n\n        column.sortOrder = 'asc';\n      }\n\n      if (this.config.multiColumnSortable) {\n        if (column.sortOrder === '') {\n          const sortColumns = this.columns.filter(item => item.sortable);\n          sortColumns.forEach((sortColumn: DataTableColumnComponent) => {\n            if (sortColumn !== column && sortColumn.sortPriority > column.sortPriority) {\n              --sortColumn.sortPriority;\n            }\n          });\n\n          column.sortPriority = undefined;\n          --this.dataStateService.currentSortPriority;\n        } else {\n          if (!prevSortOrder) {\n            column.sortPriority = ++this.dataStateService.currentSortPriority;\n          }\n        }\n      }\n\n      this.eventStateService.dataFetchStream.next(DataFetchMode.SOFT_LOAD);\n    }\n  }\n\n  /**\n   * Set column width.\n   * @param width Width value in pixels.\n   * @param column Data table column component reference.\n   */\n  public setColumnWidth(width: number, column: DataTableColumnComponent): void {\n    column.actualWidth = width;\n  }\n\n  /**\n   * Column resize event handler.\n   * @param event Resize mouse event.\n   * @param column Data table column component.\n   * @param columnElement Table header cell element DOM reference.\n   */\n  public onColumnResize(event: MouseEvent, column: DataTableColumnComponent, columnElement: HTMLTableHeaderCellElement): void {\n    this.resizeInProgress = true;\n\n    this.dragAndDropService.drag(event, {\n      move: (moveEvent: MouseEvent, dx: number) => {\n        const newWidth = columnElement.offsetWidth + dx;\n        if (column.resizeMinLimit !== undefined && newWidth < column.resizeMinLimit) {\n          return;\n        }\n\n        column.actualWidth = newWidth;\n        let totalWidth = 0;\n\n        this.columns.forEach(col => {\n          col.width = col.actualWidth;\n          totalWidth += col.width;\n        });\n\n        this.dataStateService.tableWidth = totalWidth;\n      }\n    });\n  }\n\n  /**\n   * Set all row selected state.\n   * @param value All row selected status.\n   */\n  public set allRowSelected(value: boolean) {\n    this.dataStateService.allRowSelected = value;\n    this.allRowSelectedChanged(this.dataStateService.allRowSelected);\n    this.eventStateService.allRowSelectChangeStream.emit(this.dataStateService.allRowSelected);\n  }\n\n  /**\n   * Get all row selected state.\n   */\n  public get allRowSelected(): boolean {\n    return this.dataStateService.allRowSelected;\n  }\n\n  /**\n   * All row select change event handler.\n   * @param selectedState Row selected status.\n   */\n  private allRowSelectedChanged(selectedState: boolean): void {\n    this.dataStateService.dataRows.forEach(row => {\n      const id = get(row.item, this.config.selectTrackBy);\n      const index = this.dataStateService.selectedRows.indexOf(id);\n      if (selectedState && index < 0) {\n        this.dataStateService.selectedRows.push(id);\n      } else if (!selectedState && index > -1) {\n        this.dataStateService.selectedRows.splice(index, 1);\n      }\n\n      row.selected = selectedState;\n    });\n\n    this.eventStateService.rowSelectChangeStream.emit(this.dataStateService.selectedRows);\n  }\n\n  /**\n   * Get all row select checkbox display status.\n   * @return True if all row select checkbox should be displayed.\n   */\n  public get showAllRowSelectCheckbox(): boolean {\n    return this.config.selectMode === 'multi' && this.config.showRowSelectAllCheckbox;\n  }\n\n  public showSortPriorityLabel(column: DataTableColumnComponent): boolean {\n    return !!(this.config.multiColumnSortable && this.dataStateService.currentSortPriority > 1 && column.sortPriority);\n  }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { DataTableColumnComponent } from '../data-table-column/data-table-column.component';\n\nimport { DataTableDataStateService } from '../../services/data-table-data-state.service';\nimport { DataTableConfigService } from '../../services/data-table-config.service';\n\n/**\n * Data table column selector component. Toggle display state of columns via this popup component.\n */\n@Component({\n  selector: 'ng-data-table-column-selector',\n  templateUrl: './data-table-column-selector.component.html'\n})\nexport class DataTableColumnSelectorComponent {\n  constructor(public dataStateService: DataTableDataStateService, public config: DataTableConfigService) {}\n\n  @Input()\n  public columns: DataTableColumnComponent[];\n\n  @Input()\n  public width: number|string;\n}\n","import { Component, Injector, Input, OnDestroy, Renderer2 } from '@angular/core';\n\nimport { ComponentLoader, PopoverComponentLoaderFactoryService } from '../../../utility/utility.module';\n\nimport { DataFetchMode } from '../../models/data-fetch-mode.enum';\n\nimport { DataTableColumnSelectorComponent } from '../data-table-column-selector/data-table-column-selector.component';\nimport { DataTableColumnComponent } from '../data-table-column/data-table-column.component';\n\nimport { DataTableConfigService } from '../../services/data-table-config.service';\nimport { DataTableEventStateService } from '../../services/data-table-event.service';\nimport { DataTableDataStateService } from '../../services/data-table-data-state.service';\n\n/**\n * Data table header component. Render table title header with column selector widget.\n */\n@Component({\n  selector: 'ng-data-table-header',\n  templateUrl: './data-table-header.component.html'\n})\nexport class DataTableHeaderComponent implements OnDestroy {\n  private componentLoader: ComponentLoader<DataTableColumnSelectorComponent>;\n\n  @Input()\n  public columns: DataTableColumnComponent[];\n\n  constructor(\n    private componentLoaderFactory: PopoverComponentLoaderFactoryService,\n    private injector: Injector,\n    private eventStateService: DataTableEventStateService,\n    private renderer: Renderer2,\n    public dataStateService: DataTableDataStateService,\n    public config: DataTableConfigService\n  ) {\n    this.componentLoader = this.componentLoaderFactory.createLoader<DataTableColumnSelectorComponent>(this.renderer);\n  }\n\n  /**\n   * Toggle column selector.\n   * @param element DOM element reference.\n   */\n  public toggleColumnSelector(element: HTMLElement): void {\n    this.componentLoader.toggle(DataTableColumnSelectorComponent, element, this.injector, {\n      // relativeParent: element, // this.dataStateService.relativeParentElement,\n      context: {\n        columns: this.columns,\n        width: this.config.columnSelectorWidth,\n      },\n      position: 'bottom-right'\n    });\n  }\n\n  /**\n   * On data reload click event handler.\n   */\n  public onReload(): void {\n    this.eventStateService.dataFetchStream.next(DataFetchMode.HARD_RELOAD);\n  }\n\n  /**\n   * Component destroy lifecycle event handler.\n   */\n  public ngOnDestroy(): void {\n    this.componentLoader.dispose();\n  }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { DataTableColumnComponent } from '../data-table-column/data-table-column.component';\n\nimport { DataTableConfigService } from '../../services/data-table-config.service';\n\n/**\n * Data table column group component. This component wraps data table column groups.\n */\n@Component({\n  exportAs: 'ngDataTableColGroup',\n  // tslint:disable-next-line\n  selector: '[ngDataTableColGroup]',\n  templateUrl: './data-table-col-group.component.html'\n})\nexport class DataTableColGroupComponent {\n  @Input()\n  public columns: DataTableColumnComponent;\n\n  constructor(public config: DataTableConfigService) {}\n}\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\n\nimport { debounceTime } from 'rxjs/operators';\n\nimport { DataFetchMode } from '../../models/data-fetch-mode.enum';\n\nimport { DataTableConfigService } from '../../services/data-table-config.service';\nimport { DataTableDataStateService } from '../../services/data-table-data-state.service';\nimport { DataTableEventStateService } from '../../services/data-table-event.service';\nimport { ResizeService } from '../../../utility/services/resize.service';\n\n/**\n * Data table pagination component. Render data table paginator widget.\n */\n@Component({\n  selector: 'ng-data-table-pagination',\n  templateUrl: './data-table-pagination.component.html'\n})\nexport class DataTablePaginationComponent implements OnInit {\n  @ViewChild('paginationContainer', { static: true })\n  private paginationContainer: ElementRef<HTMLElement>;\n\n  public isMobile = false;\n\n  constructor(\n    public config: DataTableConfigService,\n    public dataStateService: DataTableDataStateService,\n    private eventStateService: DataTableEventStateService,\n    private resizeService: ResizeService\n  ) {}\n\n  /**\n   * Set mobile mode state.\n   */\n  private setMobileModeState(): void {\n    this.isMobile = this.paginationContainer.nativeElement.clientWidth < 767;\n  }\n\n  /**\n   * First page click event handler.\n   */\n  public firstPageClick(): void {\n    this.config.offset = 0;\n    this.eventStateService.dataFetchStream.emit(DataFetchMode.SOFT_LOAD);\n  }\n\n  /**\n   * Previous page click event handler.\n   */\n  public previousPageClick(): void {\n    this.config.offset = this.config.offset - Math.min(this.config.limit, this.config.offset);\n    this.eventStateService.dataFetchStream.emit(DataFetchMode.SOFT_LOAD);\n  }\n\n  /**\n   * Next page click event handler.\n   */\n  public nextPageClick(): void {\n    this.config.offset = this.config.offset + this.config.limit;\n    this.eventStateService.dataFetchStream.emit(DataFetchMode.SOFT_LOAD);\n  }\n\n  /**\n   * Last page click event handler.\n   */\n  public lastPageClick(): void {\n    this.config.offset = (this.maxPage - 1) * this.config.limit;\n    this.eventStateService.dataFetchStream.emit(DataFetchMode.SOFT_LOAD);\n  }\n\n  /**\n   * Get maximum page count.\n   */\n  public get maxPage(): number {\n    return Math.ceil(this.dataStateService.itemCount / this.config.limit);\n  }\n\n  /**\n   * Get page number.\n   */\n  public get page(): number {\n    return Math.floor(this.config.offset / this.config.limit) + 1;\n  }\n\n  /**\n   * Check limit invalid status. True if limit is invalid.\n   * @param element Limit input DOM element.\n   * @return Invalid status.\n   */\n  public isInvalidLimit(element: HTMLInputElement): boolean {\n    const limit = Number(element.value);\n    return element.value === '' || limit > this.config.maxLimit || limit < 1;\n  }\n\n  /**\n   * On page size change event handler.\n   * @param element HTML input element.\n   */\n  public onPageSizeChange(element: HTMLInputElement): void {\n    if (this.isInvalidLimit(element)) {\n      element.value = String(this.config.limit);\n      return;\n    }\n\n    const limit = Number(element.value);\n    if (this.config.limit !== limit) {\n      this.config.offset = 0;\n      this.config.limit = limit;\n      this.eventStateService.dataFetchStream.emit(DataFetchMode.SOFT_LOAD);\n    }\n  }\n\n  /**\n   * On page size revert event handler.\n   * @param element HTML input element.\n   */\n  public onPageSizeRevert(element: HTMLInputElement): void {\n    element.value = String(this.config.limit);\n  }\n\n  /**\n   * Is invalid page index; True if page index is invalid.\n   * @param element Page index DOM element.\n   * @return Invalid status.\n   */\n  public isInvalidPageIndex(element: HTMLInputElement): boolean {\n    const page = Number(element.value);\n    return element.value === '' || page > this.maxPage || page < 1;\n  }\n\n  /**\n   * On page size change event handler.\n   * @param element HTML input element.\n   */\n  public onPageIndexChange(element: HTMLInputElement): void {\n    if (this.isInvalidPageIndex(element)) {\n      element.value = String(this.page);\n      return;\n    }\n\n    const page = Number(element.value);\n    if (this.page !== page) {\n      this.config.offset = (page - 1) * this.config.limit;\n      this.eventStateService.dataFetchStream.emit(DataFetchMode.SOFT_LOAD);\n    }\n  }\n\n  /**\n   * On page size revert event handler.\n   * @param element HTML input element.\n   */\n  public onPageIndexRevert(element: HTMLInputElement): void {\n    element.value = String(this.page);\n  }\n\n  /**\n   * Get previous page availability status.\n   */\n  public get hasPrevious(): boolean {\n    return this.config.offset <= 0;\n  }\n\n  /**\n   * Get next page availability status.\n   */\n  public get hasNext(): boolean {\n    return this.config.offset + this.config.limit >= this.dataStateService.itemCount;\n  }\n\n  /**\n   * Get start row index.\n   */\n  public get startRowIndex(): number {\n    return this.config.offset + 1;\n  }\n\n  /**\n   * Get end row index.\n   */\n  public get endRowIndex(): number {\n    return Math.min(this.config.offset + this.config.limit, this.dataStateService.itemCount);\n  }\n\n  /**\n   * Prevent invalid key press.\n   * @param event Keyboard event argument object.\n   */\n  public preventInvalidKeyPress(event: KeyboardEvent): void {\n    if (\n      (event.key >= '0' && event.key <= '9') ||\n      event.key === 'ArrowLeft' ||\n      event.key === 'ArrowRight' ||\n      event.key === 'Delete' ||\n      event.key === 'Backspace' ||\n      event.key === 'Escape' ||\n      event.key === 'Enter'\n    ) {\n      return;\n    } else {\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * component init lifecycle event handler.\n   */\n  public ngOnInit(): void {\n    this.setMobileModeState();\n\n    this.resizeService.resize.pipe(debounceTime(200)).subscribe(() => {\n      this.setMobileModeState();\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DataTableRequestParams } from '../models/data-table-request-params.model';\n\nimport { DataTableStorageMode } from '../models/data-table-storage-mode.model';\n\nimport { GlobalRefService } from '../../utility/utility.module';\nimport { DataTableConfigService } from './data-table-config.service';\n\n/**\n * Data table persistence service; Manage data table state when persist state options is enabled.\n */\n@Injectable()\nexport class DataTablePersistenceService {\n  private storage: Storage;\n\n  constructor(private globalRefService: GlobalRefService, private config: DataTableConfigService) {}\n\n  /**\n   * Set table state storage mode.\n   * @param value Storage mode.\n   */\n  public set storageMode(value: DataTableStorageMode) {\n    if (this.globalRefService.isBrowser) {\n      if (value === 'local') {\n        this.storage = this.globalRefService.window.localStorage;\n      } else {\n        this.storage = this.globalRefService.window.sessionStorage;\n      }\n    }\n  }\n\n  /**\n   * Set table state by identifier.\n   * @param id Table identifier.\n   * @param version Data version.\n   * @param value Data table request parameters object.\n   */\n  public setState(id: string, value: DataTableRequestParams, version: string = 'v1'): void {\n    if (this.globalRefService.isBrowser) {\n      const data = {\n        ver: version,\n        val: value\n      };\n      this.storage.setItem(`${this.config.stateKeyPrefix}${id}`, JSON.stringify(data));\n    }\n  }\n\n  /**\n   * Get table state by identifier.\n   * @param id Table identifier.\n   * @param version Data version.\n   * @return Data table request params object.\n   */\n  public getState(id: string, version: string = 'v1'): DataTableRequestParams {\n    if (this.globalRefService.isBrowser) {\n      const data = JSON.parse(this.storage.getItem(`${this.config.stateKeyPrefix}${id}`));\n\n      if (data && data.ver === version) {\n        return data.val;\n      }\n    }\n\n    return null;\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Observable, ReplaySubject, Subscription, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport { orderBy, get } from '../../utility/services/object-utility.class';\n\nimport { DataTableRequestParams } from '../models/data-table-request-params.model';\nimport { DataTableQueryResult } from '../models/data-table-query-result.model';\nimport { DataTableFilterOption } from '../models/data-table-filter-option.model';\nimport { DataTableQueryField } from '../models/data-table-query-field.model';\n\nimport { DataTableColumnComponent } from '../components/data-table-column/data-table-column.component';\n\n/**\n * Data table resource service; Manage data table client side data querying.\n */\n@Injectable()\nexport class DataTableResourceService<T> {\n  private itemDataStream: ReplaySubject<T[]>;\n  private dataSourceSubscription: Subscription;\n\n  /**\n   * Set data source stream to query.\n   * @param dataSource Data source stream.\n   */\n  public setDataSource(dataSource: Observable<T[]>): void {\n    this.dispose();\n\n    if (this.itemDataStream && !this.itemDataStream.closed) {\n      this.itemDataStream.complete();\n    }\n\n    this.itemDataStream = new ReplaySubject<T[]>(1);\n    this.dataSourceSubscription = dataSource.subscribe((items: T[]) => {\n      this.itemDataStream.next(items);\n    });\n  }\n\n  /**\n   * Query items by data table request params.\n   * @param params Data table parameters object.\n   * @return Query result stream.\n   */\n  public query(params: DataTableRequestParams): Observable<DataTableQueryResult<T>> {\n    return this.itemDataStream.pipe(\n      switchMap((items: T[]) => {\n        let itemCount = items.length;\n        let result: T[] = items.slice();\n\n        if (params.fields.length) {\n          const filterFields = params.fields.filter(field => field.filterable);\n\n          if (filterFields.length) {\n            result = items.filter(item => {\n              return filterFields.every((filterColumn: DataTableQueryField) => {\n                if (filterColumn.filterExpression) {\n                  return filterColumn.filterExpression(item, filterColumn.field, filterColumn.filterValue);\n                }\n\n                if (filterColumn.filterValue === undefined || filterColumn.filterValue === '') {\n                  return true;\n                }\n\n                const fieldValue = get(item, filterColumn.field);\n                if (fieldValue === undefined) {\n                  return true;\n                }\n\n                if (Array.isArray(filterColumn.filterValue)) {\n                  return filterColumn.filterValue.length === 0 || filterColumn.filterValue.includes(fieldValue);\n                }\n\n                const value = String(fieldValue).toLowerCase();\n                const filterValue = String(filterColumn.filterValue).toLowerCase();\n                return value.includes(filterValue);\n              });\n            });\n            itemCount = result.length;\n          }\n\n          const sortColumns = params.fields.filter((column: DataTableQueryField) => {\n            return column.sortable && column.sortOrder !== '';\n          });\n\n          if (sortColumns.length) {\n            let orderedSortColumns = sortColumns;\n            if (sortColumns.length > 1) {\n              orderedSortColumns = sortColumns.concat().sort((a, b) => {\n                return a.sortPriority - b.sortPriority;\n              });\n            }\n\n            const orderParams = orderedSortColumns.reduce((accumulator: any, column: DataTableQueryField) => {\n                if (accumulator) {\n                  accumulator.fields.push(column.field);\n                  accumulator.orders.push(column.sortOrder);\n                }\n\n                return accumulator;\n              },\n              {\n                fields: [],\n                orders: []\n              }\n            );\n\n            result = orderBy(result, orderParams.fields, orderParams.orders);\n          }\n        }\n\n        if (params.offset !== undefined) {\n          const offset = params.offset + 1 > result.length ? 0 : params.offset;\n\n          if (params.limit === undefined) {\n            result = result.slice(offset, result.length);\n          } else {\n            result = result.slice(offset, offset + params.limit);\n          }\n        }\n\n        return of({\n          items: result,\n          count: itemCount\n        });\n      })\n    );\n  }\n\n  /**\n   * Extract data table filter options.\n   * @param filterColumn Data table column component.\n   * @return Filter options collection stream.\n   */\n  public extractFilterOptions(filterColumn: DataTableColumnComponent): Observable<DataTableFilterOption[]> {\n    return this.itemDataStream.pipe(\n      switchMap((items: T[]) => {\n        const filteredItems = items\n          .reduce((acc: DataTableFilterOption[], item: T, index: number): DataTableFilterOption[] => {\n            if (filterColumn.filterFieldMapper) {\n              return acc.concat(filterColumn.filterFieldMapper(item, index));\n            }\n\n            const filterField = filterColumn.filterField || filterColumn.field;\n            const filterValue = get(item, filterField);\n            acc.push({\n              key: filterValue,\n              value: filterValue\n            });\n\n            return acc;\n          }, [])\n          .filter((value: DataTableFilterOption, index, self) => {\n            return self.findIndex(item => item.key === value.key) === index;\n          });\n\n        return of(filteredItems);\n      })\n    );\n  }\n\n  /**\n   * Dispose client data source streams.\n   */\n  public dispose(): void {\n    if (this.dataSourceSubscription) {\n      this.dataSourceSubscription.unsubscribe();\n      this.dataSourceSubscription = null;\n    }\n\n    if (this.itemDataStream && !this.itemDataStream.closed) {\n      this.itemDataStream.complete();\n    }\n  }\n}\n","import {\n  Component,\n  ContentChild,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  AfterContentInit,\n  forwardRef,\n  ElementRef,\n  ViewChild,\n  OnInit,\n  NgZone\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { Subscription, Observable, of, Subject } from 'rxjs';\nimport { catchError, debounceTime, switchMap } from 'rxjs/operators';\n\nimport { get } from '../../../utility/services/object-utility.class';\n\nimport { DataTableFilterValueExtractCallback } from '../../models/data-table-filter-value-extract-callback.model';\nimport { DataTableCellBindEventArgs } from '../../models/data-table-cell-bind-event-args.model';\nimport { DataTableCellClickEventArgs } from '../../models/data-table-cell-click-event-args.model';\nimport { DataTableHeaderClickEventArgs } from '../../models/data-table-header-click-event-args.model';\nimport { DataTableDoubleClickEventArgs } from '../../models/data-table-double-click-event-args.model';\nimport { DataTableRowClickEventArgs } from '../../models/data-table-row-click-event-args.model';\nimport { DataTableRow } from '../../models/data-table-row.model';\nimport { DataTableRequestParams } from '../../models/data-table-request-params.model';\nimport { DataTableTranslations } from '../../models/data-table-translations.model';\nimport { DataTableDynamicRowSpanExtractorCallback } from '../../models/data-table-group-field-extractor-callback.model';\nimport { DataTableQueryResult } from '../../models/data-table-query-result.model';\nimport { DataTableDataBindCallback } from '../../models/data-table-data-bind-callback.model';\nimport { DataTableFilterOption } from '../../models/data-table-filter-option.model';\nimport { DataTableUniqueField } from '../../models/data-table-unique-field.model';\n\nimport { DataTableSelectMode } from '../../models/data-table-select-mode.model';\nimport { DataTableStorageMode } from '../../models/data-table-storage-mode.model';\nimport { DataTableScrollPoint } from '../../models/data-table-scroll-point.model';\nimport { DataFetchMode } from '../../models/data-fetch-mode.enum';\n\nimport { DataTableColumnComponent } from '../data-table-column/data-table-column.component';\n\nimport { DragAndDropService, GlobalRefService } from '../../../utility/utility.module';\nimport { ValidatorService } from '../../../utility/services/validator.service';\nimport { DataTableEventStateService } from '../../services/data-table-event.service';\nimport { DataTableDataStateService } from '../../services/data-table-data-state.service';\nimport { DataTablePersistenceService } from '../../services/data-table-persistence.service';\nimport { DataTableConfigService } from '../../services/data-table-config.service';\nimport { DataTableScrollPositionService } from '../../services/data-table-scroll-position.service';\nimport { DataTableResourceService } from '../../services/data-table-resource.service';\n\n/**\n * Data table component; Data table entry component.\n */\n@Component({\n  selector: 'ng-data-table',\n  templateUrl: './data-table.component.html',\n  providers: [\n    DataTableConfigService,\n    DataTableEventStateService,\n    DataTablePersistenceService,\n    DataTableDataStateService,\n    DataTableScrollPositionService,\n    DataTableResourceService,\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => DataTableComponent),\n      multi: true\n    }\n  ]\n})\nexport class DataTableComponent implements OnDestroy, OnInit, AfterContentInit, ControlValueAccessor {\n  private rowSelectChangeSubscription: Subscription;\n  private dataFetchStreamSubscription: Subscription;\n  private scrollPositionSubscription: Subscription;\n\n  /**\n   * Data table column component collection.\n   */\n  @ContentChildren(DataTableColumnComponent)\n  public columns: QueryList<DataTableColumnComponent>;\n\n  /**\n   * Template to display when data row is expanded for detail view.\n   */\n  @ContentChild('ngDataTableRowExpand', { static: true })\n  public rowExpandTemplate: TemplateRef<any>;\n\n  /**\n   * Template to display when data set is empty.\n   */\n  @ContentChild('ngDataTableNoRecords', { static: true })\n  public noRecordsTemplate: TemplateRef<any>;\n\n  /**\n   * Template to display while loading data.\n   */\n  @ContentChild('ngDataTableLoadingSpinner', { static: true })\n  public loadingSpinnerTemplate: TemplateRef<any>;\n\n  /**\n   * Template to display while row is expanding to load detail view.\n   */\n  @ContentChild('ngDataTableRowExpandLoadingSpinner', { static: true })\n  public rowExpandLoadingSpinnerTemplate: TemplateRef<any>;\n\n  /**\n   * Data table self DOM element reference.\n   */\n  @ViewChild('dataTableElement', { static: true })\n  public dataTableElement: ElementRef<HTMLDivElement>;\n\n  // Event handlers\n\n  /**\n   * Data table initialize event handler.\n   * Triggered after data table initialize.\n   */\n  @Output()\n  public init: EventEmitter<DataTableComponent>;\n\n  /**\n   * Row selected state change event handler.\n   * Triggered when table row selected state change.\n   */\n  @Output()\n  public rowSelectChange: EventEmitter<any | any[]>;\n\n  /**\n   * Row click event handler.\n   * Triggered when data row is clicked.\n   */\n  @Output()\n  public rowClick: EventEmitter<DataTableRowClickEventArgs<any>>;\n\n  /**\n   * Row double click event handler.\n   * Triggered when data row is double clicked.\n   */\n  @Output()\n  public rowDoubleClick: EventEmitter<DataTableDoubleClickEventArgs<any>>;\n\n  /**\n   * Header click event handler.\n   * Triggered when header column clicked.\n   */\n  @Output()\n  public headerClick: EventEmitter<DataTableHeaderClickEventArgs>;\n\n  /**\n   * All row select change event handler.\n   * Triggered when all row select state changed.\n   */\n  @Output()\n  public allRowSelectChange: EventEmitter<boolean>;\n\n  /**\n   * Cell click event handler.\n   * Triggered when clicked on a cell.\n   */\n  @Output()\n  public cellClick: EventEmitter<DataTableCellClickEventArgs<any>>;\n\n  /**\n   * Data bound event handler.\n   * Triggered after data bind.\n   */\n  @Output()\n  public dataBound: EventEmitter<void>;\n\n  /**\n   * Row bind event handler.\n   * Trigger on each row data bind.\n   */\n  @Output()\n  public rowBind: EventEmitter<DataTableRow<any>>;\n\n  /**\n   * Column bind event handler.\n   * Triggered after column data bind.\n   */\n  @Output()\n  public columnBind: EventEmitter<DataTableColumnComponent>;\n\n  /**\n   * Cell bind event handler.\n   * Triggered after data table cell data bind.\n   */\n  @Output()\n  public cellBind: EventEmitter<DataTableCellBindEventArgs<any>>;\n\n  // Input Events\n\n  /**\n   * Set data bind event handler callback. This handler is fired on each data fetch request.\n   */\n  @Input()\n  public set onDataBind(value: DataTableDataBindCallback<any>) {\n    this.dataStateService.onDataBind = value;\n  }\n\n  /**\n   * Set filter value extract event handler callback. Used to extract filter value collection dynamically when\n   * explicit data bind functionality is used with onDataBind callback.\n   */\n  @Input()\n  public set onFilterValueExtract(value: DataTableFilterValueExtractCallback) {\n    this.dataStateService.onFilterValueExtract = value;\n  }\n\n  /**\n   * Set on dynamic row span extract event handler callback.\n   */\n  @Input()\n  public set onDynamicRowSpanExtract(value: DataTableDynamicRowSpanExtractorCallback<any>) {\n    this.dataStateService.onDynamicRowSpanExtract = value;\n  }\n\n  // Input parameters\n\n  /**\n   * Set static data items collection. No need to set data source when static items collection is provided.\n   */\n  @Input()\n  public set items(value: any[]) {\n    if (!value) {\n      return;\n    }\n\n    this.eventStateService.staticDataSourceStream.next(value);\n  }\n\n  /**\n   * Set data source observable. This observable is used to retrieve row data for binding.\n   */\n  @Input()\n  public set dataSource(source: Observable<any[]>) {\n    this.initDataSource(source);\n  }\n\n  /**\n   * Set data table unique identifier.\n   */\n  @Input()\n  public set id(value: string) {\n    if (!ValidatorService.idPatternValidatorExpression.test(value)) {\n      throw Error('Invalid [id] input value. Unique identifier parameter only accept string begin with a letter ([A-Za-z]) and may be followed by any number of letters, digits ([0-9]), hyphens (\"-\"), underscores (\"_\").');\n    }\n\n    this.dataStateService.id = value;\n  }\n\n  /**\n   * Set persist table state on provided storage mode if true. Depends on storageMode property.\n   */\n  @Input()\n  public set persistTableState(value: boolean) {\n    this.config.persistTableState = value;\n  }\n\n  /**\n   * Set storage mode to persist table state. Only applicable when persistTableState is true.\n   */\n  @Input()\n  public set storageMode(value: DataTableStorageMode) {\n    this.dataTableStateService.storageMode = value;\n  }\n\n  /**\n   * Set multiple column sortable if true. Only applicable for sortable true columns.\n   */\n  @Input()\n  public set multiColumnSortable(value: boolean) {\n    this.config.multiColumnSortable = value;\n  }\n\n  /**\n   * Set table header bar visible if true.\n   */\n  @Input()\n  public set showHeader(value: boolean) {\n    this.config.showHeader = value;\n  }\n\n  /**\n   * Set title to be shown in the header. Only applicable when showHeader is true.\n   */\n  @Input()\n  public set title(value: string) {\n    this.config.title = value;\n  }\n\n  /**\n   * Set width value in pixels. Can be used to set the width of teh table (responsive if not set).\n   */\n  @Input()\n  public set width(value: string | number) {\n    this.config.width = value;\n  }\n\n  /**\n   * Set minimum table content height value in pixels. Can be used to set the minimum height of the table content area.\n   */\n  @Input()\n  public set minContentHeight(value: string | number) {\n    this.config.minContentHeight = value;\n  }\n\n  /**\n   * Minimum table content width value in pixels. Can be used to set the minimum width of the table content area.\n   */\n  @Input()\n  public set minContentWidth(value: string | number) {\n    this.config.minContentWidth = value;\n  }\n\n  /**\n   * Table content height value in pixels. This configuration can be used to enable table content vertical\n   * scrolling for responsive design.\n   */\n  @Input()\n  public set contentHeight(value: string | number) {\n    this.config.contentHeight = value;\n  }\n\n  /**\n   * Show pagination bar if true. Depends on offset and limit values. Trigger dataLoad event with offset\n   * and limit values.\n   */\n  @Input()\n  public set pageable(value: boolean) {\n    this.config.pageable = value;\n  }\n\n  /**\n   * Enable scrolling based on-demand data loading functionality if true. Trigger dataLoad event with offset\n   * and limit values when scroll to bottom until data source exhaust.\n   */\n  @Input()\n  public set loadOnScroll(value: boolean) {\n    this.config.loadOnScroll = value;\n  }\n\n  /**\n   * Set view height distance ratio to trigger data fetch on scroll. Applicable only when load on scroll mode is enabled.\n   */\n  @Input()\n  public set loadViewDistanceRatio(value: number) {\n    this.config.loadViewDistanceRatio = value;\n  }\n\n  /**\n   * Set auto generated index column with row numbering if true.\n   */\n  @Input()\n  public set showIndexColumn(value: boolean) {\n    this.config.showIndexColumn = value;\n  }\n\n  /**\n   * Set index column header title. Applicable when showIndexColumn is true.\n   */\n  @Input()\n  public set indexColumnTitle(value: string) {\n    this.config.indexColumnTitle = value;\n  }\n\n  /**\n   * Set row select checkbox and select state if true.\n   */\n  @Input()\n  public set rowSelectable(value: boolean) {\n    this.config.rowSelectable = value;\n  }\n\n  /**\n   * Data table row select mode. Applicable only when rowSelectable is true.\n   */\n  @Input()\n  public set selectMode(value: DataTableSelectMode) {\n    this.config.selectMode = value;\n  }\n\n  /**\n   * Set select all row checkbox on column header visible if true.\n   * Only applicable when showRowSelectCheckbox, rowSelectable is true & item selectMode is  multi.\n   */\n  @Input()\n  public set showRowSelectCheckbox(value: boolean) {\n    this.config.showRowSelectCheckbox = value;\n  }\n\n  /**\n   * Set select all row checkbox on column header visible if true.\n   * Only applicable when showRowSelectCheckbox, rowSelectable is true & item selectMode is  multi.\n   */\n  @Input()\n  public set showRowSelectAllCheckbox(value: boolean) {\n    this.config.showRowSelectAllCheckbox = value;\n  }\n\n  /**\n   * Set substitute rows visible if true. Fill with empty rows when row count < limit.\n   */\n  @Input()\n  public set showSubstituteRows(value: boolean) {\n    this.config.showSubstituteRows = value;\n  }\n\n  /**\n   * Set row expander visible if true. Render ngDataTableExpand template on expand click.\n   */\n  @Input()\n  public set expandableRows(value: boolean) {\n    this.config.expandableRows = value;\n  }\n\n  /**\n   * Set trigger row select on click event if true. Applicable only when rowSelectable is true.\n   */\n  @Input()\n  public set selectOnRowClick(value: boolean) {\n    this.config.selectOnRowClick = value;\n  }\n\n  /**\n   * Set expand and render expand template on row click if true. Only applicable when expandableRows is true.\n   */\n  @Input()\n  public set expandOnRowClick(value: boolean) {\n    this.config.expandOnRowClick = value;\n  }\n\n  /**\n   * Auto trigger dataLoad event on initialization if true.\n   */\n  @Input()\n  public set autoFetch(value: boolean) {\n    this.config.autoFetch = value;\n  }\n\n  /**\n   * Set loading spinner visible if true. Show loading spinner when data fetch operation is triggered.\n   */\n  @Input()\n  public set showLoadingSpinner(value: boolean) {\n    this.config.showLoadingSpinner = value;\n  }\n\n  /**\n   * Set select option track by field path which is used to uniquely identify row for selection tracking.\n   * This field support object paths expressions 'root[0].nest'.\n   */\n  @Input()\n  public set selectTrackBy(value: string) {\n    this.config.selectTrackBy = value;\n  }\n\n  /**\n   * Set selected row identifier. Select specified row on initial load.\n   * Applicable when row select mode is SINGLE or SINGLE_TOGGLE.\n   */\n  @Input()\n  public set selectedRow(value: any) {\n    this.dataStateService.selectedRow = value;\n    this.eventStateService.rowSelectChangeStream.emit(this.dataStateService.selectedRow);\n  }\n\n  /**\n   * Set selected row identifiers collection. Select specified rows on initial load.\n   * Applicable when selectMode is SINGLE or SINGLE_TOGGLE true.\n   */\n  @Input()\n  public set selectedRows(value: any[]) {\n    this.dataStateService.selectedRows = value || [];\n    this.eventStateService.rowSelectChangeStream.emit(this.dataStateService.selectedRows);\n  }\n\n  /**\n   * Set filter debounce time in milliseconds. Applicable only when filterDebounce is true.\n   */\n  @Input()\n  public set filterDebounceTime(value: number) {\n    this.config.filterDebounceTime = value;\n  }\n\n  /**\n   * Set filter data debounce enabled state with provided filterDebounceTime if true.\n   */\n  @Input()\n  public set filterDebounce(value: boolean) {\n    this.config.filterDebounce = value;\n  }\n\n  /**\n   * Set refresh button visible if true. Only applicable when showHeader is true.\n   */\n  @Input()\n  public set showRefreshButton(value: boolean) {\n    this.config.showRefreshButton = value;\n  }\n\n  /**\n   * Row selector column width in pixels. Applicable only when showColumnSelector is true.\n   */\n  @Input()\n  public set showColumnSelector(value: boolean) {\n    this.config.showColumnSelector = value;\n  }\n\n  /**\n   * Set column selector dropdown width in pixels. Only applicable when showColumnSelector is true.\n   */\n  @Input()\n  public set columnSelectorWidth(value: number) {\n    this.config.columnSelectorWidth = value;\n  }\n\n  /**\n   * Set expander column width in pixels. Applicable only when expandableRows is true.\n   */\n  @Input()\n  public set expanderColumnWidth(value: number | string) {\n    this.config.expanderColumnWidth = value;\n  }\n\n  /**\n   * Set index column width in pixels. Applicable only when showIndexColumn is true.\n   */\n  @Input()\n  public set indexColumnWidth(value: number | string) {\n    this.config.indexColumnWidth = value;\n  }\n\n  /**\n   * Set row selector column width in pixels. Applicable only when showColumnSelector is true.\n   */\n  @Input()\n  public set selectionColumnWidth(value: number | string) {\n    this.config.selectionColumnWidth = value;\n  }\n\n  /**\n   * Set translation data object. Used to localize table static label text.\n   */\n  @Input()\n  public set translations(data: DataTableTranslations) {\n    this.config.translations = data;\n  }\n\n  /**\n   * Set row expand loading spinner visible if true. Applicable only when row expand is enabled.\n   */\n  @Input()\n  public set showRowExpandLoadingSpinner(value: boolean) {\n    this.config.showRowExpandLoadingSpinner = value;\n  }\n\n  /**\n   * Set data offset value (start offset index). Applicable only when pageable is true.\n   */\n  @Input()\n  public set offset(value: number) {\n    this.config.offset = value;\n    this.eventStateService.dataFetchStream.next(DataFetchMode.SOFT_LOAD);\n  }\n\n  /**\n   * Set data limit value (page size). Applicable only when pageable is true.\n   */\n  @Input()\n  public set limit(value: number) {\n    this.config.limit = value;\n    this.eventStateService.dataFetchStream.next(DataFetchMode.SOFT_LOAD);\n  }\n\n  /**\n   * Set current page number. Auto calculate offset depending on page number,\n   * do not explicitly set offset when page is used.\n   */\n  @Input()\n  public set page(value: number) {\n    this.offset = (value - 1) * this.config.limit;\n  }\n\n  /**\n   * Get current page number.\n   */\n  public get page(): number {\n    return Math.floor(this.config.offset / this.config.limit) + 1;\n  }\n\n  /**\n   * Get data table header padding in pixels.\n   */\n  public get headerPadding(): number {\n    return this.config.contentHeight ? this.globalRefService.scrollbarWidth : 0;\n  }\n\n  /**\n   * Get data loading status.\n   */\n  public get isLoading(): boolean {\n    return !(this.config.loadOnScroll && this.dataStateService.dataRows.length)\n      && this.config.showLoadingSpinner && this.dataStateService.dataLoading;\n  }\n\n  constructor(\n    private dragAndDropService: DragAndDropService,\n    private dataTableStateService: DataTablePersistenceService,\n    private globalRefService: GlobalRefService,\n    private eventStateService: DataTableEventStateService,\n    private dataTableResourceService: DataTableResourceService<any>,\n    private zone: NgZone,\n    public dataStateService: DataTableDataStateService,\n    public scrollPositionService: DataTableScrollPositionService,\n    public config: DataTableConfigService\n  ) {\n    this.storageMode = config.storageMode;\n\n    this.headerClick = this.eventStateService.headerClickStream;\n    this.allRowSelectChange = this.eventStateService.allRowSelectChangeStream;\n    this.rowBind = this.eventStateService.rowBindStream;\n    this.rowClick = this.eventStateService.rowClickStream;\n    this.rowDoubleClick = this.eventStateService.rowDoubleClickStream;\n    this.rowSelectChange = this.eventStateService.rowSelectChangeStream;\n    this.cellBind = this.eventStateService.cellBindStream;\n    this.cellClick = this.eventStateService.cellClickStream;\n    this.init = this.eventStateService.initStream;\n    this.dataBound = this.eventStateService.dataBoundStream;\n    this.columnBind = this.eventStateService.columnBind;\n  }\n\n  /**\n   * On after data bind event handler\n   * @param queryResult Query result object\n   */\n  private onAfterDataBind(queryResult: DataTableQueryResult<any>): void {\n    this.dataStateService.itemCount = queryResult.count;\n    this.setDataRows(queryResult.items);\n\n    if (this.dataStateService.heardReload) {\n      this.eventStateService.fetchFilterOptionsStream.next(false);\n      this.dataStateService.heardReload = false;\n    }\n\n    this.dataStateService.dataLoading = false;\n    this.eventStateService.dataBoundStream.emit();\n  }\n\n  /**\n   * Get data item selected state\n   * @param item Data item object\n   * @return True if item is selected\n   */\n  private getSelectedState(item: any): boolean {\n    const id = get(item, this.config.selectTrackBy);\n    if (id === undefined) {\n      return false;\n    }\n\n    if (this.config.selectMode === 'multi') {\n      return this.dataStateService.selectedRows.indexOf(id) > -1;\n    }\n\n    return this.dataStateService.selectedRow === id;\n  }\n\n  /**\n   * Set data table item collection\n   * @param items Data table item collection\n   */\n  private setDataRows(items: any[]): void {\n    const mappedItems = items.map((item: any, index: number) => {\n      let currentIndex;\n      if (this.config.loadOnScroll || this.config.pageable) {\n        currentIndex = this.config.offset + index + 1;\n      } else {\n        currentIndex = index + 1;\n      }\n\n      return {\n        dataLoaded: false,\n        expanded: false,\n        disabled: false,\n        color: '',\n        cssClass: '',\n        tooltip: '',\n        index: currentIndex,\n        item,\n        selected: this.getSelectedState(item)\n      };\n    });\n\n    if (this.config.loadOnScroll) {\n      this.dataStateService.dataRows = [ ...this.dataStateService.dataRows, ...mappedItems ];\n    } else {\n      this.dataStateService.dataRows = mappedItems;\n    }\n\n    if (this.config.selectMode === 'multi') {\n      this.dataStateService.allRowSelected =\n        this.dataStateService.dataRows.length !== 0 &&\n        this.dataStateService.dataRows.every((dataRow: DataTableRow<any>) => {\n          return dataRow.selected;\n        });\n    }\n\n    if (!this.config.loadOnScroll) {\n      const substituteRowCount = this.config.limit - this.dataStateService.dataRows.length;\n      this.dataStateService.substituteRows = Array.from({\n        length: substituteRowCount\n      });\n    }\n  }\n\n  /**\n   * Initialize data fetch event\n   */\n  private initDataFetchEvent(): void {\n    const noop = {\n      items: [],\n      count: 0\n    };\n\n    this.dataFetchStreamSubscription = this.eventStateService.dataFetchStream\n      .pipe(\n        debounceTime(20),\n        switchMap((fetchMode: DataFetchMode) => this.mapDataBind(fetchMode)),\n        catchError(() => {\n          return of(noop);\n        })\n      )\n      .subscribe(\n        (queryResult: DataTableQueryResult<any>) => {\n          this.onAfterDataBind(queryResult);\n        },\n        () => {\n          this.onAfterDataBind(noop);\n        }\n      );\n  }\n\n  /**\n   * Re-map data binding data\n   * @param fetchMode Data fetch mode\n   * @return Data table query result stream\n   */\n  private mapDataBind(fetchMode: DataFetchMode): Observable<DataTableQueryResult<any>> {\n    this.dataStateService.dataLoading = true;\n    if (fetchMode === DataFetchMode.HARD_RELOAD) {\n      this.clearRowSelectState();\n      this.clearColumnState();\n      this.dataStateService.heardReload = true;\n      this.config.offset = 0;\n    }\n\n    const params: DataTableRequestParams = {\n      loadData: fetchMode === DataFetchMode.HARD_RELOAD || fetchMode === DataFetchMode.SOFT_RELOAD\n    };\n\n    if (this.columns) {\n      params.fields = this.columns\n        .filter(column => {\n          return column.sortable || column.filterable;\n        })\n        .reduce((acc: DataTableUniqueField[], column: DataTableColumnComponent) => {\n          if (column.sortField || column.filterField) {\n            acc.push({\n              field: column.sortField || column.filterField,\n              column\n            });\n          } else {\n            acc.push({\n              field: column.field,\n              column\n            });\n          }\n\n          return acc;\n        }, [])\n        .map((uniqueField: DataTableUniqueField) => {\n          let filter;\n          if (uniqueField.column.showDropdownFilter) {\n            if (uniqueField.column.dropdownFilterSelectMode === 'multi') {\n              filter = uniqueField.column.filter && uniqueField.column.filter.map(filterValue => filterValue.key);\n            } else {\n              filter = uniqueField.column.filter && uniqueField.column.filter.key;\n            }\n          } else {\n            filter = uniqueField.column.filter;\n          }\n\n          return {\n            field: uniqueField.field,\n            sortable: uniqueField.column.sortable,\n            sortOrder: uniqueField.column.sortOrder,\n            sortPriority: uniqueField.column.sortPriority || (uniqueField.column.sortOrder ? 1 : 0),\n            filterable: uniqueField.column.filterable,\n            filterValue: filter,\n            filterExpression: uniqueField.column.filterExpression,\n          };\n        });\n    }\n\n    if (this.config.pageable || this.config.loadOnScroll) {\n      params.offset = this.config.offset;\n      params.limit = this.config.limit;\n    }\n\n    if (this.config.persistTableState) {\n      this.dataTableStateService.setState(this.dataStateService.id, params);\n    }\n\n    return this.dataStateService.onDataBind(params);\n  }\n\n  /**\n   * Initialize data table state via previous state snapshot; Applicable only when persist table state is enabled\n   */\n  private initDataTableState(): void {\n    if (this.config.persistTableState) {\n      const dataTableState = this.dataTableStateService.getState(this.dataStateService.id);\n      if (dataTableState) {\n        this.columns.forEach(column => {\n          const field = dataTableState.fields.find(col => {\n            return col.field === column.field;\n          });\n\n          if (field) {\n            if (column.filterable && field.filterable) {\n              if (column.showDropdownFilter) {\n                if (field.filterValue) {\n                  if (column.dropdownFilterSelectMode === 'multi') {\n                    column.filter = field.filterValue.map((filterValue) => {\n                      return {\n                        key: filterValue,\n                        value: filterValue\n                      };\n                    });\n                  } else {\n                    column.filter = {\n                      key: field.filterValue,\n                      value: field.filterValue\n                    };\n                  }\n                }\n              } else {\n                column.filter = field.filterValue;\n              }\n            }\n\n            if (column.sortable && field.sortable) {\n              column.sortOrder = field.sortOrder;\n            }\n          }\n        });\n\n        this.config.limit = dataTableState.limit;\n        this.config.offset = dataTableState.offset;\n      }\n    }\n  }\n\n  /**\n   * After component initialize lifecycle event handler\n   */\n  public ngAfterContentInit(): void {\n    this.dataStateService.relativeParentElement = this.dataTableElement.nativeElement;\n\n    if (!this.dataStateService.onDataBind) {\n      this.dataSource = this.eventStateService.staticDataSourceStream;\n    }\n\n    this.initDataTableState();\n    this.initDataFetchEvent();\n\n    if (this.config.autoFetch) {\n      this.eventStateService.dataFetchStream.next(DataFetchMode.SOFT_LOAD);\n    }\n\n    this.eventStateService.fetchFilterOptionsStream.next(true);\n    this.eventStateService.initStream.emit(this);\n\n    if (this.config.loadOnScroll) {\n      this.scrollPositionSubscription = this.scrollPositionService.scrollPositionStream.subscribe((pos: DataTableScrollPoint) => {\n        const roundingPixel = 1;\n        const gutterPixel = 1;\n\n        if (\n          pos.isVertical\n          && pos.scrollTop >= pos.scrollHeight - (1 + this.config.loadViewDistanceRatio) * pos.clientHeight - roundingPixel - gutterPixel\n          && (this.config.offset + this.config.limit) < this.dataStateService.itemCount\n          && !this.dataStateService.dataLoading\n        ) {\n          this.dataStateService.dataLoading = true;\n          this.zone.run(() => {\n            this.offset = this.config.offset + this.config.limit;\n          });\n        }\n      });\n    }\n  }\n\n  /**\n   * Reset column sort and filter state\n   */\n  private clearColumnState(): void {\n    this.columns.forEach((column: DataTableColumnComponent) => {\n      column.resetSortOrder();\n      column.filter = undefined;\n    });\n  }\n\n  /**\n   * Clear selected data row status\n   */\n  private clearRowSelectState(): void {\n    this.dataStateService.selectedRow = undefined;\n    this.dataStateService.selectedRows = [];\n    this.dataStateService.allRowSelected = false;\n  }\n\n  /**\n   * Fetch data from data source\n   * @param fetchMode Data fetch mode\n   */\n  public fetchData(fetchMode: DataFetchMode = DataFetchMode.SOFT_RELOAD): void {\n    this.eventStateService.dataFetchStream.next(fetchMode);\n  }\n\n  /**\n   * Initialize data source\n   * @param source Data source stream\n   */\n  public initDataSource(source: Observable<any>): void {\n    this.dataTableResourceService.setDataSource(source);\n\n    this.onDataBind = (params: DataTableRequestParams): Observable<DataTableQueryResult<any>> => {\n      if (params.loadData) {\n        this.dataTableResourceService.setDataSource(source);\n      }\n\n      return this.dataTableResourceService.query(params);\n    };\n\n    this.onFilterValueExtract = (column: DataTableColumnComponent): Observable<DataTableFilterOption[]> => {\n      return this.dataTableResourceService.extractFilterOptions(column);\n    };\n  }\n\n  /**\n   * Component value write event handler; Form control support implementation\n   */\n  public writeValue(value: any): void {\n    if (this.config.selectMode === 'multi') {\n      this.selectedRows = value;\n    } else {\n      this.selectedRow = value;\n    }\n  }\n\n  /**\n   * Register select change event handler; Form control support implementation\n   * @param onSelectChange Select change event handler callback\n   */\n  public registerOnChange(onSelectChange: (value: any) => void): void {\n    this.rowSelectChangeSubscription = this.eventStateService.rowSelectChangeStream.subscribe((selectedIds: any | any[]) => {\n      onSelectChange(selectedIds);\n    });\n  }\n\n  /**\n   * Register on touch event handler; Form control support implementation\n   * @param fn Touch event callback handler\n   */\n  public registerOnTouched(fn: any): void {}\n\n  /**\n   * Get table width in pixels\n   */\n  public get tableWidth(): number {\n    return this.config.width || this.dataStateService.tableWidth;\n  }\n\n  public ngOnInit(): void {\n    if (!this.dataStateService.id) {\n      throw Error('Missing required parameter value for [id] input.');\n    }\n\n    if (this.config.loadOnScroll) {\n      if (!this.config.minContentHeight) {\n        throw Error('[minContentHeight] is required when [infiniteScrollable] is enabled.');\n      }\n\n      if (this.config.pageable) {\n        throw Error('[pageable] and [infiniteScrollable] cannot be enabled at the same time.');\n      }\n    }\n  }\n\n  /**\n   * Component destroy lifecycle event handler\n   */\n  public ngOnDestroy(): void {\n    if (this.dataFetchStreamSubscription) {\n      this.dataFetchStreamSubscription.unsubscribe();\n    }\n\n    if (this.rowSelectChangeSubscription) {\n      this.rowSelectChangeSubscription.unsubscribe();\n    }\n\n    if (this.scrollPositionSubscription) {\n      this.scrollPositionSubscription.unsubscribe();\n    }\n\n    this.dataTableResourceService.dispose();\n  }\n}\n","import { Component, Input, TemplateRef } from '@angular/core';\n\nimport { DataTableRow } from '../../models/data-table-row.model';\n\nimport { DataTableColumnComponent } from '../data-table-column/data-table-column.component';\n\nimport { DataTableConfigService } from '../../services/data-table-config.service';\nimport { DataTableDataStateService } from '../../services/data-table-data-state.service';\nimport { DataTableEventStateService } from '../../services/data-table-event.service';\n\nimport { get } from '../../../utility/services/object-utility.class';\n\n/**\n * Data table body component. Data table body table definition rendering is handled by this component.\n */\n@Component({\n  exportAs: 'ngDataTableBody',\n  // tslint:disable-next-line\n  selector: '[ngDataTableBody]',\n  templateUrl: './data-table-body.component.html'\n})\nexport class DataTableBodyComponent {\n  @Input()\n  public columns: DataTableColumnComponent[];\n\n  @Input()\n  public rowExpandTemplate: TemplateRef<any>;\n\n  @Input()\n  public rowExpandLoadingSpinnerTemplate: TemplateRef<any>;\n\n  constructor(\n    public config: DataTableConfigService,\n    public dataStateService: DataTableDataStateService,\n    private eventStateService: DataTableEventStateService\n  ) {}\n\n  /**\n   * Unique data row tracking callback.\n   * @param index Current index.\n   * @param dataRow Data row object reference.\n   */\n  public dataRowTrackBy(index: number, dataRow: DataTableRow<any>): number {\n    return dataRow.index;\n  }\n\n  /**\n   * Odd row status; True if row index is a odd number.\n   * @param row Data row object.\n   * @return True if odd row.\n   */\n  public isOddRow(row: DataTableRow<any>): boolean {\n    return row.index % 2 === 0;\n  }\n\n  /**\n   * Even row status; True if row index is a even number.\n   * @param row Data row object.\n   * @return True if even row.\n   */\n  public isEvenRow(row: DataTableRow<any>): boolean {\n    return row.index % 2 === 1;\n  }\n\n  /**\n   * Odd substitute row status by row index; True if row index is an odd substitute row.\n   * @param index Row index.\n   * @return True if odd substitute row.\n   */\n  public isOddSubstituteRow(index: number): boolean {\n    return (index + this.dataStateService.substituteRows.length) % 2 === 0;\n  }\n\n  /**\n   * Even substitute row status by row index; True if row index is an even substitute row.\n   * @param index Row index.\n   * @return True if even substitute row.\n   */\n  public isEvenSubstituteRow(index: number): boolean {\n    return (index + this.dataStateService.substituteRows.length) % 2 === 1;\n  }\n\n  /**\n   * On row expand event handler.\n   * @param $event Click event argument reference.\n   * @param dataRow Data row object.\n   */\n  public onRowExpand($event: Event, dataRow: DataTableRow<any>): void {\n    dataRow.expanded = !dataRow.expanded;\n\n    if (!this.config.showRowExpandLoadingSpinner) {\n      dataRow.dataLoaded = true;\n    }\n  }\n\n  /**\n   * On row initialize event handler.\n   * @param dataRow Data table row.\n   */\n  public onRowInit(dataRow): void {\n    this.eventStateService.rowBindStream.emit(dataRow);\n  }\n\n  /**\n   * On cell initialize event handler.\n   * @param column Data table column component reference.\n   * @param row Data table row object.\n   */\n  public onCellInit(column: DataTableColumnComponent, row: DataTableRow<any>): void {\n    this.eventStateService.cellBindStream.emit({\n      column,\n      row\n    });\n  }\n\n  /**\n   * Cell clicked event handler.\n   * @param column Column data table component reference.\n   * @param row Data table row reference.\n   * @param event Mouse click event argument reference.\n   */\n  public cellClicked(column: DataTableColumnComponent, row: DataTableRow<any>, event: MouseEvent): void {\n    this.eventStateService.cellClickStream.emit({ row, column, event });\n  }\n\n  /**\n   * Get row span collection by data row.\n   * @param row Data row reference.\n   * @return Dummy row span collection.\n   */\n  public getRowSpanCollection(row: DataTableRow<any>): any[] {\n    return Array.from({\n      length: this.dataStateService.onDynamicRowSpanExtract(row)\n    });\n  }\n\n  /**\n   * Get total column count used for substitute row generation.\n   * @return Number of columns.\n   */\n  public get totalColumnCount(): number {\n    let count = 0;\n    count += this.config.showIndexColumn ? 1 : 0;\n    count += this.config.showRowSelectCheckboxColumn ? 1 : 0;\n    count += this.config.expandableRows ? 1 : 0;\n    this.columns.forEach(column => {\n      count += column.visible ? 1 : 0;\n    });\n\n    return count;\n  }\n\n  /**\n   * On row select click event handler.\n   * @param row Data row reference.\n   * @param event Row click event.\n   */\n  public onRowSelectClick(row: DataTableRow<any>, event: Event): void {\n    // Prevent single mode checkbox getting unchecked on tapping already selected.\n    if (this.config.selectMode === 'single') {\n      const id = get(row.item, this.config.selectTrackBy);\n      const previousSelection = this.dataStateService.selectedRow;\n\n      if (previousSelection === id) {\n        event.preventDefault();\n        row.selected = true;\n      }\n    }\n  }\n\n  /**\n   * On row selection change event handler.\n   * @param row Data row reference.\n   */\n  public onRowSelectChange(row: DataTableRow<any>): void {\n    const id = get(row.item, this.config.selectTrackBy);\n\n    switch (this.config.selectMode) {\n      case 'multi': {\n        const index = this.dataStateService.selectedRows.indexOf(id);\n        if (row.selected && index < 0) {\n          this.dataStateService.selectedRows.push(id);\n        } else if (!row.selected && index > -1) {\n          this.dataStateService.selectedRows.splice(index, 1);\n        }\n\n        const previousAllRowSelectedState = this.dataStateService.allRowSelected;\n        this.dataStateService.allRowSelected = this.dataStateService.dataRows.every((dataRow: DataTableRow<any>) => {\n          return dataRow.selected;\n        });\n\n        this.eventStateService.rowSelectChangeStream.emit(this.dataStateService.selectedRows);\n\n        if (previousAllRowSelectedState !== this.dataStateService.allRowSelected) {\n          this.eventStateService.allRowSelectChangeStream.emit(this.dataStateService.allRowSelected);\n        }\n        break;\n      }\n      case 'single_toggle': {\n        if (row.selected) {\n          this.dataStateService.selectedRow = id;\n\n          // deselect all other row other rows\n          this.dataStateService.dataRows.forEach((dataRow: DataTableRow<any>) => {\n            if (dataRow !== row) {\n              dataRow.selected = false;\n            }\n          });\n        } else {\n          this.dataStateService.selectedRow = undefined;\n        }\n\n        this.eventStateService.rowSelectChangeStream.emit(this.dataStateService.selectedRow);\n        break;\n      }\n      case 'single': {\n        const previousSelection = this.dataStateService.selectedRow;\n        this.dataStateService.selectedRow = id;\n        row.selected = true;\n\n        // deselect all other row other rows\n        this.dataStateService.dataRows.forEach((dataRow: DataTableRow<any>) => {\n          if (dataRow !== row) {\n            dataRow.selected = false;\n          }\n        });\n\n        if (previousSelection !== id) {\n          this.eventStateService.rowSelectChangeStream.emit(this.dataStateService.selectedRow);\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Row clicked event handler.\n   * @param row Data row object.\n   * @param event Mouse click event argument object.\n   */\n  public rowClicked(row: DataTableRow<any>, event: MouseEvent): void {\n    if (this.config.selectOnRowClick || (this.config.expandableRows && this.config.expandOnRowClick)) {\n      const target = event.target as HTMLElement;\n      if (target && target.classList && target.classList.contains('ng-ignore-propagation')) {\n        return;\n      }\n\n      if (this.config.rowSelectable && this.config.selectOnRowClick) {\n        row.selected = !row.selected;\n        this.onRowSelectChange(row);\n      }\n\n      if (this.config.expandOnRowClick) {\n        row.expanded = !row.expanded;\n      }\n    }\n\n    this.eventStateService.rowClickStream.emit({ row, event });\n  }\n\n  /**\n   * Row double clicked event handler.\n   * @param row Data row object.\n   * @param event Event Mouse click event argument object.\n   */\n  public rowDoubleClicked(row: DataTableRow<any>, event: MouseEvent): void {\n    this.eventStateService.rowDoubleClickStream.emit({ row, event });\n  }\n\n  /**\n   * Get substitute row availability status.\n   * @return True if substitute rows are available.\n   */\n  public get hasSubstituteRows(): boolean {\n    return !this.config.loadOnScroll\n      && this.config.showSubstituteRows\n      && this.dataStateService.dataRows.length\n      && !this.dataStateService.showNoDataOverlay;\n  }\n\n  /**\n   * Get cell value by data field.\n   * @param row Data row reference.\n   * @param column Data table column component reference.\n   */\n  public getFieldValue(row: DataTableRow<any>, column: DataTableColumnComponent) {\n    return get(row.item, column.field);\n  }\n\n  /**\n   * Get row select checkbox display status.\n   * @return True if row selector checkbox should be displayed.\n   */\n  public get showRowSelectCheckbox(): boolean {\n    return this.config.rowSelectable && this.config.showRowSelectCheckbox;\n  }\n\n  /**\n   * Get row expend view loading status. Used to display loading spinner on expand column while data fetching.\n   * @param row Data row object reference.\n   */\n  public isRowExpanderLoading(row: DataTableRow<any>): boolean {\n    return row.expanded && !row.dataLoaded;\n  }\n}\n","import { Component, Input, TemplateRef } from '@angular/core';\n\nimport { DataFetchMode } from '../../models/data-fetch-mode.enum';\n\nimport { DataTableConfigService } from '../../services/data-table-config.service';\nimport { DataTableEventStateService } from '../../services/data-table-event.service';\n\n/**\n * No data body component. Used to display no data message when data not available.\n */\n@Component({\n  selector: 'ng-data-table-no-data-body',\n  templateUrl: './data-table-no-data-body.component.html'\n})\nexport class DataTableNoDataBodyComponent {\n  @Input()\n  public noRecordsTemplate: TemplateRef<any>;\n\n  constructor(public config: DataTableConfigService, public eventStateService: DataTableEventStateService) {}\n\n  /**\n   * Reset all applied filters.\n   */\n  public resetFilters(): void {\n    this.eventStateService.dataFetchStream.emit(DataFetchMode.HARD_RELOAD);\n  }\n\n  /**\n   * Get default no data template display status.\n   * @return True if default no data template should be displayed.\n   */\n  public get showDefaultNoDataTemplate(): boolean {\n    return !!(!this.noRecordsTemplate && this.config.translations.noDataMessage);\n  }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { DataTableColumnComponent } from '../data-table-column/data-table-column.component';\n\n/**\n * Data table header component. Render data table column title and filter header rows.\n */\n@Component({\n  exportAs: 'ngDataTableHead',\n  // tslint:disable-next-line\n  selector: '[ngDataTableHead]',\n  templateUrl: './data-table-head.component.html'\n})\nexport class DataTableHeadComponent {\n  @Input()\n  public columns: DataTableColumnComponent[];\n\n  /**\n   * Get filter column availability status.\n   * @return True if there is at least one filter column.\n   */\n  public get hasFilterColumns(): boolean {\n    return this.columns.some((column: DataTableColumnComponent) => column.filterable);\n  }\n}\n","import { Component, Input, TemplateRef } from '@angular/core';\n\nimport { DataTableConfigService } from '../../services/data-table-config.service';\nimport { DataTableDataStateService } from '../../services/data-table-data-state.service';\n\n/**\n * Data loading spinner component. Displayed within table body while fetching data.\n */\n@Component({\n  selector: 'ng-data-table-loading-spinner',\n  templateUrl: './data-table-loading-spinner.component.html'\n})\nexport class DataTableLoadingSpinnerComponent {\n  @Input()\n  public loadingSpinnerTemplate: TemplateRef<any>;\n\n  @Input()\n  public isLoading: boolean;\n\n  @Input()\n  public showOverlay: boolean;\n\n  constructor(public config: DataTableConfigService, public dataStateService: DataTableDataStateService) {}\n}\n","import { Directive, ElementRef, AfterViewInit, NgZone, OnDestroy, Input } from '@angular/core';\n\nimport { Subscription, fromEvent, Subject } from 'rxjs';\nimport { map, pairwise } from 'rxjs/operators';\n\nimport { DataTableScrollPoint } from '../models/data-table-scroll-point.model';\n\n/**\n * Scroll position directive.\n * Track current scroll position of target element.\n */\n@Directive({\n  selector: '[ngScrollPosition]'\n})\nexport class ScrollPositionDirective implements AfterViewInit, OnDestroy {\n  private scrollEventSubscription: Subscription;\n\n  @Input()\n  public ngScrollPosition: Subject<DataTableScrollPoint>;\n\n  constructor(private el: ElementRef, private zone: NgZone) {}\n\n  /**\n   * After component initialize lifecycle event handler.\n   */\n  public ngAfterViewInit(): void {\n    this.zone.runOutsideAngular(() => {\n      this.scrollEventSubscription = fromEvent(this.el.nativeElement, 'scroll')\n        .pipe(\n          map(() => {\n            return {\n              scrollLeft: this.el.nativeElement.scrollLeft,\n              scrollTop: this.el.nativeElement.scrollTop,\n              scrollHeight: this.el.nativeElement.scrollHeight,\n              scrollWidth: this.el.nativeElement.scrollWidth,\n              clientHeight: this.el.nativeElement.clientHeight,\n              clientWidth: this.el.nativeElement.clientWidth,\n            };\n          }),\n          pairwise(),\n          map((pair: DataTableScrollPoint[]) => {\n            const [ previous, current ] = pair;\n\n            return {\n              ...current,\n              isHorizontal: previous.scrollLeft !== current.scrollLeft,\n              isVertical: previous.scrollTop !== current.scrollTop\n            };\n          })\n        )\n        .subscribe((pos: DataTableScrollPoint) => {\n          this.ngScrollPosition.next(pos);\n        });\n    });\n  }\n\n  /**\n   * Component destroy lifecycle event handler.\n   */\n  public ngOnDestroy(): void {\n    if (this.scrollEventSubscription) {\n      this.scrollEventSubscription.unsubscribe();\n    }\n\n    this.ngScrollPosition.complete();\n  }\n}\n","import { AfterViewInit, Directive, ElementRef, Input, OnDestroy } from '@angular/core';\n\nimport { Subscription, Subject } from 'rxjs';\n\nimport { DataTableScrollPoint } from '../models/data-table-scroll-point.model';\n\n/**\n * Scroll element directive.\n * Used to set scroll position to target element.\n */\n@Directive({\n  selector: '[ngScrollElement]'\n})\nexport class ScrollElementDirective implements AfterViewInit, OnDestroy {\n  private scrollPositionSubscription: Subscription;\n\n  @Input()\n  public ngScrollElement: Subject<DataTableScrollPoint>;\n\n  constructor(private el: ElementRef) {}\n\n  /**\n   * After component initialize lifecycle event handler.\n   */\n  public ngAfterViewInit(): void {\n    this.scrollPositionSubscription = this.ngScrollElement.subscribe(value => {\n      this.el.nativeElement.scrollLeft = value.scrollLeft;\n    });\n  }\n\n  /**\n   * Component destroy lifecycle event handler.\n   */\n  public ngOnDestroy(): void {\n    if (this.scrollPositionSubscription) {\n      this.scrollPositionSubscription.unsubscribe();\n    }\n  }\n}\n","import { AfterViewInit, Directive, ElementRef, EventEmitter, Output } from '@angular/core';\n\n/**\n * Element width directive.\n * Used to emit target element width after view init.\n */\n@Directive({\n  selector: '[ngElementWidth]'\n})\nexport class ElementWidthDirective implements AfterViewInit {\n  @Output()\n  public ngElementWidth = new EventEmitter();\n\n  constructor(private el: ElementRef) {}\n\n  /**\n   * After component view initialize lifecycle event handler.\n   */\n  public ngAfterViewInit(): void {\n    this.ngElementWidth.emit(this.el.nativeElement.clientWidth);\n  }\n}\n","import { Inject, Injectable, InjectionToken } from '@angular/core';\n\nimport { get } from '../../utility/services/object-utility.class';\n\nimport { DropdownConfig } from '../models/dropdown-config.model';\nimport { DropdownTranslations } from '../models/dropdown-translations.model';\nimport { DataTableConfig } from '../../data-table/models/data-table-config.model';\n\nimport { DropdownSelectMode } from '../models/dropdown-select-mode.model';\nimport { ViewPosition } from '../../utility/models/view-position.model';\n\nexport const DROPDOWN_CONFIG = new InjectionToken<DataTableConfig>('dropdownConfig');\n\n/**\n * Dropdown config service. Holds all the global configurations of dropdown which can be overridden while importing the module.\n * Used to manage dropdown base configuration state.\n */\n@Injectable()\nexport class DropdownConfigService implements DropdownConfig {\n  public baseTranslations: DropdownTranslations = {\n    noDataMessage: 'No Results Available',\n    filterPlaceholder: 'Search',\n    selectedOptionWrapPlaceholder: 'Options',\n    selectPlaceholder: 'Select'\n  };\n\n  public selectTrackBy = 'key';\n  public displayTrackBy = 'value';\n  public disabledTrackBy = 'disabled';\n  public menuPosition: ViewPosition = 'bottom-left';\n  public selectMode: DropdownSelectMode = 'single-toggle';\n  public filterable = false;\n  public filterDebounce = true;\n  public filterDebounceTime = 500;\n  public groupByField: string = undefined;\n  public wrapDisplaySelectLimit: number = undefined;\n  public showSelectedOptionRemoveButton = false;\n  public showClearSelectionButton = false;\n  public menuWidth = 320;\n  public menuHeight = 250;\n  public loadOnScroll = false;\n  public loadViewDistanceRatio = 1;\n  public limit = 15;\n  public loadDataOnInit = true;\n  public closeMenuOnSelect = false;\n  public showOptionSelectCheckbox = false;\n  public showOptionIndex = false;\n  public showOptionTrackBy = false;\n  public multiSelectOptionMaxWidth = 135;\n  public setFirstOptionSelected = false;\n  public triggerSelectChangeOnInit = false;\n  public triggerSelectChangeOnModelUpdate = false;\n  public triggerSelectChangeOnFirstOptionSelect = false;\n  public dynamicDimensionCalculation = false;\n  public dynamicWidthRatio = 1;\n  public dynamicHeightRatio = 0.5;\n  public relativeParentElement = undefined;\n\n  constructor(@Inject(DROPDOWN_CONFIG) private dropdownConfig: DropdownConfig) {\n    if (dropdownConfig) {\n      Object.assign(this, dropdownConfig);\n    }\n  }\n\n  /**\n   * Set dropdown translations.\n   * @param value Dropdown translations object.\n   */\n  public set translations(value: DropdownTranslations) {\n    this.baseTranslations = { ...this.baseTranslations, ...value };\n  }\n\n  /**\n   * Get dropdown translations.\n   * @return Dropdown translations.\n   */\n  public get translations(): DropdownTranslations {\n    return this.baseTranslations;\n  }\n\n  /**\n   * Get display text by source option.\n   * @param option Source option object.\n   * @return Display text.\n   */\n  public getDisplayText(option: any): string {\n    return get(option, this.displayTrackBy);\n  }\n}\n","import { Injectable, TemplateRef } from '@angular/core';\n\nimport { DropdownOption } from '../models/dropdown-option.model';\nimport { DropdownDataBindCallback } from '../models/dropdown-data-bind-callback.model';\nimport { DropdownOptionGroup } from '../models/dropdown-option-group.model';\nimport { ComponentLoader } from '../../utility/utility.module';\n\n/**\n * Dropdown data state service; Manage dropdown state data.\n */\n@Injectable()\nexport class DropdownDataStateService {\n  public id: string;\n  public dataLoading = false;\n  public selectedOption: any;\n  public selectedOptions: any[] = [];\n  public offset = 0;\n  public totalOptionCount: number;\n  public currentOptionCount = 0;\n  public dropdownOptions: DropdownOption[] = [];\n  public dropdownOptionGroups: DropdownOptionGroup[] = [];\n  public filterText = '';\n  public disabled = false;\n  public componentLoaderRef: ComponentLoader<any>;\n  public dropdownOptionTemplate: TemplateRef<any>;\n  public dropdownOptionGroupHeaderTemplate: TemplateRef<any>;\n\n  public onDataBind: DropdownDataBindCallback<any>;\n\n  /**\n   * Get dropdown option unique id.\n   * @param append Target identifier.\n   * @param index Target index.\n   */\n  public getUniqueId(append: string, index: number): string {\n    return `${this.id}-chk-${append}-${index}`;\n  }\n}\n","import { EventEmitter, Injectable } from '@angular/core';\n\nimport { ReplaySubject } from 'rxjs';\n\nimport { DropdownComponent } from '../components/dropdown/dropdown.component';\n\n/**\n * Dropdown event state service; Manage dropdown event handler state.\n */\n@Injectable()\nexport class DropdownEventStateService {\n  public dataFetchStream = new EventEmitter<boolean>();\n  public dataBoundStream = new EventEmitter<void>();\n  public selectChangeStream = new EventEmitter<any[] | any>();\n  public initStream = new EventEmitter<DropdownComponent>();\n  public staticDataSourceStream = new ReplaySubject<any[]>(1);\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\n\nimport { Subscription, Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport { DropdownConfigService } from '../../services/dropdown-config.service';\nimport { DropdownDataStateService } from '../../services/dropdown-data-state.service';\nimport { DropdownEventStateService } from '../../services/dropdown-event-state.service';\n\n/**\n * Dropdown options list view component\n */\n@Component({\n  selector: 'ng-dropdown-view',\n  templateUrl: './dropdown-view.component.html'\n})\nexport class DropdownViewComponent implements OnInit, OnDestroy {\n  public scrollEvent = new Subject<any>();\n  private scrollEventSubscription: Subscription;\n\n  constructor(\n    public config: DropdownConfigService,\n    public dataStateService: DropdownDataStateService,\n    private eventStateService: DropdownEventStateService\n  ) {}\n\n  /**\n   * Lifecycle hook that is called when component is initialized.\n   */\n  public ngOnInit(): void {\n    this.scrollEventSubscription = this.scrollEvent.pipe(debounceTime(100)).subscribe((event: any) => {\n      this.checkScrollPosition(event);\n    });\n  }\n\n  /**\n   * Lifecycle hook that is called when component is destroyed.\n   */\n  public ngOnDestroy(): void {\n    if (this.scrollEventSubscription) {\n      this.scrollEventSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Performs data loading when scrolling when scroll threshold is met. This will be trigger only when load on scroll is enabled.\n   * @param event Target event arguments reference.\n   */\n  public checkScrollPosition(event: any) {\n    const scrollTop = event.target.scrollTop;\n    const scrollHeight = event.target.scrollHeight;\n    const scrollElementHeight = event.target.clientHeight;\n\n    const roundingPixel = 1;\n    const gutterPixel = 1;\n\n    if (\n      scrollTop >= scrollHeight - (1 + this.config.loadViewDistanceRatio) * scrollElementHeight - roundingPixel - gutterPixel &&\n      this.dataStateService.currentOptionCount < this.dataStateService.totalOptionCount &&\n      !this.dataStateService.dataLoading\n    ) {\n      this.dataStateService.dataLoading = true;\n      this.dataStateService.offset = this.dataStateService.offset + this.config.limit;\n      this.eventStateService.dataFetchStream.emit(false);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { ReplaySubject, Observable, of, Subscription } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport { get } from '../../utility/services/object-utility.class';\n\nimport { DropdownQueryResult } from '../models/dropdown-query-result.model';\nimport { DropdownRequestParams } from '../models/dropdown-request-params.model';\n\n/**\n * Dropdown resource service. Dropdown client side data query is handled via this service.\n */\n@Injectable()\nexport class DropdownResourceService<T> {\n  private optionDataStream: ReplaySubject<T[]>;\n  private dataSourceSubscription: Subscription;\n\n  /**\n   * Set source data source.\n   * @param dataSource Data source observable.\n   */\n  public setDataSource(dataSource: Observable<T[]>): void {\n    this.dispose();\n\n    if (this.optionDataStream && !this.optionDataStream.closed) {\n      this.optionDataStream.complete();\n    }\n\n    this.optionDataStream = new ReplaySubject<T[]>(1);\n    this.dataSourceSubscription = dataSource.subscribe((options: T[]) => {\n      this.optionDataStream.next(options);\n    });\n  }\n\n  /**\n   * Query data.\n   * @param params Dropdown request parameters.\n   */\n  public query(params: DropdownRequestParams): Observable<DropdownQueryResult<T>> {\n    return this.optionDataStream.pipe(\n      switchMap((options: T[]) => {\n        let result: T[] = options.slice();\n\n        if (params.filter && params.filter.value) {\n          const value = String(params.filter.value).toLowerCase();\n          result = result.filter((option: T) => {\n            const key = String(get(option, params.filter.key)).toLowerCase();\n            return key.includes(value);\n          });\n        }\n\n        if (params.offset !== undefined) {\n          const offset = params.offset + 1 > result.length ? 0 : params.offset;\n\n          if (params.limit === undefined) {\n            result = result.slice(offset, result.length);\n          } else {\n            result = result.slice(offset, offset + params.limit);\n          }\n        }\n\n        return of({\n          options: result,\n          count: options.length\n        });\n      })\n    );\n  }\n\n  /**\n   * Dispose data source.\n   */\n  public dispose(): void {\n    if (this.dataSourceSubscription) {\n      this.dataSourceSubscription.unsubscribe();\n      this.dataSourceSubscription = null;\n    }\n\n    if (this.optionDataStream && !this.optionDataStream.closed) {\n      this.optionDataStream.complete();\n    }\n  }\n}\n","import {\n  Component,\n  ContentChild,\n  EventEmitter,\n  forwardRef,\n  Injector,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  Renderer2,\n  TemplateRef,\n} from '@angular/core';\n\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { Subscription, Observable, of } from 'rxjs';\nimport { catchError, debounceTime, switchMap } from 'rxjs/operators';\n\nimport { get } from '../../../utility/services/object-utility.class';\n\nimport { DropdownTranslations } from '../../models/dropdown-translations.model';\nimport { DropdownOption } from '../../models/dropdown-option.model';\nimport { DropdownOptionGroup } from '../../models/dropdown-option-group.model';\nimport { DropdownRequestParams } from '../../models/dropdown-request-params.model';\nimport { DropdownDataBindCallback } from '../../models/dropdown-data-bind-callback.model';\nimport { DropdownQueryResult } from '../../models/dropdown-query-result.model';\n\nimport { DropdownSelectMode } from '../../models/dropdown-select-mode.model';\n\nimport { DropdownViewComponent } from '../dropdown-view/dropdown-view.component';\n\nimport { PopoverComponentLoaderFactoryService } from '../../../utility/utility.module';\nimport { DropdownConfigService } from '../../services/dropdown-config.service';\nimport { DropdownDataStateService } from '../../services/dropdown-data-state.service';\nimport { DropdownEventStateService } from '../../services/dropdown-event-state.service';\nimport { DropdownResourceService } from '../../services/dropdown-resource.service';\nimport { ViewPosition } from '../../../utility/models/view-position.model';\nimport { ValidatorService } from '../../../utility/services/validator.service';\n\n/**\n * Dropdown main component.\n */\n@Component({\n  selector: 'ng-dropdown',\n  templateUrl: './dropdown.component.html',\n  providers: [\n    DropdownConfigService,\n    DropdownDataStateService,\n    DropdownEventStateService,\n    DropdownResourceService,\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => DropdownComponent),\n      multi: true\n    }\n  ]\n})\nexport class DropdownComponent implements OnInit, OnDestroy, ControlValueAccessor {\n  private onSelectChangeSubscription: Subscription;\n\n  @ContentChild('ngDropdownLoadingSpinner', { static: true })\n  public loadingSpinnerTemplate: TemplateRef<any>;\n\n  @ContentChild('ngDropdownOption', { static: true })\n  public set optionTemplate(value: TemplateRef<any>) {\n    this.dataStateService.dropdownOptionTemplate = value;\n  }\n\n  @ContentChild('ngDropdownOptionGroupHeader', { static: true })\n  public set optionGroupHeaderTemplate(value: TemplateRef<any>) {\n    this.dataStateService.dropdownOptionGroupHeaderTemplate = value;\n  }\n\n  // Outputs : Event Handlers\n  /**\n   * Dropdown initialize event handler\n   */\n  @Output()\n  public init: EventEmitter<DropdownComponent>;\n\n  /**\n   * Dropdown option select change event handler\n   */\n  @Output()\n  public selectChange: EventEmitter<any[] | any>;\n\n  /**\n   * Dropdown data bind event handler\n   */\n  @Output()\n  public dataBound: EventEmitter<void>;\n\n  // Input - Event handlers\n\n  /**\n   * Set data bind callback. This handler is fired on each data fetch request.\n   */\n  @Input()\n  public set onDataBind(value: DropdownDataBindCallback<any>) {\n    this.dataStateService.onDataBind = value;\n  }\n\n  // Inputs\n\n  /**\n   * Set dropdown loading spinner template reference object. Used by data table component to explicitly pass the template reference.\n   */\n  @Input()\n  public set loadingSpinnerTemplateRef(value: TemplateRef<any>) {\n    this.loadingSpinnerTemplate = value;\n  }\n\n  /**\n   * Set dropdown option template reference. Used by data table component to explicitly pass the template reference.\n   */\n  @Input()\n  public set optionTemplateRef(value: TemplateRef<any>) {\n    this.optionTemplate = value;\n  }\n\n  /**\n   * Set dropdown options group header template reference. Used by data table component to explicitly pass the template reference.\n   */\n  @Input()\n  public set optionGroupHeaderTemplateRef(value: TemplateRef<any>) {\n    this.optionGroupHeaderTemplate = value;\n  }\n\n  /**\n   * Set static dropdown options collection. No need to set data source when static options collection is provided.\n   */\n  @Input()\n  public set options(value: any[]) {\n    if (!value) {\n      return;\n    }\n\n    this.eventStateService.staticDataSourceStream.next(value);\n  }\n\n  /**\n   * Set data source observable. This observable is used to retrieve dropdown options for data binding.\n   */\n  @Input()\n  public set dataSource(source: Observable<any[]>) {\n    this.initDataSource(source);\n  }\n\n  /**\n   * Set dropdown unique identifier.\n   */\n  @Input()\n  public set id(value: string) {\n    if (!ValidatorService.idPatternValidatorExpression.test(value)) {\n      throw Error('Invalid [id] input value. Unique identifier parameter only accept string begin with a letter ([A-Za-z]) and may be followed by any number of letters, digits ([0-9]), hyphens (\"-\"), underscores (\"_\").');\n    }\n\n    this.dataStateService.id = value;\n  }\n\n  /**\n   * Set translation data object. Used to localize table static label text.\n   */\n  @Input()\n  public set translations(value: DropdownTranslations) {\n    this.config.translations = value;\n  }\n\n  /**\n   * Set select option track by field path which is used to uniquely identify options for selection tracking.\n   * This field support object paths expressions 'root[0].nest'.\n   */\n  @Input()\n  public set selectTrackBy(value: string) {\n    this.config.selectTrackBy = value;\n  }\n\n  /**\n   * Set display value track by field path which is used to extract dropdown option display value.\n   * This field support object paths expressions 'root[0].nest'.\n   */\n  @Input()\n  public set displayTrackBy(value: string) {\n    this.config.displayTrackBy = value;\n  }\n\n  /**\n   * Set options group field path which is used to group the dropdown options.\n   * This field support object paths expressions 'root[0].nest'.\n   */\n  @Input()\n  public set groupByField(value: string) {\n    this.config.groupByField = value;\n  }\n\n  /**\n   * Set dropdown option disable state field path which is used to disabled state dropdown options.\n   * This field support object paths expressions 'root[0].nest'.\n   */\n  @Input()\n  public set disabledTrackBy(value: string) {\n    this.config.disabledTrackBy = value;\n  }\n\n  /**\n   * Set selected options collection. These options will be set selected by default on initial load.\n   * Applicable only when multi select mode is enabled.\n   */\n  @Input()\n  public set selectedOptions(value: any[]) {\n    this.dataStateService.selectedOptions = value || [];\n  }\n\n  /**\n   * Set selected option. This option is selected by default on initial load.\n   * Applicable only when single select mode is enabled.\n   */\n  @Input()\n  public set selectedOption(value: any) {\n    this.dataStateService.selectedOption = value;\n  }\n\n  /**\n   * Set number of options to fetch on scroll to bottom action when load on scroll mode is enabled.\n   */\n  @Input()\n  public set limit(value: number) {\n    this.config.limit = value;\n  }\n\n  /**\n   * Set wrap selected options in dropdown view and show the number of options selected instead when\n   * limit is met or exceeded. Applicable only when multi select mode is enabled.\n   */\n  @Input()\n  public set wrapDisplaySelectLimit(value: number) {\n    this.config.wrapDisplaySelectLimit = value;\n  }\n\n  /**\n   * Set infinite scrollable state to load data on demand with scroll motion. Dropdown data fetch call is\n   * initiated with limit and offset when user scroll to bottom hence loading the full data set on init.\n   */\n  @Input()\n  public set loadOnScroll(value: boolean) {\n    this.config.loadOnScroll = value;\n  }\n\n  /**\n   * Set view height ratio to trigger data fetch with infinite scrollable mode.\n   * Higher ratio will will increase the scroll sensitivity.\n   */\n  @Input()\n  public set loadViewDistanceRatio(value: number) {\n    this.config.loadViewDistanceRatio = value;\n  }\n\n  /**\n   * Set option select mode.\n   * - 'multi' : Support selecting multiple options.\n   * - 'single' : Support selecting a single option from options collection.\n   * - 'single-toggle' : Support selecting a single option from options collection. Selection can not be removed but\n   * only toggled by tapping on another option.\n   */\n  @Input()\n  public set selectMode(value: DropdownSelectMode) {\n    this.config.selectMode = value;\n  }\n\n  /**\n   * Show dropdown option search filter text-box if true.\n   */\n  @Input()\n  public set filterable(value: boolean) {\n    this.config.filterable = value;\n  }\n\n  /**\n   * Set default filter value to be applied on initial load. All options are displayed when filter text value is\n   * empty string. Applicable only when dropdown is filterable.\n   */\n  @Input()\n  public set filterText(value: string) {\n    this.dataStateService.filterText = value;\n  }\n\n  /**\n   * Set time based filter debounce to optimize performance and avoid request flooding by reducing the filter\n   * request frequency if true. Applicable only when dropdown filterable state is enabled.\n   */\n  @Input()\n  public set filterDebounce(value: boolean) {\n    this.config.filterDebounce = value;\n  }\n\n  /**\n   * Set filter debounce time in milliseconds. Applicable only when searchDebounce is true.\n   */\n  @Input()\n  public set filterDebounceTime(value: number) {\n    this.config.filterDebounceTime = value;\n  }\n\n  /**\n   * Set load data on component initialize if true.\n   */\n  @Input()\n  public set loadDataOnInit(value: boolean) {\n    this.config.loadDataOnInit = value;\n  }\n\n  /**\n   * Show selected option remove button if true.\n   * Applicable only when multi select mode ios enabled.\n   */\n  @Input()\n  public set showSelectedOptionRemoveButton(value: boolean) {\n    this.config.showSelectedOptionRemoveButton = value;\n  }\n\n  /**\n   * Set show all select options clear button if true.\n   * Applicable only when multi select mode ios enabled.\n   */\n  @Input()\n  public set showClearSelectionButton(value: boolean) {\n    this.config.showClearSelectionButton = value;\n  }\n\n  /**\n   * Set options menu width in pixels.\n   */\n  @Input()\n  public set menuWidth(value: number) {\n    this.config.menuWidth = value;\n  }\n\n  /**\n   * Set options menu height in pixels.\n   */\n  @Input()\n  public set menuHeight(value: number) {\n    this.config.menuHeight = value;\n  }\n\n  /**\n   * Set popup options menu display position relative to dropdown component.\n   * Support 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' values.\n   */\n  @Input()\n  public set menuPosition(value: ViewPosition) {\n    this.config.menuPosition = value;\n  }\n\n  /**\n   * Set dropdown view disabled state.\n   */\n  @Input()\n  public set disabled(value: boolean) {\n    this.dataStateService.disabled = value;\n  }\n\n  /**\n   * Set Close dropdown menu on option select if true.\n   */\n  @Input()\n  public set closeMenuOnSelect(value: boolean) {\n    this.config.closeMenuOnSelect = value;\n  }\n\n  /**\n   * Set show dropdown option select checkbox if true.\n   */\n  @Input()\n  public set showOptionSelectCheckbox(value: boolean) {\n    this.config.showOptionSelectCheckbox = value;\n  }\n\n  /**\n   * Set show dropdown option index checkbox if true.\n   */\n  @Input()\n  public set showOptionIndex(value: boolean) {\n    this.config.showOptionIndex = value;\n  }\n\n  /**\n   * Set show dropdown option TrackBy id checkbox if true.\n   */\n  @Input()\n  public set showOptionTrackBy(value: boolean) {\n    this.config.showOptionTrackBy = value;\n  }\n\n  /**\n   * Multi select option selected item maximum width. Apply ellipsis when selected option display text\n   * exceed the max width.\n   */\n  @Input()\n  public set multiSelectOptionMaxWidth(value: number) {\n    this.config.multiSelectOptionMaxWidth = value;\n  }\n\n  /**\n   * Set first dropdown option selected on data fetch if true.\n   */\n  @Input()\n  public set setFirstOptionSelected(value: boolean) {\n    this.config.setFirstOptionSelected = value;\n  }\n\n  /**\n   * Trigger select change event on init if true.\n   * Can be used to enable selectedOptions or selectedOption associated change trigger.\n   */\n  @Input()\n  public set triggerSelectChangeOnInit(value: boolean) {\n    this.config.triggerSelectChangeOnInit = value;\n  }\n\n  /**\n   * Set trigger select change on explicit model update if true.\n   * Applicable only when form binding is used.\n   */\n  @Input()\n  public set triggerSelectChangeOnModelUpdate(value: boolean) {\n    this.config.triggerSelectChangeOnModelUpdate = value;\n  }\n\n  /**\n   * Set trigger select change on first option select change if true.\n   * Applicable only when setFirstOptionSelected is true.\n   */\n  @Input()\n  public set triggerSelectChangeOnFirstOptionSelect(value: boolean) {\n    this.config.triggerSelectChangeOnFirstOptionSelect = value;\n  }\n\n  /**\n   * Set dynamically calculate dropdown view dimensions relative to dropdown button width.\n   * MenuWith and menuHeight values are ignored when true.\n   */\n  @Input()\n  public set dynamicDimensionCalculation(value: boolean) {\n    this.config.dynamicDimensionCalculation = value;\n  }\n\n  /**\n   * Set dynamic dropdown options view dimensions calculation width ratio relative to dropdown selector.\n   */\n  @Input()\n  public set dynamicWidthRatio(value: number) {\n    this.config.dynamicWidthRatio = value;\n  }\n\n  /**\n   * Set dynamic dropdown options view dimensions calculation height ratio relative to dropdown selector.\n   */\n  @Input()\n  public set dynamicHeightRatio(value: number) {\n    this.config.dynamicHeightRatio = value;\n  }\n\n  /**\n   * Set relative parent element to render dropdown view container.\n   */\n  @Input()\n  public set relativeParentElement(value: HTMLElement) {\n    this.config.relativeParentElement = value;\n  }\n\n  constructor(\n    private componentLoaderFactory: PopoverComponentLoaderFactoryService,\n    private injector: Injector,\n    private eventStateService: DropdownEventStateService,\n    private dropdownResourceService: DropdownResourceService<any>,\n    private renderer: Renderer2,\n    public dataStateService: DropdownDataStateService,\n    public config: DropdownConfigService\n  ) {\n    this.dataStateService.componentLoaderRef = this.componentLoaderFactory.createLoader(this.renderer);\n\n    this.dataBound = this.eventStateService.dataBoundStream;\n    this.selectChange = this.eventStateService.selectChangeStream;\n    this.init = this.eventStateService.initStream;\n  }\n\n  /**\n   * Initialize data source.\n   * @param source Data source stream.\n   */\n  private initDataSource(source: Observable<any>): void {\n    this.dropdownResourceService.setDataSource(source);\n\n    this.dataStateService.onDataBind = (params: DropdownRequestParams): Observable<DropdownQueryResult<any>> => {\n      if (params.hardReload) {\n        this.dropdownResourceService.setDataSource(source);\n      }\n\n      return this.dropdownResourceService.query(params);\n    };\n  }\n\n  /**\n   * Performs dropdown toggle event.\n   * @param event Mouse click event args.\n   * @param element Dropdown button element.\n   */\n  public toggleDropdown(event: MouseEvent, element: HTMLElement): void {\n    const target = event.target as HTMLElement;\n    if (target && target.classList && target.classList.contains('ng-ignore-propagation')) {\n      return;\n    }\n\n    this.dataStateService.componentLoaderRef.toggle(DropdownViewComponent, element, this.injector, {\n      relativeParentElement: this.config.relativeParentElement,\n      position: this.config.menuPosition\n    });\n\n    if (this.config.dynamicDimensionCalculation) {\n      this.config.menuWidth = element.offsetWidth * this.config.dynamicWidthRatio;\n      this.config.menuHeight = element.offsetWidth * this.config.dynamicHeightRatio;\n    }\n  }\n\n  /**\n   * Get options wrapped state.\n   */\n  public get wrapSelectedOptions(): boolean {\n    if (this.config.wrapDisplaySelectLimit !== undefined) {\n      return this.dataStateService.selectedOptions.length > this.config.wrapDisplaySelectLimit;\n    }\n\n    return false;\n  }\n\n  /**\n   * Get wrapped option display text.\n   */\n  public get wrappedOptionDisplayText(): string {\n    return `(${this.dataStateService.selectedOptions.length}) ${this.config.translations.selectedOptionWrapPlaceholder}`;\n  }\n\n  /**\n   * Lifecycle hook that is called when component is destroyed.\n   */\n  public ngOnDestroy(): void {\n    if (this.onSelectChangeSubscription) {\n      this.onSelectChangeSubscription.unsubscribe();\n    }\n\n    this.dataStateService.componentLoaderRef.dispose();\n  }\n\n  /**\n   * Get selected options availability state.\n   */\n  public get hasSelectedOptions(): boolean {\n    if (this.config.selectMode === 'multi') {\n      return !!this.dataStateService.selectedOptions.length;\n    }\n\n    return !!this.dataStateService.selectedOption;\n  }\n\n  /**\n   * Trigger select change.\n   */\n  public triggerSelectChange(): void {\n    if (this.config.selectMode === 'multi') {\n      this.eventStateService.selectChangeStream.emit(this.dataStateService.selectedOptions);\n    } else {\n      this.eventStateService.selectChangeStream.emit(this.dataStateService.selectedOption);\n    }\n  }\n\n  /**\n   * Clear selected options.\n   */\n  public clearSelectedOptions(): void {\n    if (this.config.selectMode === 'multi') {\n      this.dataStateService.selectedOptions = [];\n      this.eventStateService.selectChangeStream.emit(this.dataStateService.selectedOptions);\n    } else {\n      this.dataStateService.selectedOption = undefined;\n      this.eventStateService.selectChangeStream.emit(this.dataStateService.selectedOption);\n    }\n  }\n\n  /**\n   * Set disabled state.\n   * ControlValueAccessor implementation.\n   * @param isDisabled True if disabled.\n   */\n  public setDisabledState?(isDisabled: boolean): void {\n    this.dataStateService.disabled = isDisabled;\n  }\n\n  /**\n   * Called when value selected value gets updated.\n   * ControlValueAccessor implementation.\n   * @param value Selected value.\n   */\n  public writeValue(value: any): void {\n    if (this.config.selectMode === 'multi') {\n      this.dataStateService.selectedOptions = value || [];\n    } else {\n      this.dataStateService.selectedOption = value;\n    }\n\n    if (this.config.triggerSelectChangeOnModelUpdate) {\n      this.triggerSelectChange();\n    }\n  }\n\n  /**\n   * Register on change event.\n   * ControlValueAccessor implementation.\n   * @param onSelectChange On select change callback function.\n   */\n  public registerOnChange(onSelectChange: (value: any[] | any) => void): void {\n    this.onSelectChangeSubscription = this.selectChange.subscribe(value => {\n      onSelectChange(value);\n    });\n  }\n\n  /**\n   * Register on touched event.\n   * ControlValueAccessor implementation.\n   * @param fn Function reference.\n   */\n  public registerOnTouched(fn: any): void {\n    // TODO: Implement touch event handler\n  }\n\n  /**\n   * Lifecycle hook that is called when component is initialized.\n   */\n  public ngOnInit(): void {\n    if (!this.dataStateService.id) {\n      throw Error('Missing required parameter value for [id] input.');\n    }\n\n    if (!this.dataStateService.onDataBind) {\n      this.dataSource = this.eventStateService.staticDataSourceStream;\n    }\n\n    this.initDataFetchEvent();\n\n    if (this.config.loadDataOnInit) {\n      this.eventStateService.dataFetchStream.emit(false);\n    }\n\n    if (this.config.triggerSelectChangeOnInit) {\n      this.triggerSelectChange();\n    }\n\n    this.eventStateService.initStream.emit(this);\n  }\n\n  /**\n   * Map source data object to dropdown option model.\n   * @param option Source dropdown option.\n   * @param index Current index.\n   */\n  private mapDropdownOption(option: any, index: number): DropdownOption {\n    const id = get(option, this.config.selectTrackBy);\n\n    return {\n      disabled: get(option, this.config.disabledTrackBy),\n      id,\n      index: index + this.dataStateService.offset + 1,\n      option,\n      text: get(option, this.config.displayTrackBy)\n    };\n  }\n\n  /**\n   *\n   * Set dropdown options data.\n   * @param queryResult Query result object reference.\n   */\n  private setDropdownOptions(queryResult: DropdownQueryResult<any>) {\n    if (this.config.groupByField) {\n      this.dataStateService.dropdownOptionGroups = queryResult.options.reduce(\n        (accumulator: DropdownOptionGroup[], option: any, index: number) => {\n          const groupFieldValue = get(option, this.config.groupByField);\n          const currentGroup = accumulator.find((group: DropdownOptionGroup) => group.groupName === groupFieldValue);\n\n          if (currentGroup) {\n            currentGroup.options.push(this.mapDropdownOption(option, index));\n          } else {\n            accumulator.push({\n              groupName: groupFieldValue,\n              options: [this.mapDropdownOption(option, index)]\n            });\n          }\n\n          return accumulator;\n        },\n        this.config.loadOnScroll && this.dataStateService.offset > 0 ? this.dataStateService.dropdownOptionGroups : []\n      );\n    } else {\n      this.dataStateService.dropdownOptions = queryResult.options.reduce(\n        (accumulator: DropdownOption[], option: any, index: number) => {\n          accumulator.push(this.mapDropdownOption(option, index));\n          return accumulator;\n        },\n        this.config.loadOnScroll && this.dataStateService.offset > 0 ? this.dataStateService.dropdownOptions : []\n      );\n    }\n\n    if (this.config.setFirstOptionSelected && queryResult.options.length) {\n      if (this.config.selectMode === 'multi') {\n        this.dataStateService.selectedOptions = [queryResult.options[0]];\n      } else {\n        this.dataStateService.selectedOption = queryResult.options[0];\n      }\n\n      if (this.config.triggerSelectChangeOnFirstOptionSelect) {\n        this.triggerSelectChange();\n      }\n    }\n\n    this.dataStateService.totalOptionCount = queryResult.count;\n    this.dataStateService.currentOptionCount += queryResult.options.length;\n  }\n\n  /**\n   * On after data bind event handler.\n   * @param queryResult Query result object reference.\n   */\n  private onAfterDataBind(queryResult: DropdownQueryResult<any>): void {\n    this.setDropdownOptions(queryResult);\n    this.dataStateService.dataLoading = false;\n    this.eventStateService.dataBoundStream.emit();\n  }\n\n  /**\n   * Fetch query results.\n   * @param hardReload Hard reload state.\n   */\n  private fetchQueryResults(hardReload: boolean): Observable<DropdownQueryResult<any>> {\n    this.dataStateService.dataLoading = true;\n\n    if (hardReload) {\n      this.dataStateService.offset = 0;\n      this.dataStateService.filterText = '';\n    }\n\n    const requestParams: DropdownRequestParams = {\n      hardReload\n    };\n\n    if (this.config.loadOnScroll) {\n      requestParams.limit = this.config.limit;\n      requestParams.offset = this.dataStateService.offset;\n    }\n\n    if (this.config.filterable) {\n      requestParams.filter = {\n        key: this.config.displayTrackBy,\n        value: this.dataStateService.filterText\n      };\n    }\n\n    return this.dataStateService.onDataBind(requestParams);\n  }\n\n  /**\n   * Initialize data fetch event.\n   */\n  private initDataFetchEvent(): void {\n    const noop = {\n      options: [],\n      count: 0\n    };\n\n    this.eventStateService.dataFetchStream\n      .pipe(\n        debounceTime(20),\n        switchMap((hardReload: boolean) => this.fetchQueryResults(hardReload)),\n        catchError(() => {\n          return of(noop);\n        })\n      )\n      .subscribe(\n        (queryResult: DropdownQueryResult<any>) => {\n          this.onAfterDataBind(queryResult);\n        },\n        () => {\n          this.onAfterDataBind(noop);\n        }\n      );\n  }\n\n  /**\n   * Trigger explicit data fetch.\n   * @param hardReload Hard reload state.\n   */\n  public fetchData(hardReload: boolean = false): void {\n    this.eventStateService.dataFetchStream.emit(hardReload);\n  }\n\n  /**\n   * On select option remove event handler.\n   * @param index Selected option index.\n   */\n  public onSelectOptionRemove(index: number): void {\n    this.dataStateService.selectedOptions.splice(index, 1);\n    this.eventStateService.selectChangeStream.emit(this.dataStateService.selectedOptions);\n  }\n\n  /**\n   * Close dropdown options menu.\n   */\n  public close(): void {\n    this.dataStateService.componentLoaderRef.hide();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\n\nimport { Subject, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport { DropdownConfigService } from '../../services/dropdown-config.service';\nimport { DropdownDataStateService } from '../../services/dropdown-data-state.service';\nimport { DropdownEventStateService } from '../../services/dropdown-event-state.service';\n\n/**\n * Dropdown filter component.\n */\n@Component({\n  selector: 'ng-dropdown-filter',\n  templateUrl: './dropdown-filter.component.html'\n})\nexport class DropdownFilterComponent implements OnDestroy, OnInit {\n  private dataFilterStream = new Subject();\n  private dataFilterSubscription: Subscription;\n\n  constructor(\n    public config: DropdownConfigService,\n    public dataStateService: DropdownDataStateService,\n    public eventStateService: DropdownEventStateService\n  ) {}\n\n  /**\n   * Clear applied filter value.\n   */\n  public clearFilter(): void {\n    this.dataStateService.offset = 0;\n    this.dataStateService.filterText = '';\n    this.eventStateService.dataFetchStream.emit(false);\n  }\n\n  /**\n   * Filter key up event handler.\n   */\n  public filterKeyUp(): void {\n    if (this.config.filterDebounce) {\n      this.dataFilterStream.next(this.dataStateService.filterText);\n    } else {\n      this.dataStateService.offset = 0;\n      this.eventStateService.dataFetchStream.emit(false);\n    }\n  }\n\n  /**\n   * Initialize filter stream debounce.\n   */\n  private initFilterDebounceEvent(): void {\n    this.dataFilterSubscription = this.dataFilterStream.pipe(debounceTime(this.config.filterDebounceTime)).subscribe(() => {\n      this.dataStateService.offset = 0;\n      this.eventStateService.dataFetchStream.emit(false);\n    });\n  }\n\n  /**\n   * Lifecycle hook that is called when component is destroyed.\n   */\n  public ngOnDestroy(): void {\n    if (this.dataFilterSubscription) {\n      this.dataFilterSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Lifecycle hook that is called when component is initialized.\n   */\n  public ngOnInit(): void {\n    this.initFilterDebounceEvent();\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { get } from '../../../utility/services/object-utility.class';\n\nimport { DropdownOption } from '../../models/dropdown-option.model';\n\nimport { DropdownDataStateService } from '../../services/dropdown-data-state.service';\nimport { DropdownConfigService } from '../../services/dropdown-config.service';\nimport { DropdownEventStateService } from '../../services/dropdown-event-state.service';\n\n/**\n * Dropdown options list component.\n */\n@Component({\n  selector: 'ng-dropdown-options',\n  templateUrl: './dropdown-options.component.html'\n})\nexport class DropdownOptionsComponent {\n  constructor(\n    public config: DropdownConfigService,\n    public dataStateService: DropdownDataStateService,\n    private eventStateService: DropdownEventStateService\n  ) {}\n\n  /**\n   * Unique data row tracking callback.\n   * @param index Current index.\n   * @param option Dropdown option reference.\n   */\n  public optionTrackBy(index: number, option: DropdownOption): number {\n    return option.index;\n  }\n\n  /**\n   * Get selected state by option identifier.\n   * @param id Option select track by identifier.\n   */\n  public getSelectedState(id: any): boolean {\n    if (this.config.selectMode === 'multi') {\n      return this.dataStateService.selectedOptions.some((option: any) => {\n        return get(option, this.config.selectTrackBy) === id;\n      });\n    }\n\n    return get(this.dataStateService.selectedOption, this.config.selectTrackBy) === id;\n  }\n\n  /**\n   * Option click event handler.\n   * @param option Option object reference.\n   * @param event Click event arguments object.\n   */\n  public onOptionClick(option: DropdownOption, event: MouseEvent): void {\n    const target = event.target as HTMLElement;\n    if (target && target.classList && target.classList.contains('ng-ignore-propagation')) {\n      return;\n    }\n\n    this.toggleOptionSelectedState(option);\n  }\n\n  /**\n   * Option checkbox click event handler.\n   * @param option Option object reference.\n   * @param event Click event arguments object.\n   */\n  public onOptionCheckboxClick(option: DropdownOption, event: MouseEvent): void {\n    // Prevent single mode checkbox getting unchecked on tapping already selected.\n    if (this.config.selectMode === 'single') {\n      const selectedId = get(this.dataStateService.selectedOption, this.config.selectTrackBy);\n      const id = get(option.option, this.config.selectTrackBy);\n      if (selectedId === id) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /**\n   * Toggle option select state and update selected items depending on select mode.\n   * @param option Option object reference.\n   */\n  public toggleOptionSelectedState(option: DropdownOption): void {\n    const id = get(option.option, this.config.selectTrackBy);\n\n    switch (this.config.selectMode) {\n      case 'multi': {\n        const selectedIndex = this.dataStateService.selectedOptions.findIndex((value: any) => {\n          return get(value, this.config.selectTrackBy) === id;\n        });\n\n        if (selectedIndex < 0) {\n          this.dataStateService.selectedOptions.push(option.option);\n        } else {\n          this.dataStateService.selectedOptions.splice(selectedIndex, 1);\n        }\n\n        this.eventStateService.selectChangeStream.emit(this.dataStateService.selectedOptions);\n        break;\n      }\n      case 'single-toggle': {\n        if (get(this.dataStateService.selectedOption, this.config.selectTrackBy) === id) {\n          this.dataStateService.selectedOption = undefined;\n        } else {\n          this.dataStateService.selectedOption = option.option;\n        }\n\n        this.eventStateService.selectChangeStream.emit(this.dataStateService.selectedOption);\n        break;\n      }\n      case 'single': {\n        const selectedId = get(this.dataStateService.selectedOption, this.config.selectTrackBy);\n        this.dataStateService.selectedOption = option.option;\n\n        if (selectedId !== id) {\n          this.eventStateService.selectChangeStream.emit(this.dataStateService.selectedOption);\n        }\n        break;\n      }\n    }\n\n    if (this.config.closeMenuOnSelect) {\n      this.dataStateService.componentLoaderRef.hide();\n    }\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { DropdownConfig } from './models/dropdown-config.model';\n\nimport { DropdownComponent } from './components/dropdown/dropdown.component';\nimport { DropdownViewComponent } from './components/dropdown-view/dropdown-view.component';\nimport { DropdownFilterComponent } from './components/dropdown-filter/dropdown-filter.component';\nimport { DropdownOptionsComponent } from './components/dropdown-options/dropdown-options.component';\n\nimport { DROPDOWN_CONFIG } from './services/dropdown-config.service';\n\nimport { UtilityModule } from '../utility/utility.module';\n\nconst COMPONENTS = [DropdownComponent, DropdownViewComponent, DropdownFilterComponent, DropdownOptionsComponent];\n\n/**\n * Module representing dropdown component.\n */\n@NgModule({\n  imports: [CommonModule, FormsModule, UtilityModule.forRoot()],\n  declarations: [...COMPONENTS],\n  exports: [DropdownComponent],\n  entryComponents: [DropdownViewComponent]\n})\nexport class DropdownModule {\n  /**\n   * Set module root configuration overrides.\n   * @param dropdownConfig Dropdown configuration object.\n   * @return Module with custom providers.\n   */\n  static forRoot(dropdownConfig?: DropdownConfig): ModuleWithProviders {\n    return {\n      ngModule: DropdownModule,\n      providers: [\n        {\n          provide: DROPDOWN_CONFIG,\n          useValue: dropdownConfig\n        }\n      ]\n    };\n  }\n}\n\nexport { DropdownTranslations } from './models/dropdown-translations.model';\nexport { DropdownOption } from './models/dropdown-option.model';\nexport { DropdownRequestParams } from './models/dropdown-request-params.model';\nexport { DropdownFilter } from './models/dropdown-filter.model';\nexport { DropdownDataBindCallback } from './models/dropdown-data-bind-callback.model';\nexport { DropdownQueryResult } from './models/dropdown-query-result.model';\nexport { DropdownConfig } from './models/dropdown-config.model';\n\nexport { DropdownSelectMode } from './models/dropdown-select-mode.model';\n\nexport { DropdownComponent } from './components/dropdown/dropdown.component';\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { DataTableConfig } from './models/data-table-config.model';\n\nimport { DataTableColumnComponent } from './components/data-table-column/data-table-column.component';\n\n// tslint:disable-next-line\nimport { DataTableColumnFilterHeaderComponent } from './components/data-table-column-filter-header/data-table-column-filter-header.component';\n// tslint:disable-next-line\nimport { DataTableColumnFilterTemplateComponent } from './components/data-table-column-filter-template/data-table-column-filter-template.component';\nimport { DataTableColumnTitleHeaderComponent } from './components/data-table-column-title-header/data-table-column-title-header.component';\nimport { DataTableHeaderComponent } from './components/data-table-header/data-table-header.component';\nimport { DataTableColGroupComponent } from './components/data-table-col-group/data-table-col-group.component';\nimport { DataTablePaginationComponent } from './components/data-table-pagination/data-table-pagination.component';\nimport { DataTableComponent } from './components/data-table/data-table.component';\nimport { DataTableBodyComponent } from './components/data-table-body/data-table-body.component';\nimport { DataTableColumnSelectorComponent } from './components/data-table-column-selector/data-table-column-selector.component';\nimport { DataTableNoDataBodyComponent } from './components/data-table-no-data-body/data-table-no-data-body.component';\nimport { DataTableHeadComponent } from './components/data-table-head/data-table-head.component';\nimport { DataTableLoadingSpinnerComponent } from './components/data-table-loading-spinner/data-table-loading-spinner.component';\n\nimport { DATA_TABLE_CONFIG } from './services/data-table-config.service';\n\nimport { ScrollPositionDirective } from './directives/scroll-position.directive';\nimport { ScrollElementDirective } from './directives/scroll-element.directive';\nimport { ElementWidthDirective } from './directives/element-width.directive';\n\nimport { DropdownModule } from '../dropdown/dropdown.module';\nimport { UtilityModule } from '../utility/utility.module';\n\nconst COMPONENTS = [\n  DataTableHeaderComponent,\n  DataTableColumnComponent,\n  DataTableColGroupComponent,\n  DataTableBodyComponent,\n  DataTablePaginationComponent,\n  DataTableComponent,\n  DataTableColumnSelectorComponent,\n  DataTableNoDataBodyComponent,\n  DataTableColumnFilterHeaderComponent,\n  DataTableColumnFilterTemplateComponent,\n  DataTableColumnTitleHeaderComponent,\n  DataTableHeadComponent,\n  DataTableLoadingSpinnerComponent\n];\n\nconst DIRECTIVES = [ScrollPositionDirective, ScrollElementDirective, ElementWidthDirective];\n\nconst PROVIDERS = [];\n\n/**\n * Module representing data table component.\n */\n@NgModule({\n  imports: [CommonModule, FormsModule, UtilityModule.forRoot(), DropdownModule.forRoot()],\n  declarations: [...COMPONENTS, ...DIRECTIVES],\n  providers: [...PROVIDERS],\n  exports: [DataTableColumnComponent, DataTableComponent],\n  entryComponents: [DataTableColumnSelectorComponent]\n})\nexport class DataTableModule {\n  /**\n   * Set module root configuration overrides.\n   * @param dataTableConfig Data table configuration object.\n   * @return Module with custom providers.\n   */\n  public static forRoot(dataTableConfig?: DataTableConfig): ModuleWithProviders {\n    return {\n      ngModule: DataTableModule,\n      providers: [\n        {\n          provide: DATA_TABLE_CONFIG,\n          useValue: dataTableConfig\n        }\n      ]\n    };\n  }\n}\n\n// exports\nexport { DataTableCellBindEventArgs } from './models/data-table-cell-bind-event-args.model';\nexport { DataTableQueryResult } from './models/data-table-query-result.model';\nexport { DataTableQueryField } from './models/data-table-query-field.model';\nexport { DataTableFilterOption } from './models/data-table-filter-option.model';\nexport { DataTableCellClickEventArgs } from './models/data-table-cell-click-event-args.model';\nexport { DataTableHeaderClickEventArgs } from './models/data-table-header-click-event-args.model';\nexport { DataTableDoubleClickEventArgs } from './models/data-table-double-click-event-args.model';\nexport { DataTableRowClickEventArgs } from './models/data-table-row-click-event-args.model';\nexport { DataTableScrollPoint } from './models/data-table-scroll-point.model';\nexport { DataTableRow } from './models/data-table-row.model';\nexport { DataTableRequestParams } from './models/data-table-request-params.model';\nexport { DataTableTranslations } from './models/data-table-translations.model';\nexport { DataTableDynamicRowSpanExtractorCallback } from './models/data-table-group-field-extractor-callback.model';\nexport { DataTableFilterValueExtractCallback } from './models/data-table-filter-value-extract-callback.model';\nexport { DataTableFilterFieldMapperCallback } from './models/data-table-filter-field-mapper-callback.model';\nexport { DataTableFilterExpressionCallback } from './models/data-table-filter-expression-callback.model';\nexport { DataTableCellColorRenderCallback } from './models/data-table-cell-color-render-callback.model';\nexport { DataTableSelectMode } from './models/data-table-select-mode.model';\nexport { DataTableDataBindCallback } from './models/data-table-data-bind-callback.model';\n\nexport { DataTableSortOrder } from './models/data-table-sort-order.model';\nexport { DataTableStorageMode } from './models/data-table-storage-mode.model';\nexport { DataFetchMode } from './models/data-fetch-mode.enum';\n\nexport { DataTableComponent } from './components/data-table/data-table.component';\nexport { DataTableColumnComponent } from './components/data-table-column/data-table-column.component';\n","import { HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { HttpRequestOptions } from '../models/http-request-options.model';\nimport { RequestOptions } from '../models/request-options.model';\nimport { ResourceOptions } from '../models/resource-options.model';\n\n/**\n * Request parameter mapper service.\n */\n@Injectable()\nexport class RequestParamMapperService {\n  /**\n   * Map HTTP query parameters by request options.\n   * @param requestOptions Request options object reference.\n   */\n  public mapQueryParams(requestOptions: HttpRequestOptions): HttpParams {\n    if (requestOptions && requestOptions.params) {\n      if (requestOptions.params instanceof HttpParams) {\n        return requestOptions.params;\n      } else {\n        let queryParams = new HttpParams();\n        for (const key in requestOptions.params) {\n          if (requestOptions.params.hasOwnProperty(key)) {\n            queryParams = queryParams.set(key, requestOptions.params[key]);\n          }\n        }\n\n        return queryParams;\n      }\n    } else {\n      return new HttpParams();\n    }\n  }\n\n  /**\n   * Map request options by http request data.\n   * @param options Request options object reference.\n   */\n  public mapRequestOptions(options: string|ResourceOptions): RequestOptions {\n    const requestOptions: RequestOptions = {\n      url: '',\n      options: {}\n    };\n\n    if (typeof options === 'object') {\n      requestOptions.options = options;\n      requestOptions.url = options.url;\n    } else {\n      requestOptions.url = options;\n    }\n\n    return requestOptions;\n  }\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * Utility config service which holds all the global configurations of utility which can be overridden while\n * importing the module.\n */\n@Injectable()\nexport class ResourceUtilityConfigService {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { RequestParamMapperService } from './services/request-param-mapper.service';\nimport { ResourceUtilityConfigService } from './services/resource-utility-config.service';\n\n\nconst PROVIDERS = [RequestParamMapperService];\n\n/**\n * Resource utility module.\n */\n@NgModule({\n  imports: [],\n  providers: [...PROVIDERS]\n})\nexport class ResourceUtilityModule {\n  /**\n   * Set module root configuration overrides.\n   * @return Module with custom providers.\n   */\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: ResourceUtilityModule,\n      providers: [ResourceUtilityConfigService]\n    };\n  }\n}\n\nexport { ResourceOptions } from './models/resource-options.model';\nexport { RequestOptions } from './models/request-options.model';\nexport { HttpRequestOptions } from './models/http-request-options.model';\n\nexport { RequestParamMapperService };\n","import { Injectable } from '@angular/core';\n\n/**\n * Data table resource config service holds all the global configurations of data table resource which can be overridden\n * while importing the module\n */\n@Injectable()\nexport class DataTableResourceConfigService {}\n","import { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\n\nimport { DataTableRequestParams } from '../../data-table/models/data-table-request-params.model';\nimport { DataTableQueryResult } from '../../data-table/models/data-table-query-result.model';\nimport { DataTableQueryField } from '../../data-table/models/data-table-query-field.model';\nimport { DataTableDataBindCallback } from '../../data-table/models/data-table-data-bind-callback.model';\nimport { DataTableFilterValueExtractCallback } from '../../data-table/models/data-table-filter-value-extract-callback.model';\nimport { DataTableFilterOption } from '../../data-table/models/data-table-filter-option.model';\nimport { HttpRequestOptions } from '../../resource-utility/models/http-request-options.model';\nimport { ResourceOptions } from '../../resource-utility/models/resource-options.model';\n\nimport { DataTableColumnComponent } from '../../data-table/components/data-table-column/data-table-column.component';\n\nimport { RequestParamMapperService } from '../../resource-utility/services/request-param-mapper.service';\n\n/**\n * Data table HTTP data fetch service.\n */\nexport class DataTableHttpDataFetchService<T> {\n  constructor(private http: HttpClient, public requestParamMapperService: RequestParamMapperService) {}\n\n  /**\n   * Get data bind event handler.\n   * @param options Request options or resource path.\n   * @param mapper Response data mapper callback. map source stream format to data table expected stream or apply additional formatting.\n   * @return Data table bind event handler.\n   */\n  public onDataBind(\n    options: string|ResourceOptions,\n    mapper?: <Q>(response: Observable<Q>) => Observable<DataTableQueryResult<T>>,\n  ): DataTableDataBindCallback<T> {\n    return (params?: DataTableRequestParams): Observable<DataTableQueryResult<T>> => {\n      const requestOptions = this.requestParamMapperService.mapRequestOptions(options);\n      let queryParams = this.requestParamMapperService.mapQueryParams(requestOptions.options);\n\n      if (params) {\n        if (params.limit !== undefined) {\n          queryParams = queryParams.set('limit', String(params.limit));\n        }\n\n        if (params.offset !== undefined) {\n          queryParams = queryParams.set('offset', String(params.offset));\n        }\n\n        params.fields.forEach((column: DataTableQueryField) => {\n          let query = '';\n\n          if (column.filterable) {\n            if (typeof column.filterValue === 'string') {\n              if (column.filterValue !== '') {\n                query += column.filterValue;\n              }\n            } else if (Array.isArray(column.filterValue) && column.filterValue.length) {\n              query += column.filterValue.join(',');\n            }\n          }\n\n          if (column.sortable && column.sortOrder !== '') {\n            query += `|${column.sortOrder}|${column.sortPriority}`;\n          }\n\n          if (query) {\n            queryParams = queryParams.set(column.field, query);\n          }\n        });\n\n        requestOptions.options.params = queryParams;\n\n        const resource = this.http.get<any>(requestOptions.url, requestOptions.options as any) as Observable<any>;\n\n        if (mapper) {\n          return mapper(resource);\n        }\n\n        return resource;\n      }\n    };\n  }\n\n  /**\n   * Get filter value extract event handler.\n   * @param options Request options or resource path.\n   * @param mapper Response data mapper callback. map source stream format to data table expected stream or apply additional formatting.\n   * @return Data table filter options event handler.\n   */\n  public onFilterValueExtract(\n    options: string|HttpRequestOptions,\n    mapper?: <Q>(response: Observable<Q>) => Observable<DataTableFilterOption[]>,\n  ): DataTableFilterValueExtractCallback {\n    return (column: DataTableColumnComponent): Observable<DataTableFilterOption[]> => {\n      const requestOptions = this.requestParamMapperService.mapRequestOptions(options);\n      let queryParams = this.requestParamMapperService.mapQueryParams(requestOptions.options);\n\n      const filterField = column.filterField || column.field;\n      queryParams = queryParams.set('field', filterField);\n\n      const resource = this.http.get<any>(requestOptions.url, { params: queryParams, ...requestOptions }) as Observable<any>;\n\n      if (mapper) {\n        return mapper(resource);\n      }\n\n      return resource;\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { DataTableHttpDataFetchService } from './data-table-http-data-fetch.service';\n\nimport { RequestParamMapperService } from '../../resource-utility/services/request-param-mapper.service';\n\n/**\n * Data table HTTP data fetch service factory.\n */\n@Injectable()\nexport class DataTableHttpResourceFactoryService {\n  constructor(private http: HttpClient, public requestParamMapperService: RequestParamMapperService) {\n  }\n\n  /**\n   * Get new data table HTTP data fetch service instance.\n   */\n  public getResourceProvider<T>(): DataTableHttpDataFetchService<T> {\n    return new DataTableHttpDataFetchService<T>(this.http, this.requestParamMapperService);\n  }\n}\n","import { Subscription, Subject, Observable } from 'rxjs';\nimport { webSocket, WebSocketSubject, WebSocketSubjectConfig } from 'rxjs/webSocket';\n\nimport { DataTableRequestParams } from '../../data-table/models/data-table-request-params.model';\nimport { DataTableQueryResult } from '../../data-table/models/data-table-query-result.model';\nimport { DataTableDataBindCallback } from '../../data-table/models/data-table-data-bind-callback.model';\n\n/**\n * Data table web socket data fetch service.\n */\nexport class DataTableWebsocketDataFetchService<T> {\n  private socket: WebSocketSubject<DataTableQueryResult<T>>;\n  private subject: Subject<DataTableQueryResult<T>>;\n  private socketSubscription: Subscription;\n\n  constructor() {}\n\n  /**\n   * Initialize web socket connection.\n   * @param config Socket configuration parameters.\n   */\n  public init(config?: WebSocketSubjectConfig<DataTableQueryResult<T>>): void {\n    this.socket = webSocket<any>(config);\n    this.subject = new Subject<DataTableQueryResult<T>>();\n  }\n\n  /**\n   * Get socket stream reference.\n   */\n  public get socketStream(): WebSocketSubject<DataTableQueryResult<T>> {\n    return this.socket;\n  }\n\n  /**\n   * Web socket data bind event handler.\n   * Must call init prior to calling this function.\n   * @param mapper Response data mapper callback. map source stream format to data table expected stream or apply additional formatting.\n   * @return Data table bind event handler.\n   */\n  public onDataBind(mapper?: <Q>(source: Observable<Q>) => Observable<DataTableQueryResult<T>>): DataTableDataBindCallback<T> {\n    if (!this.socket) {\n      throw Error('Initialize socket data source before data bind.');\n    }\n\n    this.socketSubscription = this.socket.subscribe(this.subject);\n\n    return (params?: DataTableRequestParams): Observable<DataTableQueryResult<T>> => {\n      if (params) {\n        this.socket.next({\n          type: 'data-fetch',\n          offset: params.offset,\n          limit: params.limit,\n          fields: params.fields\n        } as any);\n\n        if (mapper) {\n          return mapper(this.subject);\n        }\n\n        return this.subject;\n      }\n    };\n  }\n\n  /**\n   * Dispose web socket connection.\n   */\n  public dispose(): void {\n    if (this.socket) {\n      this.socket.complete();\n    }\n\n    if (this.socketSubscription) {\n      this.socketSubscription.unsubscribe();\n    }\n\n    if (this.subject) {\n      this.subject.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { DataTableWebsocketDataFetchService } from './data-table-websocket-data-fetch.service';\n\n/**\n * Data table web socket data fetch service factory.\n */\n@Injectable()\nexport class DataTableWebsocketResourceFactoryService {\n\n  /**\n   * Get new data table websocket fetch service instance.\n   */\n  public getResourceProvider<T>(): DataTableWebsocketDataFetchService<T> {\n    return new DataTableWebsocketDataFetchService<T>();\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { ResourceUtilityModule } from '../resource-utility/resource-utility.module';\n\nimport { DataTableHttpDataFetchService } from './services/data-table-http-data-fetch.service';\nimport { DataTableWebsocketDataFetchService } from './services/data-table-websocket-data-fetch.service';\nimport { DataTableResourceConfigService } from './services/data-table-resource-config.service';\nimport { DataTableHttpResourceFactoryService } from './services/data-table-http-resource-factory.service';\nimport { DataTableWebsocketResourceFactoryService } from './services/data-table-websocket-resource-factory.service';\n\nconst PROVIDERS = [DataTableHttpResourceFactoryService, DataTableWebsocketResourceFactoryService];\n\n/**\n * Data table data source module.\n */\n@NgModule({\n  imports: [ResourceUtilityModule],\n  providers: [...PROVIDERS]\n})\nexport class DataTableResourceModule {\n  /**\n   * Set module root configuration overrides\n   * @return Module with custom providers\n   */\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DataTableResourceModule,\n      providers: [DataTableResourceConfigService]\n    };\n  }\n}\n\nexport { DataTableHttpDataFetchService } from './services/data-table-http-data-fetch.service';\nexport { DataTableHttpResourceFactoryService };\n\nexport { DataTableWebsocketDataFetchService } from './services/data-table-websocket-data-fetch.service';\nexport { DataTableWebsocketResourceFactoryService };\n","import { Injectable } from '@angular/core';\n\n/**\n * Dropdown resource config service which holds all the global configurations of dropdown resource which can be overridden\n * while importing the module.\n */\n@Injectable()\nexport class DropdownResourceConfigService {}\n","import { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\n\nimport { DropdownDataBindCallback } from '../../dropdown/models/dropdown-data-bind-callback.model';\nimport { DropdownQueryResult } from '../../dropdown/models/dropdown-query-result.model';\nimport { DropdownRequestParams } from '../../dropdown/models/dropdown-request-params.model';\n\nimport { RequestParamMapperService } from '../../resource-utility/services/request-param-mapper.service';\nimport { ResourceOptions } from '../../resource-utility/models/resource-options.model';\n\n/**\n * Dropdown HTTP data fetch service.\n */\nexport class DropdownHttpDataFetchService<T> {\n  constructor(private http: HttpClient, public requestParamMapperService: RequestParamMapperService) {}\n\n  /**\n   * Get data bind event handler.\n   * @param options Request options or resource path.\n   * @param mapper Response data mapper callback. map source stream format to data table expected stream or apply additional formatting.\n   * @return Dropdown bind event handler.\n   */\n  public onDataBind(\n    options: string|ResourceOptions,\n    mapper?: <Q>(response: Observable<Q>) => Observable<DropdownQueryResult<T>>,\n  ): DropdownDataBindCallback<T> {\n    return (params?: DropdownRequestParams): Observable<DropdownQueryResult<T>> => {\n      const requestOptions = this.requestParamMapperService.mapRequestOptions(options);\n      let queryParams = this.requestParamMapperService.mapQueryParams(requestOptions.options);\n\n      if (params) {\n        if (params.limit !== undefined) {\n          queryParams = queryParams.set('limit', String(params.limit));\n        }\n\n        if (params.offset !== undefined) {\n          queryParams = queryParams.set('offset', String(params.offset));\n        }\n\n        if (params.filter && params.filter.value) {\n          queryParams = queryParams.set('field', params.filter.key);\n          queryParams = queryParams.set('filter', params.filter.value);\n        }\n\n        requestOptions.options.params = queryParams;\n\n        const resource = this.http.get<any>(requestOptions.url, requestOptions.options as any) as Observable<any>;\n\n        if (mapper) {\n          return mapper(resource);\n        }\n\n        return resource;\n      }\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { DropdownHttpDataFetchService } from './dropdown-http-data-fetch.service';\nimport { RequestParamMapperService } from '../../resource-utility/services/request-param-mapper.service';\n\n/**\n * Dropdown HTTP data fetch service factory.\n */\n@Injectable()\nexport class DropdownHttpResourceFactoryService {\n  constructor(private http: HttpClient, public requestParamMapperService: RequestParamMapperService) {\n  }\n\n  /**\n   * Get new dropdown HTTP data fetch service instance.\n   */\n  public getResourceProvider<T>(): DropdownHttpDataFetchService<T> {\n    return new DropdownHttpDataFetchService<T>(this.http, this.requestParamMapperService);\n  }\n}\n","import { Subscription, Subject, Observable } from 'rxjs';\nimport { webSocket, WebSocketSubject, WebSocketSubjectConfig } from 'rxjs/webSocket';\n\nimport { DropdownDataBindCallback } from '../../dropdown/models/dropdown-data-bind-callback.model';\nimport { DropdownQueryResult } from '../../dropdown/models/dropdown-query-result.model';\nimport { DropdownRequestParams } from '../../dropdown/models/dropdown-request-params.model';\n\n/**\n * Dropdown websocket data fetch service.\n */\nexport class DropdownWebsocketDataFetchService<T> {\n  private socket: WebSocketSubject<DropdownQueryResult<T>>;\n  private subject: Subject<DropdownQueryResult<T>>;\n  private socketSubscription: Subscription;\n\n  constructor() {}\n\n  /**\n   * Initialize websocket connection.\n   * @param config Websocket configuration object reference.\n   */\n  public init(config?: WebSocketSubjectConfig<DropdownQueryResult<T>>): void {\n    this.socket = webSocket<any>(config);\n    this.subject = new Subject<DropdownQueryResult<T>>();\n  }\n\n  /**\n   * Get socket stream reference.\n   */\n  public get socketStream(): WebSocketSubject<DropdownQueryResult<T>> {\n    return this.socket;\n  }\n\n  /**\n   * Websocket data bind event handler.\n   * Must call init prior to calling this function.\n   * @param mapper Response data mapper callback. map source stream format to data table expected stream or apply additional formatting.\n   * @return Dropdown bind event handler.\n   */\n  public onDataBind(mapper?: <Q>(response: Observable<Q>) => Observable<DropdownQueryResult<T>>): DropdownDataBindCallback<T> {\n    if (!this.socket) {\n      throw Error('Initialize socket data source before data bind.');\n    }\n\n    this.socketSubscription = this.socket.subscribe(this.subject);\n\n    return (params?: DropdownRequestParams): Observable<DropdownQueryResult<T>> => {\n      if (params) {\n        this.socket.next({\n          type: 'data-fetch',\n          filter: params.filter,\n          offset: params.offset,\n          limit: params.limit\n        } as any);\n\n        if (mapper) {\n          return mapper(this.subject);\n        }\n\n        return this.subject;\n      }\n    };\n  }\n\n  /**\n   * Dispose websocket connection.\n   */\n  public dispose(): void {\n    if (this.socket) {\n      this.socket.complete();\n    }\n\n    if (this.socketSubscription) {\n      this.socketSubscription.unsubscribe();\n    }\n\n    if (this.subject) {\n      this.subject.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { DropdownWebsocketDataFetchService } from './dropdown-websocket-data-fetch.service';\n\n/**\n * Dropdown web socket data fetch service factory.\n */\n@Injectable()\nexport class DropdownWebsocketResourceFactoryService {\n\n  /**\n   * Get new dropdown websocket fetch service instance.\n   */\n  public getResourceProvider<T>(): DropdownWebsocketDataFetchService<T> {\n    return new DropdownWebsocketDataFetchService<T>();\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { ResourceUtilityModule } from '../resource-utility/resource-utility.module';\n\nimport { DropdownHttpDataFetchService } from './services/dropdown-http-data-fetch.service';\nimport { DropdownWebsocketDataFetchService } from './services/dropdown-websocket-data-fetch.service';\nimport { DropdownResourceConfigService } from './services/dropdown-resource-config.service';\nimport { DropdownHttpResourceFactoryService } from './services/dropdown-http-resource-factory.service';\nimport { DropdownWebsocketResourceFactoryService } from './services/dropdown-websocket-resource-factory.service';\n\nconst PROVIDERS = [DropdownHttpResourceFactoryService, DropdownWebsocketResourceFactoryService];\n\n/**\n * Dropdown data source module.\n */\n@NgModule({\n  imports: [ResourceUtilityModule],\n  providers: [...PROVIDERS]\n})\nexport class DropdownResourceModule {\n  /**\n   * Set module root configuration overrides.\n   * @return Module with custom providers.\n   */\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DropdownResourceModule,\n      providers: [DropdownResourceConfigService]\n    };\n  }\n}\n\nexport { DropdownHttpDataFetchService } from './services/dropdown-http-data-fetch.service';\nexport { DropdownHttpResourceFactoryService };\n\nexport { DropdownWebsocketDataFetchService } from './services/dropdown-websocket-data-fetch.service';\nexport { DropdownWebsocketResourceFactoryService };\n"]}