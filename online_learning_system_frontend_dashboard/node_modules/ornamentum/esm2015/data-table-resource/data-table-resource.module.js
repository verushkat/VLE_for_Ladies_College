/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { ResourceUtilityModule } from '../resource-utility/resource-utility.module';
import { DataTableResourceConfigService } from './services/data-table-resource-config.service';
import { DataTableHttpResourceFactoryService } from './services/data-table-http-resource-factory.service';
import { DataTableWebsocketResourceFactoryService } from './services/data-table-websocket-resource-factory.service';
/** @type {?} */
const PROVIDERS = [DataTableHttpResourceFactoryService, DataTableWebsocketResourceFactoryService];
/**
 * Data table data source module.
 */
export class DataTableResourceModule {
    /**
     * Set module root configuration overrides
     * @return {?} Module with custom providers
     */
    static forRoot() {
        return {
            ngModule: DataTableResourceModule,
            providers: [DataTableResourceConfigService]
        };
    }
}
DataTableResourceModule.decorators = [
    { type: NgModule, args: [{
                imports: [ResourceUtilityModule],
                providers: [...PROVIDERS]
            },] }
];
export { DataTableHttpDataFetchService } from './services/data-table-http-data-fetch.service';
export { DataTableHttpResourceFactoryService };
export { DataTableWebsocketDataFetchService } from './services/data-table-websocket-data-fetch.service';
export { DataTableWebsocketResourceFactoryService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS10YWJsZS1yZXNvdXJjZS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9vcm5hbWVudHVtLyIsInNvdXJjZXMiOlsiZGF0YS10YWJsZS1yZXNvdXJjZS9kYXRhLXRhYmxlLXJlc291cmNlLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFOUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFJcEYsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFDL0YsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLE1BQU0scURBQXFELENBQUM7QUFDMUcsT0FBTyxFQUFFLHdDQUF3QyxFQUFFLE1BQU0sMERBQTBELENBQUM7O01BRTlHLFNBQVMsR0FBRyxDQUFDLG1DQUFtQyxFQUFFLHdDQUF3QyxDQUFDOzs7O0FBU2pHLE1BQU0sT0FBTyx1QkFBdUI7Ozs7O0lBSzNCLE1BQU0sQ0FBQyxPQUFPO1FBQ25CLE9BQU87WUFDTCxRQUFRLEVBQUUsdUJBQXVCO1lBQ2pDLFNBQVMsRUFBRSxDQUFDLDhCQUE4QixDQUFDO1NBQzVDLENBQUM7SUFDSixDQUFDOzs7WUFkRixRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFLENBQUMscUJBQXFCLENBQUM7Z0JBQ2hDLFNBQVMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDO2FBQzFCOztBQWNELE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBQzlGLE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSxDQUFDO0FBRS9DLE9BQU8sRUFBRSxrQ0FBa0MsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBQ3hHLE9BQU8sRUFBRSx3Q0FBd0MsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUmVzb3VyY2VVdGlsaXR5TW9kdWxlIH0gZnJvbSAnLi4vcmVzb3VyY2UtdXRpbGl0eS9yZXNvdXJjZS11dGlsaXR5Lm1vZHVsZSc7XG5cbmltcG9ydCB7IERhdGFUYWJsZUh0dHBEYXRhRmV0Y2hTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9kYXRhLXRhYmxlLWh0dHAtZGF0YS1mZXRjaC5zZXJ2aWNlJztcbmltcG9ydCB7IERhdGFUYWJsZVdlYnNvY2tldERhdGFGZXRjaFNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2RhdGEtdGFibGUtd2Vic29ja2V0LWRhdGEtZmV0Y2guc2VydmljZSc7XG5pbXBvcnQgeyBEYXRhVGFibGVSZXNvdXJjZUNvbmZpZ1NlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2RhdGEtdGFibGUtcmVzb3VyY2UtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGF0YVRhYmxlSHR0cFJlc291cmNlRmFjdG9yeVNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2RhdGEtdGFibGUtaHR0cC1yZXNvdXJjZS1mYWN0b3J5LnNlcnZpY2UnO1xuaW1wb3J0IHsgRGF0YVRhYmxlV2Vic29ja2V0UmVzb3VyY2VGYWN0b3J5U2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvZGF0YS10YWJsZS13ZWJzb2NrZXQtcmVzb3VyY2UtZmFjdG9yeS5zZXJ2aWNlJztcblxuY29uc3QgUFJPVklERVJTID0gW0RhdGFUYWJsZUh0dHBSZXNvdXJjZUZhY3RvcnlTZXJ2aWNlLCBEYXRhVGFibGVXZWJzb2NrZXRSZXNvdXJjZUZhY3RvcnlTZXJ2aWNlXTtcblxuLyoqXG4gKiBEYXRhIHRhYmxlIGRhdGEgc291cmNlIG1vZHVsZS5cbiAqL1xuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1Jlc291cmNlVXRpbGl0eU1vZHVsZV0sXG4gIHByb3ZpZGVyczogWy4uLlBST1ZJREVSU11cbn0pXG5leHBvcnQgY2xhc3MgRGF0YVRhYmxlUmVzb3VyY2VNb2R1bGUge1xuICAvKipcbiAgICogU2V0IG1vZHVsZSByb290IGNvbmZpZ3VyYXRpb24gb3ZlcnJpZGVzXG4gICAqIEByZXR1cm4gTW9kdWxlIHdpdGggY3VzdG9tIHByb3ZpZGVyc1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmb3JSb290KCk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogRGF0YVRhYmxlUmVzb3VyY2VNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtEYXRhVGFibGVSZXNvdXJjZUNvbmZpZ1NlcnZpY2VdXG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgeyBEYXRhVGFibGVIdHRwRGF0YUZldGNoU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvZGF0YS10YWJsZS1odHRwLWRhdGEtZmV0Y2guc2VydmljZSc7XG5leHBvcnQgeyBEYXRhVGFibGVIdHRwUmVzb3VyY2VGYWN0b3J5U2VydmljZSB9O1xuXG5leHBvcnQgeyBEYXRhVGFibGVXZWJzb2NrZXREYXRhRmV0Y2hTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9kYXRhLXRhYmxlLXdlYnNvY2tldC1kYXRhLWZldGNoLnNlcnZpY2UnO1xuZXhwb3J0IHsgRGF0YVRhYmxlV2Vic29ja2V0UmVzb3VyY2VGYWN0b3J5U2VydmljZSB9O1xuIl19