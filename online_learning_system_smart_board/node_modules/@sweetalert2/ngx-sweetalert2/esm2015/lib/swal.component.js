/**
 * @fileoverview added by tsickle
 * Generated from: lib/swal.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Output } from '@angular/core';
import { dismissOnDestroyToken, fireOnInitToken } from './di';
import { SweetAlert2LoaderService } from './sweetalert2-loader.service';
/**
 * <swal> component. See the README.md for usage.
 *
 * It contains a bunch of \@Inputs that have a perfect 1:1 mapping with SweetAlert2 options.
 * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled
 * to SweetAlert2, but also is type-safe.
 *
 * (?) If you want to use an object that declares the SweetAlert2 options all at once rather than many \@Inputs,
 *     take a look at [swalOptions], that lets you pass a full {\@link SweetAlertOptions} object.
 *
 * (?) If you are reading the TypeScript source of this component, you may think that it's a lot of code.
 *     Be sure that a lot of this code is types and Angular boilerplate. Compiled and minified code is much smaller.
 *     If you are really concerned about performance and/or don't care about the API and its convenient integration
 *     with Angular (notably change detection and transclusion), you may totally use SweetAlert2 natively as well ;)
 *
 * /!\ Some SweetAlert options aren't \@Inputs but \@Outputs: onBeforeOpen, onOpen, onClose, onAfterClose and onDestroy
 *     (but without "on*" prefix to respect community standards).
 *     However, preConfirm and inputValidator are still \@Inputs because there are not event handlers, there can't be
 *     multiple listeners and we need the values they can/must return.
 */
export class SwalComponent {
    /**
     * @param {?} sweetAlert2Loader
     * @param {?} moduleLevelFireOnInit
     * @param {?} moduleLevelDismissOnDestroy
     */
    constructor(sweetAlert2Loader, moduleLevelFireOnInit, moduleLevelDismissOnDestroy) {
        this.sweetAlert2Loader = sweetAlert2Loader;
        this.moduleLevelFireOnInit = moduleLevelFireOnInit;
        this.moduleLevelDismissOnDestroy = moduleLevelDismissOnDestroy;
        /**
         * Emits an event when the modal DOM element has been created.
         * Useful to perform DOM mutations before the modal is shown.
         */
        this.beforeOpen = new EventEmitter();
        /**
         * Emits an event when the modal is shown.
         */
        this.open = new EventEmitter();
        /**
         * Emits an event when the modal DOM is rendered.
         */
        this.render = new EventEmitter();
        /**
         * Emits an event when the modal will be closed.
         * If you just want to know when the user dismissed the modal, prefer the higher-level (cancel) output.
         */
        this.close = new EventEmitter();
        /**
         * Emits an event after the modal had been closed.
         * If you just want to know when the user dismissed the modal, prefer the higher-level (cancel) output.
         */
        this.afterClose = new EventEmitter();
        /**
         * Emits an event after the modal had been closed.
         * The difference between {\@link destroy} and {\@link afterClose} is that the latter is called for user interactions
         * only (clicks), whereas {\@link destroy} is always called, both for user interactions and popup being closed by
         * another popup.
         */
        this.destroy = new EventEmitter();
        /**
         * Emits when the user clicks "Confirm".
         * Bears a value when using "input", resolved "preConfirm", etc.
         *
         * Example:
         *     <swal (confirm)="handleConfirm($event)"></swal>
         *
         *     public handleConfirm(email: string): void {
         *         // ... save user email
         *     }
         */
        this.confirm = new EventEmitter();
        /**
         * Emits when the user clicks "Cancel", or dismisses the modal by any other allowed way.
         * By default, it will emit a string representing the reason for which the SweetAlert has been closed.
         * The reason is `undefined` when {\@link dismiss} is called.
         *
         * Example:
         *     <swal (cancel)="handleCancel($event)"></swal>
         *
         *     public handleCancel(reason: DismissReason | undefined): void {
         *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.
         *         // ... do something
         *     }
         */
        this.cancel = new EventEmitter();
        /**
         * This Set retains the properties that have been changed from \@Inputs, so we can know precisely
         * what options we have to send to {\@link Swal.fire}.
         */
        this.touchedProps = new Set();
        /**
         * A function of signature `(propName: string): void` that adds a given property name to the list of
         * touched properties, ie. {\@link touchedProps}.
         */
        this.markTouched = this.touchedProps.add.bind(this.touchedProps);
        /**
         * Is the SweetAlert2 modal represented by this component currently opened?
         */
        this.isCurrentlyShown = false;
    }
    /**
     * An object of SweetAlert2 native options, useful if:
     *  - you don't want to use the \@Inputs for practical/philosophical reasons ;
     *  - there are missing \@Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.
     *
     * /!\ Please note that setting this property does NOT erase what has been set before unless you specify the
     *     previous properties you want to erase again.
     *     Ie. setting { title: 'Title' } and then { text: 'Text' } will give { title: 'Title', text: 'Text' }.
     *
     * /!\ Be aware that the options defined in this object will override the \@Inputs of the same name.
     * @param {?} options
     * @return {?}
     */
    set swalOptions(options) {
        //=> Update properties
        Object.assign(this, options);
        //=> Mark changed properties as touched
        /** @type {?} */
        const touchedKeys = (/** @type {?} */ (Object.keys(options)));
        touchedKeys.forEach(this.markTouched);
    }
    /**
     * Computes the options object that will get passed to SweetAlert2.
     * Only the properties that have been set at least once on this component will be returned.
     * Mostly for internal usage.
     * @return {?}
     */
    get swalOptions() {
        /** @type {?} */
        const options = {};
        //=> We will compute the options object based on the option keys that are known to have changed.
        //   That avoids passing a gigantic object to SweetAlert2, making debugging easier and potentially
        //   avoiding side effects.
        this.touchedProps.forEach((/**
         * @param {?} prop
         * @return {?}
         */
        prop => {
            options[prop] = this[(/** @type {?} */ (prop))];
        }));
        return options;
    }
    /**
     * @param {?} visible
     * @return {?}
     */
    set swalVisible(visible) {
        visible ? this.fire() : this.dismiss();
    }
    /**
     * @return {?}
     */
    get swalVisible() {
        return this.isCurrentlyShown;
    }
    /**
     * Angular lifecycle hook.
     * Asks the SweetAlert2 loader service to preload the SweetAlert2 library, so it begins to be loaded only if there
     * is a <swal> component somewhere, and is probably fully loaded when the modal has to be displayed,
     * causing no delay.
     * @return {?}
     */
    ngOnInit() {
        //=> Preload SweetAlert2 library in case this component is activated.
        this.sweetAlert2Loader.preloadSweetAlertLibrary();
    }
    /**
     * Angular lifecycle hook.
     * Fires the modal, if the component or module is configured to do so.
     * @return {?}
     */
    ngAfterViewInit() {
        /** @type {?} */
        const fireOnInit = this.swalFireOnInit === undefined
            ? this.moduleLevelFireOnInit
            : this.swalFireOnInit;
        fireOnInit && this.fire();
    }
    /**
     * Angular lifecycle hook.
     * Updates the SweetAlert options, and if the modal is opened, asks SweetAlert to render it again.
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        //=> For each changed @Input that matches a SweetAlert2 option, mark as touched so we can
        //   send it with the next fire() or update() calls.
        Object.keys(changes)
            //=> If the filtering logic becomes more complex here, we can use Swal.isValidParameter
            .filter((/**
         * @param {?} prop
         * @return {?}
         */
        (prop) => !prop.startsWith('swal')))
            .forEach(this.markTouched);
        //=> Eventually trigger re-render if the modal is open.
        void this.update();
    }
    /**
     * Angular lifecycle hook.
     * Closes the SweetAlert when the component is destroyed.
     * @return {?}
     */
    ngOnDestroy() {
        //=> Release the modal if the component is destroyed and if that behaviour is not disabled.
        /** @type {?} */
        const dismissOnDestroy = this.swalDismissOnDestroy === undefined
            ? this.moduleLevelDismissOnDestroy
            : this.swalDismissOnDestroy;
        dismissOnDestroy && this.dismiss();
    }
    /**
     * Shows the SweetAlert.
     *
     * Returns the SweetAlert2 promise for convenience and use in code behind templates.
     * Otherwise, (confirm)="myHandler($event)" and (cancel)="myHandler($event)" can be used in templates.
     * @return {?}
     */
    fire() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const swal = yield this.sweetAlert2Loader.swal;
            //=> Build the SweetAlert2 options
            /** @type {?} */
            const options = Object.assign({}, this.swalOptions, { onBeforeOpen: (/**
                 * @param {?} modalElement
                 * @return {?}
                 */
                (modalElement) => {
                    this.beforeOpen.emit({ modalElement });
                }), onOpen: (/**
                 * @param {?} modalElement
                 * @return {?}
                 */
                (modalElement) => {
                    this.isCurrentlyShown = true;
                    this.open.emit({ modalElement });
                }), onRender: (/**
                 * @param {?} modalElement
                 * @return {?}
                 */
                (modalElement) => {
                    this.render.emit({ modalElement });
                }), onClose: (/**
                 * @param {?} modalElement
                 * @return {?}
                 */
                (modalElement) => {
                    this.isCurrentlyShown = false;
                    this.close.emit({ modalElement });
                }), onAfterClose: (/**
                 * @return {?}
                 */
                () => {
                    this.afterClose.emit();
                }), onDestroy: (/**
                 * @return {?}
                 */
                () => {
                    this.destroy.emit();
                }) });
            //=> Show the Swal! And wait for confirmation or dimissal.
            /** @type {?} */
            const result = yield swal.fire(options);
            //=> Emit on (confirm) or (cancel)
            if ('value' in result) {
                this.confirm.emit(result.value);
            }
            else {
                this.cancel.emit(result.dismiss);
            }
            return result;
        });
    }
    /**
     * Closes the modal, if opened.
     *
     * @param {?=} result The value that the modal will resolve with, triggering either (confirm) or (cancel).
     *               If the argument is not passed, (dimiss) will emit `undefined`.
     *               See {\@link Swal.close}
     * @return {?}
     */
    dismiss(result) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.isCurrentlyShown)
                return;
            /** @type {?} */
            const swal = yield this.sweetAlert2Loader.swal;
            swal.close(result);
        });
    }
    /**
     * Updates SweetAlert2 options while the modal is opened, causing the modal to re-render.
     * If the modal is not opened, the component options will simply be updated and that's it.
     *
     * /!\ Please note that not all SweetAlert2 options are updatable while the modal is opened.
     *
     * @param {?=} options
     * @return {?}
     */
    update(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (options) {
                this.swalOptions = options;
            }
            if (!this.isCurrentlyShown)
                return;
            /** @type {?} */
            const swal = yield this.sweetAlert2Loader.swal;
            /** @type {?} */
            const allOptions = this.swalOptions;
            /** @type {?} */
            const updatableOptions = Object.keys(allOptions)
                .filter((/**
             * @param {?} key
             * @return {?}
             */
            (key) => swal.isUpdatableParameter(key)))
                .reduce((/**
             * @param {?} obj
             * @param {?} key
             * @return {?}
             */
            (obj, key) => {
                obj[key] = allOptions[key];
                return obj;
            }), (/** @type {?} */ ({})));
            swal.update(updatableOptions);
        });
    }
}
SwalComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'swal',
                template: '',
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
SwalComponent.ctorParameters = () => [
    { type: SweetAlert2LoaderService },
    { type: Boolean, decorators: [{ type: Inject, args: [fireOnInitToken,] }] },
    { type: Boolean, decorators: [{ type: Inject, args: [dismissOnDestroyToken,] }] }
];
SwalComponent.propDecorators = {
    title: [{ type: Input }],
    titleText: [{ type: Input }],
    text: [{ type: Input }],
    html: [{ type: Input }],
    footer: [{ type: Input }],
    icon: [{ type: Input }],
    iconHtml: [{ type: Input }],
    backdrop: [{ type: Input }],
    toast: [{ type: Input }],
    target: [{ type: Input }],
    input: [{ type: Input }],
    width: [{ type: Input }],
    padding: [{ type: Input }],
    background: [{ type: Input }],
    position: [{ type: Input }],
    grow: [{ type: Input }],
    showClass: [{ type: Input }],
    hideClass: [{ type: Input }],
    customClass: [{ type: Input }],
    timer: [{ type: Input }],
    timerProgressBar: [{ type: Input }],
    animation: [{ type: Input }],
    heightAuto: [{ type: Input }],
    allowOutsideClick: [{ type: Input }],
    allowEscapeKey: [{ type: Input }],
    allowEnterKey: [{ type: Input }],
    stopKeydownPropagation: [{ type: Input }],
    keydownListenerCapture: [{ type: Input }],
    showConfirmButton: [{ type: Input }],
    showCancelButton: [{ type: Input }],
    confirmButtonText: [{ type: Input }],
    cancelButtonText: [{ type: Input }],
    confirmButtonColor: [{ type: Input }],
    cancelButtonColor: [{ type: Input }],
    confirmButtonAriaLabel: [{ type: Input }],
    cancelButtonAriaLabel: [{ type: Input }],
    buttonsStyling: [{ type: Input }],
    reverseButtons: [{ type: Input }],
    focusConfirm: [{ type: Input }],
    focusCancel: [{ type: Input }],
    showCloseButton: [{ type: Input }],
    closeButtonHtml: [{ type: Input }],
    closeButtonAriaLabel: [{ type: Input }],
    showLoaderOnConfirm: [{ type: Input }],
    preConfirm: [{ type: Input }],
    imageUrl: [{ type: Input }],
    imageWidth: [{ type: Input }],
    imageHeight: [{ type: Input }],
    imageAlt: [{ type: Input }],
    inputPlaceholder: [{ type: Input }],
    inputValue: [{ type: Input }],
    inputOptions: [{ type: Input }],
    inputAutoTrim: [{ type: Input }],
    inputAttributes: [{ type: Input }],
    inputValidator: [{ type: Input }],
    validationMessage: [{ type: Input }],
    progressSteps: [{ type: Input }],
    currentProgressStep: [{ type: Input }],
    progressStepsDistance: [{ type: Input }],
    scrollbarPadding: [{ type: Input }],
    swalOptions: [{ type: Input }],
    swalFireOnInit: [{ type: Input }],
    swalDismissOnDestroy: [{ type: Input }],
    swalVisible: [{ type: Input }],
    beforeOpen: [{ type: Output }],
    open: [{ type: Output }],
    render: [{ type: Output }],
    close: [{ type: Output }],
    afterClose: [{ type: Output }],
    destroy: [{ type: Output }],
    confirm: [{ type: Output }],
    cancel: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    SwalComponent.prototype.title;
    /** @type {?} */
    SwalComponent.prototype.titleText;
    /** @type {?} */
    SwalComponent.prototype.text;
    /** @type {?} */
    SwalComponent.prototype.html;
    /** @type {?} */
    SwalComponent.prototype.footer;
    /** @type {?} */
    SwalComponent.prototype.icon;
    /** @type {?} */
    SwalComponent.prototype.iconHtml;
    /** @type {?} */
    SwalComponent.prototype.backdrop;
    /** @type {?} */
    SwalComponent.prototype.toast;
    /** @type {?} */
    SwalComponent.prototype.target;
    /** @type {?} */
    SwalComponent.prototype.input;
    /** @type {?} */
    SwalComponent.prototype.width;
    /** @type {?} */
    SwalComponent.prototype.padding;
    /** @type {?} */
    SwalComponent.prototype.background;
    /** @type {?} */
    SwalComponent.prototype.position;
    /** @type {?} */
    SwalComponent.prototype.grow;
    /** @type {?} */
    SwalComponent.prototype.showClass;
    /** @type {?} */
    SwalComponent.prototype.hideClass;
    /** @type {?} */
    SwalComponent.prototype.customClass;
    /** @type {?} */
    SwalComponent.prototype.timer;
    /** @type {?} */
    SwalComponent.prototype.timerProgressBar;
    /**
     * @deprecated Use showClass and hideClass instead
     * @type {?}
     */
    SwalComponent.prototype.animation;
    /** @type {?} */
    SwalComponent.prototype.heightAuto;
    /** @type {?} */
    SwalComponent.prototype.allowOutsideClick;
    /** @type {?} */
    SwalComponent.prototype.allowEscapeKey;
    /** @type {?} */
    SwalComponent.prototype.allowEnterKey;
    /** @type {?} */
    SwalComponent.prototype.stopKeydownPropagation;
    /** @type {?} */
    SwalComponent.prototype.keydownListenerCapture;
    /** @type {?} */
    SwalComponent.prototype.showConfirmButton;
    /** @type {?} */
    SwalComponent.prototype.showCancelButton;
    /** @type {?} */
    SwalComponent.prototype.confirmButtonText;
    /** @type {?} */
    SwalComponent.prototype.cancelButtonText;
    /** @type {?} */
    SwalComponent.prototype.confirmButtonColor;
    /** @type {?} */
    SwalComponent.prototype.cancelButtonColor;
    /** @type {?} */
    SwalComponent.prototype.confirmButtonAriaLabel;
    /** @type {?} */
    SwalComponent.prototype.cancelButtonAriaLabel;
    /** @type {?} */
    SwalComponent.prototype.buttonsStyling;
    /** @type {?} */
    SwalComponent.prototype.reverseButtons;
    /** @type {?} */
    SwalComponent.prototype.focusConfirm;
    /** @type {?} */
    SwalComponent.prototype.focusCancel;
    /** @type {?} */
    SwalComponent.prototype.showCloseButton;
    /** @type {?} */
    SwalComponent.prototype.closeButtonHtml;
    /** @type {?} */
    SwalComponent.prototype.closeButtonAriaLabel;
    /** @type {?} */
    SwalComponent.prototype.showLoaderOnConfirm;
    /** @type {?} */
    SwalComponent.prototype.preConfirm;
    /** @type {?} */
    SwalComponent.prototype.imageUrl;
    /** @type {?} */
    SwalComponent.prototype.imageWidth;
    /** @type {?} */
    SwalComponent.prototype.imageHeight;
    /** @type {?} */
    SwalComponent.prototype.imageAlt;
    /** @type {?} */
    SwalComponent.prototype.inputPlaceholder;
    /** @type {?} */
    SwalComponent.prototype.inputValue;
    /** @type {?} */
    SwalComponent.prototype.inputOptions;
    /** @type {?} */
    SwalComponent.prototype.inputAutoTrim;
    /** @type {?} */
    SwalComponent.prototype.inputAttributes;
    /** @type {?} */
    SwalComponent.prototype.inputValidator;
    /** @type {?} */
    SwalComponent.prototype.validationMessage;
    /** @type {?} */
    SwalComponent.prototype.progressSteps;
    /** @type {?} */
    SwalComponent.prototype.currentProgressStep;
    /** @type {?} */
    SwalComponent.prototype.progressStepsDistance;
    /** @type {?} */
    SwalComponent.prototype.scrollbarPadding;
    /**
     * Whether to fire the modal as soon as the <swal> component is created and initialized in the view.
     * When left undefined (default), the value will be inherited from the module configuration, which is `false`.
     *
     * Example:
     *     <swal *ngIf="error" [title]="error.title" [text]="error.text" icon="error" [swalFireOnInit]="true"></swal>
     * @type {?}
     */
    SwalComponent.prototype.swalFireOnInit;
    /**
     * Whether to dismiss the modal when the <swal> component is destroyed by Angular (for any reason) or not.
     * When left undefined (default), the value will be inherited from the module configuration, which is `true`.
     * @type {?}
     */
    SwalComponent.prototype.swalDismissOnDestroy;
    /**
     * Emits an event when the modal DOM element has been created.
     * Useful to perform DOM mutations before the modal is shown.
     * @type {?}
     */
    SwalComponent.prototype.beforeOpen;
    /**
     * Emits an event when the modal is shown.
     * @type {?}
     */
    SwalComponent.prototype.open;
    /**
     * Emits an event when the modal DOM is rendered.
     * @type {?}
     */
    SwalComponent.prototype.render;
    /**
     * Emits an event when the modal will be closed.
     * If you just want to know when the user dismissed the modal, prefer the higher-level (cancel) output.
     * @type {?}
     */
    SwalComponent.prototype.close;
    /**
     * Emits an event after the modal had been closed.
     * If you just want to know when the user dismissed the modal, prefer the higher-level (cancel) output.
     * @type {?}
     */
    SwalComponent.prototype.afterClose;
    /**
     * Emits an event after the modal had been closed.
     * The difference between {\@link destroy} and {\@link afterClose} is that the latter is called for user interactions
     * only (clicks), whereas {\@link destroy} is always called, both for user interactions and popup being closed by
     * another popup.
     * @type {?}
     */
    SwalComponent.prototype.destroy;
    /**
     * Emits when the user clicks "Confirm".
     * Bears a value when using "input", resolved "preConfirm", etc.
     *
     * Example:
     *     <swal (confirm)="handleConfirm($event)"></swal>
     *
     *     public handleConfirm(email: string): void {
     *         // ... save user email
     *     }
     * @type {?}
     */
    SwalComponent.prototype.confirm;
    /**
     * Emits when the user clicks "Cancel", or dismisses the modal by any other allowed way.
     * By default, it will emit a string representing the reason for which the SweetAlert has been closed.
     * The reason is `undefined` when {\@link dismiss} is called.
     *
     * Example:
     *     <swal (cancel)="handleCancel($event)"></swal>
     *
     *     public handleCancel(reason: DismissReason | undefined): void {
     *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.
     *         // ... do something
     *     }
     * @type {?}
     */
    SwalComponent.prototype.cancel;
    /**
     * This Set retains the properties that have been changed from \@Inputs, so we can know precisely
     * what options we have to send to {\@link Swal.fire}.
     * @type {?}
     * @private
     */
    SwalComponent.prototype.touchedProps;
    /**
     * A function of signature `(propName: string): void` that adds a given property name to the list of
     * touched properties, ie. {\@link touchedProps}.
     * @type {?}
     * @private
     */
    SwalComponent.prototype.markTouched;
    /**
     * Is the SweetAlert2 modal represented by this component currently opened?
     * @type {?}
     * @private
     */
    SwalComponent.prototype.isCurrentlyShown;
    /**
     * @type {?}
     * @private
     */
    SwalComponent.prototype.sweetAlert2Loader;
    /**
     * @type {?}
     * @private
     */
    SwalComponent.prototype.moduleLevelFireOnInit;
    /**
     * @type {?}
     * @private
     */
    SwalComponent.prototype.moduleLevelDismissOnDestroy;
}
//# sourceMappingURL=data:application/json;base64,