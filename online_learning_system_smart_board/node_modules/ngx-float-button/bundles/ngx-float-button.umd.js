(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/common'), require('@angular/material')) :
    typeof define === 'function' && define.amd ? define('ngx-float-button', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/common', '@angular/material'], factory) :
    (factory((global['ngx-float-button'] = {}),global.ng.core,global.rxjs,global.rxjs.operators,global.ng.common,global.ng.material));
}(this, (function (exports,i0,rxjs,operators,common,material) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var NgxFloatButtonService = /** @class */ (function () {
        function NgxFloatButtonService() {
        }
        NgxFloatButtonService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        NgxFloatButtonService.ctorParameters = function () { return []; };
        /** @nocollapse */ NgxFloatButtonService.ngInjectableDef = i0.defineInjectable({ factory: function NgxFloatButtonService_Factory() { return new NgxFloatButtonService(); }, token: NgxFloatButtonService, providedIn: "root" });
        return NgxFloatButtonService;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var NgxFloatItemButtonComponent = /** @class */ (function () {
        function NgxFloatItemButtonComponent() {
            this.color = 'white';
            this.disabled = false;
            this.clicked = new i0.EventEmitter();
        }
        /**
         * @param {?} $event
         * @return {?}
         */
        NgxFloatItemButtonComponent.prototype.emitClickEvent = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (this.disabled) {
                    return this.disabled;
                }
                this.clicked.emit($event);
            };
        NgxFloatItemButtonComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'ngx-float-item-button',
                        template: "\n    <div #elementref class=\"item {{ disabled ? 'disabled' : ''}}\" (click)=\"emitClickEvent($event)\">\n        <div class=\"content-wrapper\" #contentref>\n          <div class=\"content\" [style.display]=\"content ? 'block' : 'none'\">{{content}}</div>\n        </div>\n        <a class=\"fab-item\" [style.backgroundColor]=\"color\">\n           <mat-icon> {{ icon }} </mat-icon>\n        </a>\n    </div>\n  ",
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        styles: ["\n      .item {\n        width: 250px;\n        height: 40px;\n        left: -203px;\n        transform: translate3d(0, 0, 0);\n        transition: transform, opacity ease-out 200ms;\n        transition-timing-function: cubic-bezier(0.165, 0.84, 0.44, 1);\n        transition-duration: 180ms;\n        position: absolute;\n        cursor: pointer;\n        top: 5px;\n        display: flex;\n        justify-content: flex-end;\n        align-items: center;\n      }\n\n      .item.disabled {\n        pointer-events: none;\n      }\n\n      .item.disabled .fab-item {\n        background-color: lightgray;\n      }\n\n      .content {\n        background: #333333;\n        margin-right: 50px;\n        line-height: 25px;\n        color: white;\n        padding: 2px 7px;\n        border-radius: 3px;\n        display: none;\n        font-size: 12px;\n        height: 25px;\n        margin-top: 4px;\n        box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);\n      }\n\n      .fab-item {\n        right: 0;\n        background: white;\n        border-radius: 100%;\n        width: 40px;\n        height: 40px;\n        position: absolute;\n        color: #797979;\n        text-align: center;\n        cursor: pointer;\n        line-height: 50px;\n        box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);\n      }\n    "]
                    }] }
        ];
        NgxFloatItemButtonComponent.propDecorators = {
            icon: [{ type: i0.Input }],
            content: [{ type: i0.Input }],
            color: [{ type: i0.Input }],
            disabled: [{ type: i0.Input }],
            clicked: [{ type: i0.Output }],
            elementref: [{ type: i0.ViewChild, args: ['elementref',] }],
            contentref: [{ type: i0.ViewChild, args: ['contentref',] }]
        };
        return NgxFloatItemButtonComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var NgxFloatButtonComponent = /** @class */ (function () {
        function NgxFloatButtonComponent(cd) {
            this.cd = cd;
            this.spaceBetweenButtons = 55;
            this.color = '#dd0031';
            this.disabled = false;
            this.events = new rxjs.Subject();
            this._destroy$ = new rxjs.Subject();
            this.state = new rxjs.BehaviorSubject({
                display: false,
                direction: 'top',
                event: 'start',
                spaceBetweenButtons: this.spaceBetweenButtons
            });
        }
        /**
         * @return {?}
         */
        NgxFloatButtonComponent.prototype.toggle = /**
         * @return {?}
         */
            function () {
                if (this.disabled) {
                    return this.disabled;
                }
                this.state.next(__assign({}, this.state.getValue(), { display: !this.state.getValue().display, event: !this.state.getValue().display ? 'open' : 'close' }));
            };
        // only top and bottom support content element
        // only top and bottom support content element
        /**
         * @return {?}
         */
        NgxFloatButtonComponent.prototype.checkDirectionType =
            // only top and bottom support content element
            /**
             * @return {?}
             */
            function () {
                if (this.buttons.toArray()) {
                    /** @type {?} */
                    var display_1 = 'block';
                    if (this.direction === 'right' || this.direction === 'left') {
                        display_1 = 'none';
                    }
                    this.buttons.toArray().forEach(function (element) {
                        element.contentref.nativeElement.style.display = display_1;
                    });
                }
            };
        // transition
        // transition
        /**
         * @param {?} eventType
         * @return {?}
         */
        NgxFloatButtonComponent.prototype.animateButtons =
            // transition
            /**
             * @param {?} eventType
             * @return {?}
             */
            function (eventType) {
                var _this = this;
                this.buttons.toArray().forEach(function (btn, i) {
                    i += 1;
                    /** @type {?} */
                    var style = btn.elementref.nativeElement.style;
                    if (eventType !== 'directionChanged' && _this.state.getValue().display) {
                        style['transform'] = 'scale(1)';
                        style['transition-duration'] = '0s';
                        if (btn.timeout) {
                            clearTimeout(btn.timeout);
                        }
                    }
                    setTimeout(function () {
                        style['transition-duration'] = _this.state.getValue().display ? 90 + 100 * i + "ms" : '';
                        style['transform'] = _this.state.getValue().display ? _this.getTranslate(i) : '';
                    }, 50);
                    if (eventType !== 'directionChanged' && !_this.state.getValue().display) {
                        btn.timeout = setTimeout(function () {
                            style['transform'] = 'scale(0)';
                        }, 90 + 100 * i);
                    }
                });
            };
        // get transition direction
        // get transition direction
        /**
         * @param {?} i
         * @return {?}
         */
        NgxFloatButtonComponent.prototype.getTranslate =
            // get transition direction
            /**
             * @param {?} i
             * @return {?}
             */
            function (i) {
                /** @type {?} */
                var animation;
                switch (this.direction) {
                    case 'right':
                        animation = "translate3d(" + this.state.getValue().spaceBetweenButtons * i + "px,0,0)";
                        break;
                    case 'bottom':
                        animation = "translate3d(0," + this.state.getValue().spaceBetweenButtons * i + "px,0)";
                        break;
                    case 'left':
                        animation = "translate3d(-" + this.state.getValue().spaceBetweenButtons * i + "px,0,0)";
                        break;
                    default:
                        animation = "translate3d(0,-" + this.state.getValue().spaceBetweenButtons * i + "px,0)";
                        break;
                }
                return animation;
            };
        /**
         * @return {?}
         */
        NgxFloatButtonComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.direction) {
                    // first time to check
                    this.checkDirectionType();
                }
                this.buttons.toArray().map(function (v) {
                    v.clicked.pipe(operators.takeUntil(_this._destroy$)).subscribe(function () {
                        _this.state.next(__assign({}, _this.state.getValue(), { display: false, event: 'close' }));
                    });
                });
                this.state.pipe(operators.takeUntil(this._destroy$)).subscribe(function (v) {
                    _this.animateButtons(v.event);
                    _this.events.next({
                        display: v.display,
                        event: v.event,
                        direction: v.direction
                    });
                });
            };
        // if @Input values changes, we need check the direction type
        // if @Input values changes, we need check the direction type
        /**
         * @param {?} changes
         * @return {?}
         */
        NgxFloatButtonComponent.prototype.ngOnChanges =
            // if @Input values changes, we need check the direction type
            /**
             * @param {?} changes
             * @return {?}
             */
            function (changes) {
                var _this = this;
                if (changes.direction && !changes.direction.firstChange) {
                    this.state.next(__assign({}, this.state.getValue(), { event: 'directionChanged', direction: changes.direction.currentValue }));
                    // if changes happens
                    this.checkDirectionType();
                }
                if (changes.open && changes.open.currentValue) {
                    this.open.pipe(operators.takeUntil(this._destroy$)).subscribe(function (v) {
                        if (v !== _this.state.getValue().display) {
                            _this.state.next(__assign({}, _this.state.getValue(), { event: v ? 'open' : 'close', display: v }));
                            // make angular happy
                            _this.cd.markForCheck();
                        }
                    });
                }
                if (changes.spaceBetweenButtons && changes.spaceBetweenButtons.currentValue) {
                    this.state.next(__assign({}, this.state.getValue(), { event: 'spaceBetweenButtonsChanged', spaceBetweenButtons: changes.spaceBetweenButtons.currentValue }));
                }
            };
        /**
         * @return {?}
         */
        NgxFloatButtonComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this._destroy$.next();
            };
        NgxFloatButtonComponent.decorators = [
            { type: i0.Component, args: [{
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        selector: 'ngx-float-button',
                        template: "\n    <nav class=\"fab-menu\" [class.active]=\"(state | async).display\">\n        <a class=\"fab-toggle\" (click)=\"toggle()\" [style.backgroundColor]=\"color\">\n          <mat-icon> {{icon}} </mat-icon>\n        </a>\n        <ng-content></ng-content>\n    </nav>\n  ",
                        styles: ["\n      :host {\n        position: absolute;\n      }\n\n      .fab-menu {\n        box-sizing: border-box;\n        font-size: 20px;\n        width: 55px;\n        height: 55px;\n        text-align: left;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n        z-index: 9;\n      }\n\n      .fab-toggle {\n        border-radius: 100%;\n        width: 40px;\n        height: 40px;\n        color: white;\n        text-align: center;\n        line-height: 50px;\n        transform: translate3d(0, 0, 0);\n        transition: all ease-out 200ms;\n        z-index: 2;\n        transition-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1.275);\n        transition-duration: 400ms;\n        transform: scale(1.1, 1.1) translate3d(0, 0, 0);\n        cursor: pointer;\n        box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);\n      }\n\n      .fab-menu .fab-toggle:hover {\n        transform: scale(1.2, 1.2) translate3d(0, 0, 0);\n      }\n\n      .fab-menu /deep/ .item {\n        opacity: 0;\n      }\n\n      .fab-menu.active /deep/ .item {\n        opacity: 1;\n      }\n\n      .fab-menu.active /deep/ .content-wrapper {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n\n      .fab-menu.active /deep/ .content {\n        display: block;\n      }\n\n      .fab-menu.active .fab-toggle {\n        transition-timing-function: linear;\n        transition-duration: 200ms;\n        transform: scale(0.8, 0.8) translate3d(0, 0, 0);\n      }\n    "]
                    }] }
        ];
        /** @nocollapse */
        NgxFloatButtonComponent.ctorParameters = function () {
            return [
                { type: i0.ChangeDetectorRef }
            ];
        };
        NgxFloatButtonComponent.propDecorators = {
            icon: [{ type: i0.Input }],
            direction: [{ type: i0.Input }],
            spaceBetweenButtons: [{ type: i0.Input }],
            open: [{ type: i0.Input }],
            color: [{ type: i0.Input }],
            disabled: [{ type: i0.Input }],
            events: [{ type: i0.Output }],
            buttons: [{ type: i0.ContentChildren, args: [NgxFloatItemButtonComponent,] }]
        };
        return NgxFloatButtonComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var NgxFloatButtonModule = /** @class */ (function () {
        function NgxFloatButtonModule() {
        }
        NgxFloatButtonModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [common.CommonModule, material.MatIconModule],
                        declarations: [NgxFloatButtonComponent, NgxFloatItemButtonComponent],
                        exports: [NgxFloatButtonComponent, NgxFloatItemButtonComponent]
                    },] }
        ];
        return NgxFloatButtonModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    exports.NgxFloatButtonService = NgxFloatButtonService;
    exports.NgxFloatButtonComponent = NgxFloatButtonComponent;
    exports.NgxFloatButtonModule = NgxFloatButtonModule;
    exports.ɵa = NgxFloatItemButtonComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,