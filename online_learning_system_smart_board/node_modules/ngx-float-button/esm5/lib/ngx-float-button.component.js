/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, ContentChildren, ChangeDetectionStrategy, ChangeDetectorRef, Output } from '@angular/core';
import { Subject, BehaviorSubject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { NgxFloatItemButtonComponent } from './ngx-float-item-button.component';
var NgxFloatButtonComponent = /** @class */ (function () {
    function NgxFloatButtonComponent(cd) {
        this.cd = cd;
        this.spaceBetweenButtons = 55;
        this.color = '#dd0031';
        this.disabled = false;
        this.events = new Subject();
        this._destroy$ = new Subject();
        this.state = new BehaviorSubject({
            display: false,
            direction: 'top',
            event: 'start',
            spaceBetweenButtons: this.spaceBetweenButtons
        });
    }
    /**
     * @return {?}
     */
    NgxFloatButtonComponent.prototype.toggle = /**
     * @return {?}
     */
    function () {
        if (this.disabled) {
            return this.disabled;
        }
        this.state.next(tslib_1.__assign({}, this.state.getValue(), { display: !this.state.getValue().display, event: !this.state.getValue().display ? 'open' : 'close' }));
    };
    // only top and bottom support content element
    // only top and bottom support content element
    /**
     * @return {?}
     */
    NgxFloatButtonComponent.prototype.checkDirectionType = 
    // only top and bottom support content element
    /**
     * @return {?}
     */
    function () {
        if (this.buttons.toArray()) {
            /** @type {?} */
            var display_1 = 'block';
            if (this.direction === 'right' || this.direction === 'left') {
                display_1 = 'none';
            }
            this.buttons.toArray().forEach(function (element) {
                element.contentref.nativeElement.style.display = display_1;
            });
        }
    };
    // transition
    // transition
    /**
     * @param {?} eventType
     * @return {?}
     */
    NgxFloatButtonComponent.prototype.animateButtons = 
    // transition
    /**
     * @param {?} eventType
     * @return {?}
     */
    function (eventType) {
        var _this = this;
        this.buttons.toArray().forEach(function (btn, i) {
            i += 1;
            /** @type {?} */
            var style = btn.elementref.nativeElement.style;
            if (eventType !== 'directionChanged' && _this.state.getValue().display) {
                style['transform'] = 'scale(1)';
                style['transition-duration'] = '0s';
                if (btn.timeout) {
                    clearTimeout(btn.timeout);
                }
            }
            setTimeout(function () {
                style['transition-duration'] = _this.state.getValue().display ? 90 + 100 * i + "ms" : '';
                style['transform'] = _this.state.getValue().display ? _this.getTranslate(i) : '';
            }, 50);
            if (eventType !== 'directionChanged' && !_this.state.getValue().display) {
                btn.timeout = setTimeout(function () {
                    style['transform'] = 'scale(0)';
                }, 90 + 100 * i);
            }
        });
    };
    // get transition direction
    // get transition direction
    /**
     * @param {?} i
     * @return {?}
     */
    NgxFloatButtonComponent.prototype.getTranslate = 
    // get transition direction
    /**
     * @param {?} i
     * @return {?}
     */
    function (i) {
        /** @type {?} */
        var animation;
        switch (this.direction) {
            case 'right':
                animation = "translate3d(" + this.state.getValue().spaceBetweenButtons * i + "px,0,0)";
                break;
            case 'bottom':
                animation = "translate3d(0," + this.state.getValue().spaceBetweenButtons * i + "px,0)";
                break;
            case 'left':
                animation = "translate3d(-" + this.state.getValue().spaceBetweenButtons * i + "px,0,0)";
                break;
            default:
                animation = "translate3d(0,-" + this.state.getValue().spaceBetweenButtons * i + "px,0)";
                break;
        }
        return animation;
    };
    /**
     * @return {?}
     */
    NgxFloatButtonComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.direction) {
            // first time to check
            this.checkDirectionType();
        }
        this.buttons.toArray().map(function (v) {
            v.clicked.pipe(takeUntil(_this._destroy$)).subscribe(function () {
                _this.state.next(tslib_1.__assign({}, _this.state.getValue(), { display: false, event: 'close' }));
            });
        });
        this.state.pipe(takeUntil(this._destroy$)).subscribe(function (v) {
            _this.animateButtons(v.event);
            _this.events.next({
                display: v.display,
                event: v.event,
                direction: v.direction
            });
        });
    };
    // if @Input values changes, we need check the direction type
    // if @Input values changes, we need check the direction type
    /**
     * @param {?} changes
     * @return {?}
     */
    NgxFloatButtonComponent.prototype.ngOnChanges = 
    // if @Input values changes, we need check the direction type
    /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (changes.direction && !changes.direction.firstChange) {
            this.state.next(tslib_1.__assign({}, this.state.getValue(), { event: 'directionChanged', direction: changes.direction.currentValue }));
            // if changes happens
            this.checkDirectionType();
        }
        if (changes.open && changes.open.currentValue) {
            this.open.pipe(takeUntil(this._destroy$)).subscribe(function (v) {
                if (v !== _this.state.getValue().display) {
                    _this.state.next(tslib_1.__assign({}, _this.state.getValue(), { event: v ? 'open' : 'close', display: v }));
                    // make angular happy
                    _this.cd.markForCheck();
                }
            });
        }
        if (changes.spaceBetweenButtons && changes.spaceBetweenButtons.currentValue) {
            this.state.next(tslib_1.__assign({}, this.state.getValue(), { event: 'spaceBetweenButtonsChanged', spaceBetweenButtons: changes.spaceBetweenButtons.currentValue }));
        }
    };
    /**
     * @return {?}
     */
    NgxFloatButtonComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._destroy$.next();
    };
    NgxFloatButtonComponent.decorators = [
        { type: Component, args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: 'ngx-float-button',
                    template: "\n    <nav class=\"fab-menu\" [class.active]=\"(state | async).display\">\n        <a class=\"fab-toggle\" (click)=\"toggle()\" [style.backgroundColor]=\"color\">\n          <mat-icon> {{icon}} </mat-icon>\n        </a>\n        <ng-content></ng-content>\n    </nav>\n  ",
                    styles: ["\n      :host {\n        position: absolute;\n      }\n\n      .fab-menu {\n        box-sizing: border-box;\n        font-size: 20px;\n        width: 55px;\n        height: 55px;\n        text-align: left;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n        z-index: 9;\n      }\n\n      .fab-toggle {\n        border-radius: 100%;\n        width: 40px;\n        height: 40px;\n        color: white;\n        text-align: center;\n        line-height: 50px;\n        transform: translate3d(0, 0, 0);\n        transition: all ease-out 200ms;\n        z-index: 2;\n        transition-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1.275);\n        transition-duration: 400ms;\n        transform: scale(1.1, 1.1) translate3d(0, 0, 0);\n        cursor: pointer;\n        box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);\n      }\n\n      .fab-menu .fab-toggle:hover {\n        transform: scale(1.2, 1.2) translate3d(0, 0, 0);\n      }\n\n      .fab-menu /deep/ .item {\n        opacity: 0;\n      }\n\n      .fab-menu.active /deep/ .item {\n        opacity: 1;\n      }\n\n      .fab-menu.active /deep/ .content-wrapper {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n\n      .fab-menu.active /deep/ .content {\n        display: block;\n      }\n\n      .fab-menu.active .fab-toggle {\n        transition-timing-function: linear;\n        transition-duration: 200ms;\n        transform: scale(0.8, 0.8) translate3d(0, 0, 0);\n      }\n    "]
                }] }
    ];
    /** @nocollapse */
    NgxFloatButtonComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    NgxFloatButtonComponent.propDecorators = {
        icon: [{ type: Input }],
        direction: [{ type: Input }],
        spaceBetweenButtons: [{ type: Input }],
        open: [{ type: Input }],
        color: [{ type: Input }],
        disabled: [{ type: Input }],
        events: [{ type: Output }],
        buttons: [{ type: ContentChildren, args: [NgxFloatItemButtonComponent,] }]
    };
    return NgxFloatButtonComponent;
}());
export { NgxFloatButtonComponent };
if (false) {
    /** @type {?} */
    NgxFloatButtonComponent.prototype.state;
    /** @type {?} */
    NgxFloatButtonComponent.prototype.icon;
    /** @type {?} */
    NgxFloatButtonComponent.prototype.direction;
    /** @type {?} */
    NgxFloatButtonComponent.prototype.spaceBetweenButtons;
    /** @type {?} */
    NgxFloatButtonComponent.prototype.open;
    /** @type {?} */
    NgxFloatButtonComponent.prototype.color;
    /** @type {?} */
    NgxFloatButtonComponent.prototype.disabled;
    /** @type {?} */
    NgxFloatButtonComponent.prototype.events;
    /** @type {?} */
    NgxFloatButtonComponent.prototype.buttons;
    /** @type {?} */
    NgxFloatButtonComponent.prototype._destroy$;
    /** @type {?} */
    NgxFloatButtonComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,