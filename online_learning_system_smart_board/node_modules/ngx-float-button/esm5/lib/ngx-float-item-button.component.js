/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ViewChild, ChangeDetectionStrategy } from '@angular/core';
var NgxFloatItemButtonComponent = /** @class */ (function () {
    function NgxFloatItemButtonComponent() {
        this.color = 'white';
        this.disabled = false;
        this.clicked = new EventEmitter();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    NgxFloatItemButtonComponent.prototype.emitClickEvent = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.disabled) {
            return this.disabled;
        }
        this.clicked.emit($event);
    };
    NgxFloatItemButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-float-item-button',
                    template: "\n    <div #elementref class=\"item {{ disabled ? 'disabled' : ''}}\" (click)=\"emitClickEvent($event)\">\n        <div class=\"content-wrapper\" #contentref>\n          <div class=\"content\" [style.display]=\"content ? 'block' : 'none'\">{{content}}</div>\n        </div>\n        <a class=\"fab-item\" [style.backgroundColor]=\"color\">\n           <mat-icon> {{ icon }} </mat-icon>\n        </a>\n    </div>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["\n      .item {\n        width: 250px;\n        height: 40px;\n        left: -203px;\n        transform: translate3d(0, 0, 0);\n        transition: transform, opacity ease-out 200ms;\n        transition-timing-function: cubic-bezier(0.165, 0.84, 0.44, 1);\n        transition-duration: 180ms;\n        position: absolute;\n        cursor: pointer;\n        top: 5px;\n        display: flex;\n        justify-content: flex-end;\n        align-items: center;\n      }\n\n      .item.disabled {\n        pointer-events: none;\n      }\n\n      .item.disabled .fab-item {\n        background-color: lightgray;\n      }\n\n      .content {\n        background: #333333;\n        margin-right: 50px;\n        line-height: 25px;\n        color: white;\n        padding: 2px 7px;\n        border-radius: 3px;\n        display: none;\n        font-size: 12px;\n        height: 25px;\n        margin-top: 4px;\n        box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);\n      }\n\n      .fab-item {\n        right: 0;\n        background: white;\n        border-radius: 100%;\n        width: 40px;\n        height: 40px;\n        position: absolute;\n        color: #797979;\n        text-align: center;\n        cursor: pointer;\n        line-height: 50px;\n        box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);\n      }\n    "]
                }] }
    ];
    NgxFloatItemButtonComponent.propDecorators = {
        icon: [{ type: Input }],
        content: [{ type: Input }],
        color: [{ type: Input }],
        disabled: [{ type: Input }],
        clicked: [{ type: Output }],
        elementref: [{ type: ViewChild, args: ['elementref',] }],
        contentref: [{ type: ViewChild, args: ['contentref',] }]
    };
    return NgxFloatItemButtonComponent;
}());
export { NgxFloatItemButtonComponent };
if (false) {
    /** @type {?} */
    NgxFloatItemButtonComponent.prototype.icon;
    /** @type {?} */
    NgxFloatItemButtonComponent.prototype.content;
    /** @type {?} */
    NgxFloatItemButtonComponent.prototype.color;
    /** @type {?} */
    NgxFloatItemButtonComponent.prototype.disabled;
    /** @type {?} */
    NgxFloatItemButtonComponent.prototype.clicked;
    /** @type {?} */
    NgxFloatItemButtonComponent.prototype.elementref;
    /** @type {?} */
    NgxFloatItemButtonComponent.prototype.contentref;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWZsb2F0LWl0ZW0tYnV0dG9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1mbG9hdC1idXR0b24vIiwic291cmNlcyI6WyJsaWIvbmd4LWZsb2F0LWl0ZW0tYnV0dG9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0c7SUFBQTtRQTJFRSxVQUFLLEdBQUcsT0FBTyxDQUFDO1FBRWhCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFHakIsWUFBTyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO0lBY2xELENBQUM7Ozs7O0lBTkMsb0RBQWM7Ozs7SUFBZCxVQUFlLE1BQWE7UUFDMUIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztTQUN0QjtRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVCLENBQUM7O2dCQTdGRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLHVCQUF1QjtvQkF3RGpDLFFBQVEsRUFBRSxpYUFTVDtvQkFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTs2QkFoRTdDLGl5Q0FvREM7aUJBYUo7Ozt1QkFFRSxLQUFLOzBCQUVMLEtBQUs7d0JBRUwsS0FBSzsyQkFFTCxLQUFLOzBCQUdMLE1BQU07NkJBR04sU0FBUyxTQUFDLFlBQVk7NkJBR3RCLFNBQVMsU0FBQyxZQUFZOztJQVN6QixrQ0FBQztDQUFBLEFBOUZELElBOEZDO1NBekJZLDJCQUEyQjs7O0lBQ3RDLDJDQUNhOztJQUNiLDhDQUNnQjs7SUFDaEIsNENBQ2dCOztJQUNoQiwrQ0FDaUI7O0lBRWpCLDhDQUNnRDs7SUFFaEQsaURBQ1c7O0lBRVgsaURBQ1ciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgVmlld0NoaWxkLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICduZ3gtZmxvYXQtaXRlbS1idXR0b24nLFxyXG4gIHN0eWxlczogW1xyXG4gICAgYFxyXG4gICAgICAuaXRlbSB7XHJcbiAgICAgICAgd2lkdGg6IDI1MHB4O1xyXG4gICAgICAgIGhlaWdodDogNDBweDtcclxuICAgICAgICBsZWZ0OiAtMjAzcHg7XHJcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcclxuICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0sIG9wYWNpdHkgZWFzZS1vdXQgMjAwbXM7XHJcbiAgICAgICAgdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjE2NSwgMC44NCwgMC40NCwgMSk7XHJcbiAgICAgICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMTgwbXM7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgICAgICB0b3A6IDVweDtcclxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XHJcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgfVxyXG5cclxuICAgICAgLml0ZW0uZGlzYWJsZWQge1xyXG4gICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAuaXRlbS5kaXNhYmxlZCAuZmFiLWl0ZW0ge1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Z3JheTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLmNvbnRlbnQge1xyXG4gICAgICAgIGJhY2tncm91bmQ6ICMzMzMzMzM7XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiA1MHB4O1xyXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAyNXB4O1xyXG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcclxuICAgICAgICBwYWRkaW5nOiAycHggN3B4O1xyXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDNweDtcclxuICAgICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMTJweDtcclxuICAgICAgICBoZWlnaHQ6IDI1cHg7XHJcbiAgICAgICAgbWFyZ2luLXRvcDogNHB4O1xyXG4gICAgICAgIGJveC1zaGFkb3c6IDAgMnB4IDVweCAwIHJnYmEoMCwgMCwgMCwgMC4yNik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC5mYWItaXRlbSB7XHJcbiAgICAgICAgcmlnaHQ6IDA7XHJcbiAgICAgICAgYmFja2dyb3VuZDogd2hpdGU7XHJcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMTAwJTtcclxuICAgICAgICB3aWR0aDogNDBweDtcclxuICAgICAgICBoZWlnaHQ6IDQwcHg7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIGNvbG9yOiAjNzk3OTc5O1xyXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICAgICAgbGluZS1oZWlnaHQ6IDUwcHg7XHJcbiAgICAgICAgYm94LXNoYWRvdzogMCAycHggNXB4IDAgcmdiYSgwLCAwLCAwLCAwLjI2KTtcclxuICAgICAgfVxyXG4gICAgYFxyXG4gIF0sXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgIDxkaXYgI2VsZW1lbnRyZWYgY2xhc3M9XCJpdGVtIHt7IGRpc2FibGVkID8gJ2Rpc2FibGVkJyA6ICcnfX1cIiAoY2xpY2spPVwiZW1pdENsaWNrRXZlbnQoJGV2ZW50KVwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb250ZW50LXdyYXBwZXJcIiAjY29udGVudHJlZj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb250ZW50XCIgW3N0eWxlLmRpc3BsYXldPVwiY29udGVudCA/ICdibG9jaycgOiAnbm9uZSdcIj57e2NvbnRlbnR9fTwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxhIGNsYXNzPVwiZmFiLWl0ZW1cIiBbc3R5bGUuYmFja2dyb3VuZENvbG9yXT1cImNvbG9yXCI+XHJcbiAgICAgICAgICAgPG1hdC1pY29uPiB7eyBpY29uIH19IDwvbWF0LWljb24+XHJcbiAgICAgICAgPC9hPlxyXG4gICAgPC9kaXY+XHJcbiAgYCxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd4RmxvYXRJdGVtQnV0dG9uQ29tcG9uZW50IHtcclxuICBASW5wdXQoKVxyXG4gIGljb246IHN0cmluZztcclxuICBASW5wdXQoKVxyXG4gIGNvbnRlbnQ6IHN0cmluZztcclxuICBASW5wdXQoKVxyXG4gIGNvbG9yID0gJ3doaXRlJztcclxuICBASW5wdXQoKVxyXG4gIGRpc2FibGVkID0gZmFsc2U7XHJcblxyXG4gIEBPdXRwdXQoKVxyXG4gIGNsaWNrZWQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICBAVmlld0NoaWxkKCdlbGVtZW50cmVmJylcclxuICBlbGVtZW50cmVmO1xyXG5cclxuICBAVmlld0NoaWxkKCdjb250ZW50cmVmJylcclxuICBjb250ZW50cmVmO1xyXG5cclxuICBlbWl0Q2xpY2tFdmVudCgkZXZlbnQ6IEV2ZW50KSB7XHJcbiAgICBpZiAodGhpcy5kaXNhYmxlZCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5kaXNhYmxlZDtcclxuICAgIH1cclxuICAgIHRoaXMuY2xpY2tlZC5lbWl0KCRldmVudCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==